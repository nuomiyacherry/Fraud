{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js!D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\工作项目\\部反诈\\src\\components\\echarts\\map\\visualMapChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\components\\echarts\\map\\visualMapChart.vue","mtime":1598758386853},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\nimport ECharts from 'vue-echarts/components/ECharts'; // import globalChartMixin from 'mixins/globalChartMixin'\n\nimport storage from \"utils/storage\";\nimport { getEnCountry, getCnCountry, getCoord } from 'constants/worldsForMap'; //eslint-disable-line\n// import { getMaxValue, getMinValue } from 'constants/utils'\n// import { visualMapOpt } from 'constants/chartConfig'\n\nimport visualMapMixin from 'mixins/visualMapMixin';\nvar chartColors = storage.get('tColors');\nexport default {\n  name: 'mapLineChart',\n  components: {\n    ECharts: ECharts\n  },\n  mixins: [// globalChartMixin\n  visualMapMixin],\n  props: {\n    chartData: {\n      type: Object,\n      default: function _default() {\n        return {\n          // moveLineData: [\n          //   [{ name: '湖北' }, { name: '北京', value: 95 }],\n          //   [{ name: '湖北' }, { name: '广东', value: 90 }],\n          //   [{ name: '湖北' }, { name: '上海', value: 80 }],\n          //   [{ name: '湖北' }, { name: '西藏', value: 70 }]\n          //   // [{ name: '中国' }, { name: '美国', value: 95 }],\n          //   // [{ name: '中国' }, { name: '英国', value: 90 }],\n          //   // [{ name: '中国' }, { name: '意大利', value: 80 }],\n          //   // [{ name: '中国' }, { name: '澳大利亚', value: 70 }]\n          // ]\n          seriesData: [{\n            name: '北京',\n            value: 1253\n          }, {\n            name: '广东',\n            value: 965\n          }, {\n            name: '上海',\n            value: 732\n          }, {\n            name: '湖北',\n            value: 655\n          }, {\n            name: '湖南',\n            value: 523\n          }, {\n            name: '西藏',\n            value: 501\n          }, {\n            name: '天津',\n            value: 425\n          }, {\n            name: '四川',\n            value: 412\n          }, {\n            name: '浙江',\n            value: 365\n          }]\n        };\n      }\n    },\n    // colors: {\n    //   type: Array,\n    //   default: () => chartColors.mapColors\n    // },\n    mapItemAreaColor: {\n      type: String,\n      default: chartColors.visualMap.area\n    },\n    roam: {\n      type: Boolean,\n      default: false\n    },\n    mapItemHoverareaColor: {\n      type: String,\n      default: chartColors.visualMap.hoverArea\n    },\n    mapItemborderColor: {\n      type: String,\n      default: chartColors.visualMap.border\n    },\n    mapLabelColor: {\n      type: String,\n      default: chartColors.visualMap.label\n    },\n    tooltipFormatter: {\n      type: String,\n      default: '告警事件'\n    },\n    mapType: {\n      type: String,\n      default: 'china'\n    },\n    mapZoom: {\n      type: Number,\n      default: 1.1\n    },\n    layoutCenter: {\n      type: Array,\n      default: function _default() {\n        return ['52%', '45%'];\n      }\n    },\n    showTooltip: {\n      type: Boolean,\n      default: true\n    },\n    mapLabelShow: {\n      type: Boolean,\n      default: false\n    },\n    mapLabelEmphasisShow: {\n      type: Boolean,\n      default: true\n    },\n    shadowBlur: {\n      type: Number,\n      default: 40\n    }\n  },\n  data: function data() {\n    return {\n      chartName: '[地图模板]',\n      mapJson: {} // maxValue: 0,\n      // minValue: 0\n\n    };\n  },\n  watch: {\n    chartData: function chartData() {\n      console.log(\"\".concat(this.chartName, \"chartData[\\u65B0\\u503C:\").concat(this.newVal, \";\\u65E7\\u503C:\").concat(this.oldVal, \"]\"));\n      this.refresh();\n    },\n    mapItemAreaColor: function mapItemAreaColor() {\n      console.log(\"\".concat(this.chartName, \"mapItemAreaColor[\\u65B0\\u503C:\").concat(this.newVal, \";\\u65E7\\u503C:\").concat(this.oldVal, \"]\"));\n      this.refresh();\n    },\n    mapItemHoverareaColor: function mapItemHoverareaColor() {\n      console.log(\"\".concat(this.chartName, \"mapItemHoverareaColor[\\u65B0\\u503C:\").concat(this.newVal, \";\\u65E7\\u503C:\").concat(this.oldVal, \"]\"));\n      this.refresh();\n    },\n    mapItemborderColor: function mapItemborderColor() {\n      console.log(\"\".concat(this.chartName, \"mapItemborderColor[\\u65B0\\u503C:\").concat(this.newVal, \";\\u65E7\\u503C:\").concat(this.oldVal, \"]\"));\n      this.refresh();\n    },\n    mapLabelColor: function mapLabelColor() {\n      console.log(\"\".concat(this.chartName, \"mapLabelColor[\\u65B0\\u503C:\").concat(this.newVal, \";\\u65E7\\u503C:\").concat(this.oldVal, \"]\"));\n      this.refresh();\n    },\n    mapType: function mapType() {\n      console.log(\"\".concat(this.chartName, \"mapType[\\u65B0\\u503C:\").concat(this.newVal, \";\\u65E7\\u503C:\").concat(this.oldVal, \"]\"));\n      this.refresh();\n    },\n    mapZoom: function mapZoom() {\n      console.log(\"\".concat(this.chartName, \"mapZoom[\\u65B0\\u503C:\").concat(this.newVal, \";\\u65E7\\u503C:\").concat(this.oldVal, \"]\"));\n      this.refresh();\n    },\n    layoutCenter: function layoutCenter(newVal, oldVal) {\n      console.log('newVal===', newVal);\n      console.log('oldVal===', oldVal);\n      console.log(\"\".concat(this.chartName, \"layoutCenter[\\u65B0\\u503C:\").concat(newVal, \";\\u65E7\\u503C:\").concat(oldVal, \"]\"));\n      this.refresh();\n    },\n    showTooltip: function showTooltip() {\n      console.log(\"\".concat(this.chartName, \"showTooltip[\\u65B0\\u503C:\").concat(this.newVal, \";\\u65E7\\u503C:\").concat(this.oldVal, \"]\"));\n      this.refresh();\n    },\n    mapLabelShow: function mapLabelShow() {\n      console.log(\"\".concat(this.chartName, \"mapLabelShow[\\u65B0\\u503C:\").concat(this.newVal, \";\\u65E7\\u503C:\").concat(this.oldVal, \"]\"));\n      this.refresh();\n    },\n    mapLabelEmphasisShow: function mapLabelEmphasisShow() {\n      console.log(\"\".concat(this.chartName, \"mapLabelEmphasisShow[\\u65B0\\u503C:\").concat(this.newVal, \";\\u65E7\\u503C:\").concat(this.oldVal, \"]\"));\n      this.refresh();\n    }\n  },\n  methods: {\n    // getMaxMinValue(data) {\n    //   if (data && data.length && data.length > 0) {\n    //     const maxArr = data.sort((a, b) => {\n    //       return b.value - a.value\n    //     })\n    //     this.maxValue = maxArr[0].value\n    //     this.minValue = maxArr[data.length - 1].value\n    //   }\n    // },\n    initMapJson: function initMapJson() {\n      if (this.mapType === 'china') {\n        this.mapJson = require(\"echarts/map/json/\".concat(this.mapType, \".json\"));\n        ECharts.registerMap(this.mapType, this.mapJson);\n      } else if (this.mapType === 'world') {\n        this.mapJson = require(\"echarts/map/json/\".concat(this.mapType, \".json\"));\n        ECharts.registerMap(this.mapType, this.mapJson);\n      } else {\n        this.mapJson = require(\"echarts/map/json/province/\".concat(this.mapType, \".json\"));\n        ECharts.registerMap(this.mapType, this.mapJson);\n      }\n    },\n    tooltipOpt: function tooltipOpt(params) {\n      this.tooltipFormatter = this.tooltipFormatter || '';\n      var name = params.name;\n\n      if (this.mapType === 'world') {\n        name = getCnCountry(params.name);\n      }\n\n      var html = '';\n\n      if (this.tooltipFormatter === '') {\n        html = \"\".concat(name, \" \\uFF1A\").concat(params.data ? params.data.value[2] : 0);\n      } else {\n        if (this.tooltipFormatter === 'ministry') {\n          html = \"\".concat(name, \"\\uFF1A\").concat(params.data.value[2] === 0 ? '未对接' : params.data.value[2] === 1 ? '对接中' : '已对接');\n        } else if (this.tooltipFormatter === 'enterprise') {\n          html = \"\".concat(name, \" <br/> \\u88AB\\u653B\\u51FB\\u4F01\\u4E1A\\u6570\\u91CF\\uFF1A\").concat(params.data.value[2] || 0, \" <br/> \\u88AB\\u653B\\u51FB\\u6210\\u529F\\u4F01\\u4E1A\\u6570\\u91CF\\uFF1A\").concat(params.data.success || 0);\n        } else {\n          html = \"\".concat(name, \" <br/>\").concat(this.tooltipFormatter, \"\\uFF1A\").concat(params.data ? params.data.value[2] : 0);\n        }\n      }\n\n      return html;\n    },\n    convertMapData: function convertMapData(data) {\n      var geoCoordMap = {};\n      var mapFeatures = this.mapJson.features; // console.log('mapFeatures===', mapFeatures)\n\n      if (mapFeatures && mapFeatures.length !== 0) {\n        mapFeatures.forEach(function (v) {\n          var name = v.properties.name; // 地区名称\n          // geoCoordMap[name] = v.properties.cp // 地区经纬度\n\n          if (name !== '') {\n            if (v.properties.cp) {\n              geoCoordMap[name] = v.properties.cp; // 地区经纬度\n            } else {\n              if (data && data.length !== 0) {\n                // console.log('data=========+++++++', data)\n                data.forEach(function (item, i) {\n                  if (name === item.name) {\n                    geoCoordMap[name] = item.cp;\n                  }\n                });\n              }\n            }\n          }\n        });\n      }\n\n      var res = [];\n\n      if (data && data.length !== 0) {\n        data.forEach(function (item) {\n          // console.log('item===', item)\n          var geoCoord = geoCoordMap[item.name]; // console.log('geoCoord', geoCoord)\n\n          if (geoCoord) {\n            var obj = {};\n\n            for (var key in item) {\n              if (key === 'value') {\n                obj[key] = geoCoord.concat(item[key]);\n              } else {\n                obj[key] = item[key];\n              }\n            }\n\n            res.push(obj);\n          }\n        });\n      } // console.log('res==', res)\n\n\n      return res;\n    },\n    setOptions: function setOptions() {\n      var _this = this;\n\n      var that = this; // console.log('this.seriesData===', this.seriesData)\n      // this.getMaxMinValue(this.chartData.seriesData)\n      // this.getMaxMinValue(this.chartData.seriesData)\n      // const size = this.maxValue - this.minValue\n\n      this.initMapJson();\n\n      if (this.mapType === 'world') {\n        // this.mapLabelShow = false\n        if (this.chartData.seriesData && this.chartData.seriesData.length !== 0) {\n          this.chartData.seriesData.forEach(function (item) {\n            item.name = getEnCountry(item.name);\n            item['cp'] = getCoord(item.name);\n          });\n        }\n      }\n\n      console.log('this.visualMap():', this.visualMap());\n      var mapOpts = {\n        tooltip: {\n          show: this.showTooltip,\n          trigger: 'item',\n          transitionDuration: 0,\n          formatter: function formatter(params) {\n            // console.log('params', params)\n            // const data = params\n            return that.tooltipOpt(params);\n          }\n        },\n        visualMap: _objectSpread({}, this.visualMap()),\n        // visualMap: {\n        //   ...visualMapOpt(\n        //   this.visualMapLeft,\n        //   this.visualMapTop,\n        //   this.visualMapRight,\n        //   this.visualMapBottom,\n        //   this.visualMapOrient,\n        //   this.visualMapAlign\n        // ),\n        //   show: this.visualMapShow,\n        //   min: this.visualMapMin, //this.minValue, //this.min\n        //   max: this.visualMapMax, //this.maxValue, //this.max,\n        //   inRange: {\n        //     color: ['rgba(219,112,147,0.4)', 'rgba(238,25,27,1)']\n        //   },\n        //   // color: ['rgba(219,112,147,0.4)', 'rgba(238,25,27,1)'], //[this.colors[0], this.colors[1]],\n        //   text: ['高', '低'], // 文本，默认为数值文本\n        //   textStyle: {\n        //     color: this.mapLabelColor//this.colors[3]\n        //   },\n        //   calculable: true\n        // },\n        geo: {\n          show: true,\n          map: this.mapType,\n          roam: this.roam,\n          zoom: this.mapZoom,\n          hoverAnimation: true,\n          layoutCenter: this.layoutCenter,\n          layoutSize: '100%',\n          label: {\n            normal: {\n              show: this.mapLabelShow,\n              color: this.mapLabelColor //this.colors[5] //chartColors.whiteColor\n\n            },\n            emphasis: {\n              show: this.mapLabelEmphasisShow,\n              //true,\n              color: this.mapLabelColor //this.colors[5]\n\n            }\n          },\n          itemStyle: {\n            normal: {\n              areaColor: this.mapItemAreaColor,\n              //this.colors[0], //chartColors.mapItemAreaColor,\n              borderColor: this.mapItemborderColor,\n              //this.colors[2], //chartColors.mapItemborderColor,\n              // borderWidth: 1\n              shadowColor: this.mapItemborderColor,\n              shadowBlur: this.shadowBlur //40\n\n            },\n            emphasis: {\n              areaColor: this.mapItemHoverareaColor //this.colors[1] //chartColors.mapItemHoverareaColor\n\n            }\n          }\n        },\n        series: [{\n          name: this.tooltipFormatter,\n          type: 'map',\n          mapType: this.mapType,\n          geoIndex: 0,\n          data: this.convertMapData(this.chartData.seriesData)\n        }] // console.log('mapOpts==', mapOpts)\n\n      };\n      setTimeout(function () {\n        _this.options = mapOpts;\n      }, 20);\n      return mapOpts;\n    }\n  }\n};",{"version":3,"sources":["visualMapChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <ECharts :options=\"options\" :autoresize=\"true\"></ECharts>\r\n</template>\r\n\r\n<script>\r\n  import ECharts from 'vue-echarts/components/ECharts'\r\n  // import globalChartMixin from 'mixins/globalChartMixin'\r\n  import storage from \"utils/storage\"\r\n  import { getEnCountry, getCnCountry, getCoord } from 'constants/worldsForMap'\r\n//eslint-disable-line\r\n  // import { getMaxValue, getMinValue } from 'constants/utils'\r\n  // import { visualMapOpt } from 'constants/chartConfig'\r\n  import visualMapMixin from 'mixins/visualMapMixin'\r\n  const chartColors = storage.get('tColors')\r\n\r\n  export default {\r\n    name: 'mapLineChart',\r\n    components: { ECharts },\r\n    mixins: [\r\n      // globalChartMixin\r\n      visualMapMixin\r\n    ],\r\n    props: {\r\n      chartData: {\r\n        type: Object,\r\n        default: () => {\r\n          return {\r\n            // moveLineData: [\r\n            //   [{ name: '湖北' }, { name: '北京', value: 95 }],\r\n            //   [{ name: '湖北' }, { name: '广东', value: 90 }],\r\n            //   [{ name: '湖北' }, { name: '上海', value: 80 }],\r\n            //   [{ name: '湖北' }, { name: '西藏', value: 70 }]\r\n            //   // [{ name: '中国' }, { name: '美国', value: 95 }],\r\n            //   // [{ name: '中国' }, { name: '英国', value: 90 }],\r\n            //   // [{ name: '中国' }, { name: '意大利', value: 80 }],\r\n            //   // [{ name: '中国' }, { name: '澳大利亚', value: 70 }]\r\n            // ]\r\n            seriesData: [\r\n              { name: '北京', value: 1253 },\r\n              { name: '广东', value: 965 },\r\n              { name: '上海', value: 732 },\r\n              { name: '湖北', value: 655 },\r\n              { name: '湖南', value: 523 },\r\n              { name: '西藏', value: 501 },\r\n              { name: '天津', value: 425 },\r\n              { name: '四川', value: 412 },\r\n              { name: '浙江', value: 365 }\r\n            ]\r\n          }\r\n        }\r\n      },\r\n      // colors: {\r\n      //   type: Array,\r\n      //   default: () => chartColors.mapColors\r\n      // },\r\n      mapItemAreaColor: {\r\n        type: String,\r\n        default: chartColors.visualMap.area\r\n      },\r\n      roam: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      mapItemHoverareaColor: {\r\n        type: String,\r\n        default: chartColors.visualMap.hoverArea\r\n      },\r\n      mapItemborderColor: {\r\n        type: String,\r\n        default: chartColors.visualMap.border\r\n      },\r\n      mapLabelColor: {\r\n        type: String,\r\n        default: chartColors.visualMap.label\r\n      },\r\n      tooltipFormatter: {\r\n        type: String,\r\n        default: '告警事件'\r\n      },\r\n      mapType: {\r\n        type: String,\r\n        default: 'china'\r\n      },\r\n      mapZoom: {\r\n        type: Number,\r\n        default: 1.1\r\n      },\r\n      layoutCenter: {\r\n        type: Array,\r\n        default: () => ['52%', '45%']\r\n      },\r\n      showTooltip: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      mapLabelShow: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      mapLabelEmphasisShow: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      shadowBlur: {\r\n        type: Number,\r\n        default: 40\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        chartName: '[地图模板]',\r\n        mapJson: {}\r\n        // maxValue: 0,\r\n        // minValue: 0\r\n      }\r\n    },\r\n    watch: {\r\n      chartData() {\r\n        console.log(`${this.chartName}chartData[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapItemAreaColor() {\r\n        console.log(`${this.chartName}mapItemAreaColor[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapItemHoverareaColor() {\r\n        console.log(`${this.chartName}mapItemHoverareaColor[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapItemborderColor() {\r\n        console.log(`${this.chartName}mapItemborderColor[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapLabelColor() {\r\n        console.log(`${this.chartName}mapLabelColor[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapType() {\r\n        console.log(`${this.chartName}mapType[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapZoom() {\r\n        console.log(`${this.chartName}mapZoom[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      layoutCenter(newVal, oldVal) {\r\n        console.log('newVal===', newVal)\r\n        console.log('oldVal===', oldVal)\r\n        console.log(`${this.chartName}layoutCenter[新值:${newVal};旧值:${oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      showTooltip() {\r\n        console.log(`${this.chartName}showTooltip[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapLabelShow() {\r\n        console.log(`${this.chartName}mapLabelShow[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapLabelEmphasisShow() {\r\n        console.log(`${this.chartName}mapLabelEmphasisShow[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      }\r\n    },\r\n    methods: {\r\n      // getMaxMinValue(data) {\r\n      //   if (data && data.length && data.length > 0) {\r\n      //     const maxArr = data.sort((a, b) => {\r\n      //       return b.value - a.value\r\n      //     })\r\n      //     this.maxValue = maxArr[0].value\r\n      //     this.minValue = maxArr[data.length - 1].value\r\n      //   }\r\n      // },\r\n      initMapJson() {\r\n        if (this.mapType === 'china') {\r\n          this.mapJson = require(`echarts/map/json/${this.mapType}.json`)\r\n          ECharts.registerMap(this.mapType, this.mapJson)\r\n        } else if (this.mapType === 'world') {\r\n          this.mapJson = require(`echarts/map/json/${this.mapType}.json`)\r\n          ECharts.registerMap(this.mapType, this.mapJson)\r\n        } else {\r\n          this.mapJson = require(`echarts/map/json/province/${\r\n            this.mapType\r\n            }.json`)\r\n          ECharts.registerMap(this.mapType, this.mapJson)\r\n        }\r\n      },\r\n      tooltipOpt(params) {\r\n        this.tooltipFormatter = this.tooltipFormatter || ''\r\n        let name = params.name\r\n        if (this.mapType === 'world') {\r\n          name = getCnCountry(params.name)\r\n        }\r\n        let html = ''\r\n        if (this.tooltipFormatter === '') {\r\n          html = `${name} ：${params.data ? params.data.value[2] : 0}`\r\n        } else {\r\n          if(this.tooltipFormatter === 'ministry') {\r\n            html = `${name}：${params.data.value[2] === 0 ? '未对接' : params.data.value[2] === 1 ? '对接中' : '已对接'}`\r\n          }else if(this.tooltipFormatter === 'enterprise') {\r\n            html = `${name} <br/> 被攻击企业数量：${params.data.value[2] || 0} <br/> 被攻击成功企业数量：${params.data.success || 0}`\r\n          }else{\r\n            html = `${name} <br/>${this.tooltipFormatter}：${params.data ? params.data.value[2] : 0}`\r\n          }\r\n        }\r\n        return html\r\n      },\r\n      convertMapData(data) {\r\n        let geoCoordMap = {}\r\n        let mapFeatures = this.mapJson.features\r\n        // console.log('mapFeatures===', mapFeatures)\r\n        if (mapFeatures && mapFeatures.length !== 0) {\r\n          mapFeatures.forEach(v => {\r\n            let name = v.properties.name // 地区名称\r\n            // geoCoordMap[name] = v.properties.cp // 地区经纬度\r\n            if (name !== '') {\r\n              if (v.properties.cp) {\r\n                geoCoordMap[name] = v.properties.cp // 地区经纬度\r\n              } else {\r\n                if (data && data.length !== 0) {\r\n                  // console.log('data=========+++++++', data)\r\n                  data.forEach((item, i) => {\r\n                    if (name === item.name) {\r\n                      geoCoordMap[name] = item.cp\r\n                    }\r\n                  })\r\n                }\r\n              }\r\n            }\r\n          })\r\n        }\r\n        const res = []\r\n        if (data && data.length !== 0) {\r\n          data.forEach(item => {\r\n            // console.log('item===', item)\r\n            let geoCoord = geoCoordMap[item.name]\r\n            // console.log('geoCoord', geoCoord)\r\n            if (geoCoord) {\r\n              const obj = {}\r\n              for (let key in item) {\r\n                if (key === 'value') {\r\n                  obj[key] = geoCoord.concat(item[key])\r\n                } else {\r\n                  obj[key] = item[key]\r\n                }\r\n              }\r\n              res.push(obj)\r\n            }\r\n          })\r\n        }\r\n        // console.log('res==', res)\r\n        return res\r\n      },\r\n      setOptions() {\r\n        let that = this\r\n        // console.log('this.seriesData===', this.seriesData)\r\n        // this.getMaxMinValue(this.chartData.seriesData)\r\n        // this.getMaxMinValue(this.chartData.seriesData)\r\n        // const size = this.maxValue - this.minValue\r\n\r\n        this.initMapJson()\r\n\r\n        if (this.mapType === 'world') {\r\n          // this.mapLabelShow = false\r\n          if (this.chartData.seriesData && this.chartData.seriesData.length !== 0) {\r\n            this.chartData.seriesData.forEach(item => {\r\n              item.name = getEnCountry(item.name)\r\n              item['cp'] = getCoord(item.name)\r\n            })\r\n          }\r\n        }\r\n\r\n        console.log('this.visualMap():', this.visualMap())\r\n        let mapOpts = {\r\n          tooltip: {\r\n            show: this.showTooltip,\r\n            trigger: 'item',\r\n            transitionDuration: 0,\r\n            formatter: function(params) {\r\n              // console.log('params', params)\r\n              // const data = params\r\n              return that.tooltipOpt(params)\r\n            }\r\n          },\r\n          visualMap: {...this.visualMap()},\r\n          // visualMap: {\r\n          //   ...visualMapOpt(\r\n          //   this.visualMapLeft,\r\n          //   this.visualMapTop,\r\n          //   this.visualMapRight,\r\n          //   this.visualMapBottom,\r\n          //   this.visualMapOrient,\r\n          //   this.visualMapAlign\r\n          // ),\r\n          //   show: this.visualMapShow,\r\n          //   min: this.visualMapMin, //this.minValue, //this.min\r\n          //   max: this.visualMapMax, //this.maxValue, //this.max,\r\n          //   inRange: {\r\n          //     color: ['rgba(219,112,147,0.4)', 'rgba(238,25,27,1)']\r\n          //   },\r\n          //   // color: ['rgba(219,112,147,0.4)', 'rgba(238,25,27,1)'], //[this.colors[0], this.colors[1]],\r\n          //   text: ['高', '低'], // 文本，默认为数值文本\r\n          //   textStyle: {\r\n          //     color: this.mapLabelColor//this.colors[3]\r\n          //   },\r\n          //   calculable: true\r\n          // },\r\n          geo: {\r\n            show: true,\r\n            map: this.mapType,\r\n            roam: this.roam,\r\n            zoom: this.mapZoom,\r\n            hoverAnimation: true,\r\n            layoutCenter: this.layoutCenter,\r\n            layoutSize: '100%',\r\n            label: {\r\n              normal: {\r\n                show: this.mapLabelShow,\r\n                color: this.mapLabelColor//this.colors[5] //chartColors.whiteColor\r\n              },\r\n              emphasis: {\r\n                show: this.mapLabelEmphasisShow, //true,\r\n                color: this.mapLabelColor//this.colors[5]\r\n              }\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                areaColor: this.mapItemAreaColor, //this.colors[0], //chartColors.mapItemAreaColor,\r\n                borderColor: this.mapItemborderColor, //this.colors[2], //chartColors.mapItemborderColor,\r\n                // borderWidth: 1\r\n                shadowColor: this.mapItemborderColor,\r\n                shadowBlur: this.shadowBlur//40\r\n              },\r\n              emphasis: {\r\n                areaColor: this.mapItemHoverareaColor //this.colors[1] //chartColors.mapItemHoverareaColor\r\n              }\r\n            }\r\n          },\r\n          series: [\r\n            {\r\n              name: this.tooltipFormatter,\r\n              type: 'map',\r\n              mapType: this.mapType,\r\n              geoIndex: 0,\r\n              data: this.convertMapData(this.chartData.seriesData)\r\n            }\r\n          ]\r\n        }\r\n        // console.log('mapOpts==', mapOpts)\r\n        setTimeout(() => {\r\n          this.options = mapOpts\r\n        }, 20)\r\n        return mapOpts\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/echarts/map"}]}