{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js!D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\工作项目\\部反诈\\src\\mixins\\axisChartMixin.js","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\mixins\\axisChartMixin.js","mtime":1598758386949},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport _parseFloat from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/parse-float\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\n// import chartColors from 'constants/chartColors'\nimport echarts from 'echarts';\nimport storage from 'utils/storage';\nvar chartColors = storage.get('tColors');\nexport default {\n  props: {\n    rotate: {\n      type: Number,\n      default: 0\n    },\n    showxAxis: {\n      type: Boolean,\n      default: true\n    },\n    showyAxis: {\n      type: Boolean,\n      default: true\n    },\n    xAxisValue: {\n      type: Boolean,\n      default: false\n    },\n    axisType: {\n      type: String,\n      default: 'value'\n    },\n    logBase: {\n      type: Number,\n      default: 10\n    },\n    xAxisTickShow: {\n      type: Boolean,\n      default: true\n    },\n    yAxisTickShow: {\n      type: Boolean,\n      default: true\n    },\n    xAxisLineShow: {\n      type: Boolean,\n      default: true\n    },\n    yAxisLineShow: {\n      type: Boolean,\n      default: true\n    },\n    axisLineSymbol: {\n      type: Array,\n      default: function _default() {\n        return ['none', 'arrow'];\n      }\n    },\n    axisLineColor: {\n      type: String,\n      default: chartColors.axis.line\n    },\n    axisLabelColor: {\n      type: String,\n      default: chartColors.axis.label\n    },\n    xSplitLineShow: {\n      type: Boolean,\n      default: false\n    },\n    ySplitLineShow: {\n      type: Boolean,\n      default: false\n    },\n    xAxisLabelShow: {\n      type: Boolean,\n      default: true\n    },\n    yAxisLabelShow: {\n      type: Boolean,\n      default: true\n    },\n    splitLineType: {\n      type: String,\n      default: 'dotted'\n    },\n    axisSplitLineColor: {\n      type: String,\n      default: chartColors.axis.splitLine\n    },\n    labelLimit: {\n      type: Boolean,\n      default: false\n    },\n    labelLimitWidth: {\n      type: Number,\n      default: 100\n    },\n    axisLabelFontSize: {\n      type: Number,\n      default: 12\n    }\n  },\n  data: function data() {\n    return {};\n  },\n  watch: {\n    rotate: function rotate(newVal, oldVal) {\n      // console.log(`${this.chartName}rotate[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    xAxisValue: function xAxisValue(newVal, oldVal) {\n      // console.log(`${this.chartName}xAxisValue[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    showxAxis: function showxAxis(newVal, oldVal) {\n      // console.log(`${this.chartName}xAxisValue[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    showyAxis: function showyAxis(newVal, oldVal) {\n      // console.log(`${this.chartName}xAxisValue[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    axisType: function axisType(newVal, oldVal) {\n      // console.log(`${this.chartName}axisType[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    logBase: function logBase(newVal, oldVal) {\n      // console.log(`${this.chartName}logBase[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    xAxisTickShow: function xAxisTickShow(newVal, oldVal) {\n      // console.log(`${this.chartName}xAxisTickShow[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    yAxisTickShow: function yAxisTickShow(newVal, oldVal) {\n      // console.log(`${this.chartName}yAxisTickShow[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    xAxisLineShow: function xAxisLineShow(newVal, oldVal) {\n      // console.log(`${this.chartName}xAxisLineShow[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    yAxisLineShow: function yAxisLineShow(newVal, oldVal) {\n      // console.log(`${this.chartName}yAxisLineShow[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    axisLineSymbol: function axisLineSymbol(newVal, oldVal) {\n      // console.log(`${this.chartName}axisLineSymbol[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    axisLineColor: function axisLineColor(newVal, oldVal) {\n      // console.log(`${this.chartName}axisLineColor[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    axisLabelColor: function axisLabelColor(newVal, oldVal) {\n      // console.log(`${this.chartName}axisLabelColor[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    xSplitLineShow: function xSplitLineShow(newVal, oldVal) {\n      // console.log(`${this.chartName}xSplitLineShow[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    ySplitLineShow: function ySplitLineShow(newVal, oldVal) {\n      // console.log(`${this.chartName}ySplitLineShow[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    splitLineType: function splitLineType(newVal, oldVal) {\n      // console.log(`${this.chartName}splitLineType[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    axisSplitLineColor: function axisSplitLineColor(newVal, oldVal) {\n      // console.log(`${this.chartName}axisSplitLineColor[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    labelLimit: function labelLimit(newVal, oldVal) {\n      // console.log(`${this.chartName}labelLimit[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    labelLimitWidth: function labelLimitWidth(newVal, oldVal) {\n      // console.log(`${this.chartName}labelLimitWidth[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    axisLabelFontSize: function axisLabelFontSize(newVal, oldVal) {\n      this.refresh();\n    }\n  },\n  methods: {\n    axisOpt: function axisOpt() {\n      var xAxisType = '',\n          yAxisType = '';\n\n      if (this.xAxisValue) {\n        xAxisType = this.axisType;\n        yAxisType = 'category';\n      } else {\n        xAxisType = 'category';\n        yAxisType = this.axisType;\n      }\n\n      return {\n        xAxis: {\n          show: this.showxAxis,\n          type: xAxisType,\n          splitLine: {\n            show: this.xSplitLineShow,\n            lineStyle: {\n              width: 1,\n              type: this.splitLineType,\n              color: this.axisSplitLineColor\n            }\n          },\n          axisTick: {\n            show: this.xAxisLineShow && this.xAxisTickShow\n          },\n          axisLine: {\n            show: this.xAxisLineShow,\n            lineStyle: {\n              width: 1,\n              color: this.axisLineColor\n            },\n            symbol: this.axisLineSymbol\n          },\n          axisLabel: {\n            show: this.xAxisLabelShow,\n            //true,\n            color: this.axisLabelColor,\n            rotate: this.rotate,\n            fontSize: this.axisLabelFontSize,\n            interval: 0\n          }\n        },\n        yAxis: {\n          show: this.showyAxis,\n          type: yAxisType,\n          splitLine: {\n            show: this.ySplitLineShow,\n            lineStyle: {\n              width: 1,\n              type: this.splitLineType,\n              color: this.axisSplitLineColor\n            }\n          },\n          axisLabel: {\n            show: this.yAxisLabelShow,\n            //true,\n            fontSize: this.axisLabelFontSize,\n            textStyle: {\n              color: this.axisLabelColor\n            },\n            interval: 0\n          },\n          axisTick: {\n            show: this.yAxisLineShow && this.yAxisTickShow\n          },\n          axisLine: {\n            show: this.yAxisLineShow,\n            lineStyle: {\n              width: 1,\n              color: this.axisLineColor\n            },\n            symbol: this.axisLineSymbol\n          }\n        }\n      };\n    },\n    axisValueOpt: function axisValueOpt(option, maxValue, minValue) {\n      if (maxValue > 100000000 || minValue < -100000000) {\n        option.name = '亿';\n\n        option.axisLabel.formatter = function (value) {\n          return value / 100000000;\n        };\n      } else if (maxValue > 10000 || minValue < -10000) {\n        option.name = '万';\n\n        option.axisLabel.formatter = function (value) {\n          return value / 10000;\n        };\n      }\n    },\n    axisOpt2: function axisOpt2(data, series) {\n      var str = 'value';\n      var type = '';\n      var name = [];\n      var formatter = {};\n\n      if (series && series.length !== 0) {\n        var strname = '';\n        series.forEach(function (item, i) {\n          if (i !== series.length - 1) {\n            strname = strname + item.name + ' / ';\n          } else {\n            name.push(strname.substring(0, strname.length - 2));\n\n            if (item.data && item.data.length !== 0) {\n              var arr = [];\n              name.push(item.name);\n              item.data.forEach(function (d) {\n                if (typeof d === 'string') {\n                  type = 'category';\n                  formatter = {\n                    formatter: '{value} %'\n                  };\n                  arr.push(_parseFloat(d.substring(0, d.length - 1)));\n                }\n              });\n\n              if (type === 'category') {\n                item.data = arr;\n              }\n            }\n          }\n        });\n      }\n\n      return {\n        xAxis: {\n          show: this.showxAxis,\n          type: 'category',\n          splitLine: {\n            show: this.xSplitLineShow,\n            lineStyle: {\n              width: 1,\n              type: this.splitLineType,\n              color: this.axisSplitLineColor\n            }\n          },\n          axisTick: {\n            show: this.xAxisLineShow && this.xAxisTickShow\n          },\n          axisLine: {\n            show: this.xAxisLineShow,\n            lineStyle: {\n              width: 1,\n              color: this.axisLineColor\n            },\n            symbol: ['none', 'none']\n          },\n          axisLabel: {\n            show: this.xAxisLabelShow,\n            //true,\n            fontSize: this.axisLabelFontSize,\n            color: this.axisLabelColor,\n            rotate: this.rotate\n          },\n          data: data\n        },\n        yAxis: [{\n          show: this.showyAxis,\n          type: 'value',\n          name: name[0],\n          splitLine: {\n            show: this.ySplitLineShow,\n            lineStyle: {\n              width: 1,\n              type: this.splitLineType,\n              color: this.axisSplitLineColor\n            }\n          },\n          axisLabel: {\n            show: this.yAxisLabelShow,\n            //true,\n            fontSize: this.axisLabelFontSize,\n            textStyle: {\n              color: this.axisLabelColor\n            }\n          },\n          axisTick: {\n            show: this.yAxisLineShow && this.yAxisTickShow\n          },\n          axisLine: {\n            show: this.yAxisLineShow,\n            lineStyle: {\n              width: 1,\n              color: this.axisLineColor\n            },\n            symbol: this.axisLineSymbol\n          }\n        }, {\n          show: this.showyAxis,\n          type: str,\n          name: name[1],\n          splitLine: {\n            show: false\n          },\n          axisLabel: _objectSpread({\n            show: this.yAxisLabelShow,\n            //true,\n            fontSize: this.axisLabelFontSize,\n            textStyle: {\n              color: this.axisLabelColor\n            }\n          }, formatter),\n          axisTick: {\n            show: this.yAxisLineShow && this.yAxisTickShow\n          },\n          axisLine: {\n            show: this.yAxisLineShow,\n            lineStyle: {\n              width: 1,\n              color: this.axisLineColor\n            },\n            symbol: this.axisLineSymbol\n          }\n        }]\n      };\n    },\n    returnAxisOptions: function returnAxisOptions(legendData, categoryData, series, maxValue, minValue) {\n      var _this = this;\n\n      var hasyAxis2 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var axisOptions = this.axisOpt();\n\n      if (hasyAxis2) {\n        axisOptions = this.axisOpt2(categoryData, series);\n      }\n\n      var chartOpts = _objectSpread({\n        color: this.colors,\n        tooltip: _objectSpread({}, this.tooltipOpt()),\n        legend: _objectSpread({}, this.legendOpt(), {\n          show: this.legendShow,\n          data: legendData,\n          textStyle: {\n            color: this.legendTextColor,\n            fontSize: this.legendFontSize\n          },\n          pageTextStyle: {\n            color: this.legendPageTextColor\n          }\n        }),\n        grid: _objectSpread({}, this.gridOpt(), {\n          containLabel: true\n        })\n      }, axisOptions, {\n        series: series\n      });\n\n      if (this.xAxisValue) {\n        chartOpts.yAxis.data = categoryData;\n        chartOpts.yAxis.axisLabel.interval = 0;\n\n        if (this.labelLimit) {\n          chartOpts.yAxis.axisLabel.formatter = function (name) {\n            return echarts.format.truncateText(name, _this.labelLimitWidth);\n          };\n        }\n      } else {\n        chartOpts.xAxis.data = categoryData;\n        chartOpts.xAxis.axisLabel.interval = 0;\n\n        if (this.labelLimit) {\n          chartOpts.xAxis.axisLabel.formatter = function (name) {\n            return echarts.format.truncateText(name, _this.labelLimitWidth);\n          };\n        }\n      }\n\n      if (this.axisType === 'log') {\n        this.xAxisValue ? chartOpts.xAxis.logBase = this.logBase : chartOpts.yAxis.logBase = this.logBase;\n      } // console.log(this.logBase, '=====this.logBase=====')\n      // 数值过大，添加相应单位\n\n\n      if (maxValue > 10000 || minValue < -10000) {\n        //添加单位\n        if (this.xAxisValue) {\n          this.axisValueOpt(chartOpts.xAxis, maxValue, minValue);\n        } else {\n          if (!hasyAxis2) {\n            this.axisValueOpt(chartOpts.yAxis, maxValue, minValue);\n          }\n        }\n      }\n\n      return chartOpts;\n    }\n  }\n};",{"version":3,"sources":["D:\\工作项目\\部反诈\\src\\mixins\\axisChartMixin.js"],"names":["echarts","storage","chartColors","get","props","rotate","type","Number","default","showxAxis","Boolean","showyAxis","xAxisValue","axisType","String","logBase","xAxisTickShow","yAxisTickShow","xAxisLineShow","yAxisLineShow","axisLineSymbol","Array","axisLineColor","axis","line","axisLabelColor","label","xSplitLineShow","ySplitLineShow","xAxisLabelShow","yAxisLabelShow","splitLineType","axisSplitLineColor","splitLine","labelLimit","labelLimitWidth","axisLabelFontSize","data","watch","newVal","oldVal","refresh","methods","axisOpt","xAxisType","yAxisType","xAxis","show","lineStyle","width","color","axisTick","axisLine","symbol","axisLabel","fontSize","interval","yAxis","textStyle","axisValueOpt","option","maxValue","minValue","name","formatter","value","axisOpt2","series","str","length","strname","forEach","item","i","push","substring","arr","d","returnAxisOptions","legendData","categoryData","hasyAxis2","axisOptions","chartOpts","colors","tooltip","tooltipOpt","legend","legendOpt","legendShow","legendTextColor","legendFontSize","pageTextStyle","legendPageTextColor","grid","gridOpt","containLabel","format","truncateText"],"mappings":"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","sourcesContent":["// import chartColors from 'constants/chartColors'\r\nimport echarts from 'echarts'\r\nimport storage from 'utils/storage'\r\nconst chartColors = storage.get('tColors')\r\nexport default {\r\n  props: {\r\n    rotate: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    showxAxis: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    showyAxis: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    xAxisValue: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    axisType: {\r\n      type: String,\r\n      default: 'value'\r\n    },\r\n    logBase: {\r\n      type: Number,\r\n      default: 10\r\n    },\r\n    xAxisTickShow: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    yAxisTickShow: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    xAxisLineShow: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    yAxisLineShow: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    axisLineSymbol: {\r\n      type: Array,\r\n      default: () => ['none', 'arrow']\r\n    },\r\n    axisLineColor: {\r\n      type: String,\r\n      default: chartColors.axis.line\r\n    },\r\n    axisLabelColor: {\r\n      type: String,\r\n      default: chartColors.axis.label\r\n    },\r\n    xSplitLineShow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    ySplitLineShow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    xAxisLabelShow: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    yAxisLabelShow: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    splitLineType: {\r\n      type: String,\r\n      default: 'dotted'\r\n    },\r\n    axisSplitLineColor: {\r\n      type: String,\r\n      default: chartColors.axis.splitLine\r\n    },\r\n    labelLimit: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    labelLimitWidth: {\r\n      type: Number,\r\n      default: 100\r\n    },\r\n    axisLabelFontSize: {\r\n      type: Number,\r\n      default: 12\r\n    }\r\n  },\r\n  data() {\r\n    return {}\r\n  },\r\n  watch: {\r\n    rotate(newVal, oldVal) {\r\n      // console.log(`${this.chartName}rotate[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    xAxisValue(newVal, oldVal) {\r\n      // console.log(`${this.chartName}xAxisValue[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    showxAxis(newVal, oldVal) {\r\n      // console.log(`${this.chartName}xAxisValue[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    showyAxis(newVal, oldVal) {\r\n      // console.log(`${this.chartName}xAxisValue[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    axisType(newVal, oldVal) {\r\n      // console.log(`${this.chartName}axisType[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    logBase(newVal, oldVal) {\r\n      // console.log(`${this.chartName}logBase[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    xAxisTickShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}xAxisTickShow[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    yAxisTickShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}yAxisTickShow[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    xAxisLineShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}xAxisLineShow[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    yAxisLineShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}yAxisLineShow[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    axisLineSymbol(newVal, oldVal) {\r\n      // console.log(`${this.chartName}axisLineSymbol[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    axisLineColor(newVal, oldVal) {\r\n      // console.log(`${this.chartName}axisLineColor[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    axisLabelColor(newVal, oldVal) {\r\n      // console.log(`${this.chartName}axisLabelColor[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    xSplitLineShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}xSplitLineShow[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    ySplitLineShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}ySplitLineShow[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    splitLineType(newVal, oldVal) {\r\n      // console.log(`${this.chartName}splitLineType[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    axisSplitLineColor(newVal, oldVal) {\r\n      // console.log(`${this.chartName}axisSplitLineColor[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    labelLimit(newVal, oldVal) {\r\n      // console.log(`${this.chartName}labelLimit[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    labelLimitWidth(newVal, oldVal) {\r\n      // console.log(`${this.chartName}labelLimitWidth[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    axisLabelFontSize(newVal, oldVal) {\r\n      this.refresh()\r\n    }\r\n  },\r\n  methods: {\r\n    axisOpt() {\r\n      let [xAxisType, yAxisType] = ['', '']\r\n      if (this.xAxisValue) {\r\n        xAxisType = this.axisType\r\n        yAxisType = 'category'\r\n      } else {\r\n        xAxisType = 'category'\r\n        yAxisType = this.axisType\r\n      }\r\n      return {\r\n        xAxis: {\r\n          show: this.showxAxis,\r\n          type: xAxisType,\r\n          splitLine: {\r\n            show: this.xSplitLineShow,\r\n            lineStyle: {\r\n              width: 1,\r\n              type: this.splitLineType,\r\n              color: this.axisSplitLineColor\r\n            }\r\n          },\r\n          axisTick: {\r\n            show: this.xAxisLineShow && this.xAxisTickShow\r\n          },\r\n          axisLine: {\r\n            show: this.xAxisLineShow,\r\n            lineStyle: {\r\n              width: 1,\r\n              color: this.axisLineColor\r\n            },\r\n            symbol: this.axisLineSymbol\r\n          },\r\n          axisLabel: {\r\n            show: this.xAxisLabelShow, //true,\r\n            color: this.axisLabelColor,\r\n            rotate: this.rotate,\r\n            fontSize: this.axisLabelFontSize,\r\n            interval: 0\r\n          }\r\n        },\r\n        yAxis: {\r\n          show: this.showyAxis,\r\n          type: yAxisType,\r\n          splitLine: {\r\n            show: this.ySplitLineShow,\r\n            lineStyle: {\r\n              width: 1,\r\n              type: this.splitLineType,\r\n              color: this.axisSplitLineColor\r\n            }\r\n          },\r\n          axisLabel: {\r\n            show: this.yAxisLabelShow, //true,\r\n            fontSize: this.axisLabelFontSize,\r\n            textStyle: {\r\n              color: this.axisLabelColor\r\n            },\r\n            interval: 0\r\n          },\r\n          axisTick: {\r\n            show: this.yAxisLineShow && this.yAxisTickShow\r\n          },\r\n          axisLine: {\r\n            show: this.yAxisLineShow,\r\n            lineStyle: {\r\n              width: 1,\r\n              color: this.axisLineColor\r\n            },\r\n            symbol: this.axisLineSymbol\r\n          }\r\n        }\r\n      }\r\n    },\r\n    axisValueOpt(option, maxValue, minValue) {\r\n      if (maxValue > 100000000 || minValue < -100000000) {\r\n        option.name = '亿'\r\n        option.axisLabel.formatter = value => {\r\n          return value / 100000000\r\n        }\r\n      } else if (maxValue > 10000 || minValue < -10000) {\r\n        option.name = '万'\r\n        option.axisLabel.formatter = value => {\r\n          return value / 10000\r\n        }\r\n      }\r\n    },\r\n    axisOpt2(data, series) {\r\n      let str = 'value'\r\n      let type = ''\r\n      let name = []\r\n      let formatter = {}\r\n      if (series && series.length !== 0) {\r\n        let strname = ''\r\n        series.forEach((item, i) => {\r\n          if (i !== series.length - 1) {\r\n            strname = strname + item.name + ' / '\r\n          } else {\r\n            name.push(strname.substring(0, strname.length - 2))\r\n            if (item.data && item.data.length !== 0) {\r\n              const arr = []\r\n              name.push(item.name)\r\n              item.data.forEach(d => {\r\n                if (typeof d === 'string') {\r\n                  type = 'category'\r\n                  formatter = {\r\n                    formatter: '{value} %'\r\n                  }\r\n                  arr.push(parseFloat(d.substring(0, d.length - 1)))\r\n                }\r\n              })\r\n              if (type === 'category') {\r\n                item.data = arr\r\n              }\r\n            }\r\n          }\r\n        })\r\n      }\r\n      return {\r\n        xAxis: {\r\n          show: this.showxAxis,\r\n          type: 'category',\r\n          splitLine: {\r\n            show: this.xSplitLineShow,\r\n            lineStyle: {\r\n              width: 1,\r\n              type: this.splitLineType,\r\n              color: this.axisSplitLineColor\r\n            }\r\n          },\r\n          axisTick: {\r\n            show: this.xAxisLineShow && this.xAxisTickShow\r\n          },\r\n          axisLine: {\r\n            show: this.xAxisLineShow,\r\n            lineStyle: {\r\n              width: 1,\r\n              color: this.axisLineColor\r\n            },\r\n            symbol: ['none', 'none']\r\n          },\r\n          axisLabel: {\r\n            show: this.xAxisLabelShow, //true,\r\n            fontSize: this.axisLabelFontSize,\r\n            color: this.axisLabelColor,\r\n            rotate: this.rotate\r\n          },\r\n          data: data\r\n        },\r\n        yAxis: [\r\n          {\r\n            show: this.showyAxis,\r\n            type: 'value',\r\n            name: name[0],\r\n            splitLine: {\r\n              show: this.ySplitLineShow,\r\n              lineStyle: {\r\n                width: 1,\r\n                type: this.splitLineType,\r\n                color: this.axisSplitLineColor\r\n              }\r\n            },\r\n            axisLabel: {\r\n              show: this.yAxisLabelShow, //true,\r\n              fontSize: this.axisLabelFontSize,\r\n              textStyle: {\r\n                color: this.axisLabelColor\r\n              }\r\n            },\r\n            axisTick: {\r\n              show: this.yAxisLineShow && this.yAxisTickShow\r\n            },\r\n            axisLine: {\r\n              show: this.yAxisLineShow,\r\n              lineStyle: {\r\n                width: 1,\r\n                color: this.axisLineColor\r\n              },\r\n              symbol: this.axisLineSymbol\r\n            }\r\n          },\r\n          {\r\n            show: this.showyAxis,\r\n            type: str,\r\n            name: name[1],\r\n            splitLine: {\r\n              show: false\r\n            },\r\n            axisLabel: {\r\n              show: this.yAxisLabelShow, //true,\r\n              fontSize: this.axisLabelFontSize,\r\n              textStyle: {\r\n                color: this.axisLabelColor\r\n              },\r\n              ...formatter\r\n            },\r\n            axisTick: {\r\n              show: this.yAxisLineShow && this.yAxisTickShow\r\n            },\r\n            axisLine: {\r\n              show: this.yAxisLineShow,\r\n              lineStyle: {\r\n                width: 1,\r\n                color: this.axisLineColor\r\n              },\r\n              symbol: this.axisLineSymbol\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    returnAxisOptions(\r\n      legendData,\r\n      categoryData,\r\n      series,\r\n      maxValue,\r\n      minValue,\r\n      hasyAxis2 = false\r\n    ) {\r\n      let axisOptions = this.axisOpt()\r\n      if (hasyAxis2) {\r\n        axisOptions = this.axisOpt2(categoryData, series)\r\n      }\r\n      let chartOpts = {\r\n        color: this.colors,\r\n        tooltip: {\r\n          ...this.tooltipOpt()\r\n        },\r\n        legend: {\r\n          ...this.legendOpt(),\r\n          show: this.legendShow,\r\n          data: legendData,\r\n          textStyle: {\r\n            color: this.legendTextColor,\r\n            fontSize: this.legendFontSize\r\n          },\r\n          pageTextStyle: {\r\n            color: this.legendPageTextColor\r\n          }\r\n        },\r\n        grid: {\r\n          ...this.gridOpt(),\r\n          containLabel: true\r\n        },\r\n        ...axisOptions,\r\n        series: series\r\n      }\r\n      if (this.xAxisValue) {\r\n        chartOpts.yAxis.data = categoryData\r\n        chartOpts.yAxis.axisLabel.interval = 0\r\n        if (this.labelLimit) {\r\n          chartOpts.yAxis.axisLabel.formatter = name => {\r\n            return echarts.format.truncateText(name, this.labelLimitWidth)\r\n          }\r\n        }\r\n      } else {\r\n        chartOpts.xAxis.data = categoryData\r\n        chartOpts.xAxis.axisLabel.interval = 0\r\n        if (this.labelLimit) {\r\n          chartOpts.xAxis.axisLabel.formatter = name => {\r\n            return echarts.format.truncateText(name, this.labelLimitWidth)\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.axisType === 'log') {\r\n        this.xAxisValue\r\n          ? (chartOpts.xAxis.logBase = this.logBase)\r\n          : (chartOpts.yAxis.logBase = this.logBase)\r\n      }\r\n      // console.log(this.logBase, '=====this.logBase=====')\r\n      // 数值过大，添加相应单位\r\n      if (maxValue > 10000 || minValue < -10000) {\r\n        //添加单位\r\n        if (this.xAxisValue) {\r\n          this.axisValueOpt(chartOpts.xAxis, maxValue, minValue)\r\n        } else {\r\n          if (!hasyAxis2) {\r\n            this.axisValueOpt(chartOpts.yAxis, maxValue, minValue)\r\n          }\r\n        }\r\n      }\r\n      return chartOpts\r\n    }\r\n  }\r\n}\r\n"]}]}