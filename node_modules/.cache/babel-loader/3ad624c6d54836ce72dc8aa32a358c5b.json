{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js!D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\工作项目\\部反诈\\src\\components\\echarts\\pictorialBar\\pictorialBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\components\\echarts\\pictorialBar\\pictorialBar.vue","mtime":1598758386824},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.sort\";\nimport _toConsumableArray from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\n//\n//\n//\n//\n//\n//\nimport storage from \"utils/storage\";\nimport { getMaxValue, getMinValue, getRangeData } from 'constants/utils';\nimport { getNationalPng, getCountryImg } from \"@/constants/country\";\nimport globalChartMixin from 'mixins/globalChartMixin';\nimport gridChartMixin from 'mixins/gridChartMixin';\nimport colorChartMixin from 'mixins/colorChartMixin';\nimport axisChartMixin from 'mixins/axisChartMixin';\nimport tooltipChartMixin from 'mixins/tooltipChartMixin';\nimport ECharts from 'vue-echarts/components/ECharts';\nimport 'echarts/lib/chart/pictorialBar';\nimport 'echarts/lib/chart/bar';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/legend';\nimport 'echarts/lib/component/legendScroll';\nimport 'echarts/lib/component/title';\nimport echarts from 'echarts';\nvar chartColors = storage.get('tColors');\nexport default {\n  name: 'pictorialBar',\n  components: {\n    ECharts: ECharts\n  },\n  mixins: [globalChartMixin, axisChartMixin, gridChartMixin, colorChartMixin, tooltipChartMixin],\n  props: {\n    chartData: {\n      type: Object,\n      default: function _default() {\n        return {\n          seriesName: '图例',\n          seriesData: [51236, 45234, 48243, 23244, 52439, 24328],\n          categoryData: ['1月', '2月', '3月', '4月', '5月', '6月']\n        };\n      }\n    },\n    toolTipType: {\n      type: String,\n      default: 'default'\n    },\n    colors: {\n      type: Array,\n      default: function _default() {\n        return chartColors.pictorialBar.colors;\n      }\n    },\n    size: {\n      type: Array,\n      default: function _default() {\n        return [6, 10];\n      }\n    },\n    bgColors: {\n      type: String,\n      default: chartColors.pictorialBar.batteryBg\n    },\n    hasNational: {\n      type: Boolean,\n      default: false\n    },\n    range: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    labelShow: {\n      type: Boolean,\n      default: false\n    },\n    isClick: {\n      type: Boolean,\n      default: false\n    },\n    isPercent: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      ranges: []\n    };\n  },\n  watch: {\n    chartData: {\n      handler: function handler(newVal, oldVal) {\n        this.refresh();\n      },\n      deep: true\n    },\n    colors: function colors(newVal, oldVal) {\n      this.refresh();\n    },\n    size: function size(newVal, oldVal) {\n      this.refresh();\n    },\n    hasNational: function hasNational(newVal, oldVal) {\n      this.refresh();\n    },\n    range: function range(newVal, oldVal) {\n      this.ranges = newVal;\n      this.refresh();\n    },\n    labelShow: function labelShow(newVal, oldVal) {\n      this.refresh();\n    }\n  },\n  methods: {\n    barClick: function barClick(params) {\n      if (this.isClick) {\n        this.$emit('barClick', params);\n      }\n    },\n    setOptions: function setOptions() {\n      var _this2 = this;\n\n      var _this = this;\n\n      if (!this.chartData.seriesData) return {};\n      if (this.chartData.seriesData.length === 0) return {};\n      if (this.chartData.categoryData.length === 0) return {};\n      if (!this.chartData.categoryData) return {};\n      var _ref = [this.chartData.legendData, this.chartData.seriesData, this.chartData.categoryData],\n          legendData = _ref[0],\n          seriesData = _ref[1],\n          categoryData = _ref[2];\n      var _ref2 = [0, 0, []],\n          maxValue = _ref2[0],\n          symbolSize = _ref2[1];\n      var series = [];\n\n      if (this.xAxisValue) {\n        symbolSize = this.size;\n      } else {\n        symbolSize = [this.size[1], this.size[0]];\n      }\n\n      var originalData = seriesData;\n      var max = getMaxValue(seriesData, 0);\n      var min = getMinValue(seriesData);\n\n      var tempArr = _toConsumableArray(seriesData);\n\n      tempArr.sort(function (a, b) {\n        return a - b;\n      });\n\n      if (tempArr.length > 0) {\n        min = tempArr[0];\n      } // this.range.length !== 0 ?  this.ranges = this.range : this.ranges = [min, max]\n\n\n      if (this.range.length !== 0 && seriesData.length !== 1) {\n        this.ranges = this.range;\n        seriesData = getRangeData(seriesData, [min, max], this.ranges);\n      }\n\n      maxValue = getMaxValue(seriesData, maxValue);\n      var data = [];\n      var data2 = [];\n      seriesData.forEach(function (item, index) {\n        data.push({\n          value: item,\n          itemStyle: {\n            normal: {\n              color: _this2.colors[index]\n            }\n          }\n        });\n        data2.push({\n          value: item\n        });\n      });\n      series.push({\n        name: this.chartData.seriesName,\n        type: 'pictorialBar',\n        symbol: 'rect',\n        symbolRepeat: 'fixed',\n        symbolMargin: '20%',\n        symbolClip: true,\n        symbolSize: symbolSize,\n        symbolBoundingData: maxValue,\n        data: data,\n        label: {\n          show: this.labelShow,\n          position: 'right',\n          formatter: function formatter(params) {\n            if (_this.isPercent) {\n              return params.value + '%';\n            }\n\n            return params.value;\n          }\n        },\n        z: 9999999,\n        animationEasing: 'elasticOut',\n        animationDelay: function animationDelay(dataIndex, params) {\n          return params.index * 30;\n        }\n      }, {\n        // full data\n        type: 'pictorialBar',\n        itemStyle: {\n          normal: {\n            color: this.bgColors\n          }\n        },\n        animationDuration: 0,\n        symbolRepeat: 'fixed',\n        symbolMargin: '20%',\n        symbol: 'rect',\n        symbolSize: symbolSize,\n        symbolBoundingData: maxValue,\n        data: data2,\n        z: 9999,\n        animationEasing: 'elasticOut',\n        animationDelay: function animationDelay(dataIndex, params) {\n          return params.index * 30;\n        }\n      });\n      var axisOptions = this.axisOpt();\n\n      var tooltipFormatter = function tooltipFormatter(params) {\n        // console.log(params, '===formatter params')\n        var obj = params[0];\n        var str = ''; // console.log('originalData:', originalData, this.chartData)\n\n        originalData.forEach(function (item, i) {\n          if (obj.dataIndex === i) {\n            // console.log(i, obj.dataIndex)\n            str = obj.name + '<br/>' + obj.seriesName + ': ' + item + (_this.isPercent ? '%' : '');\n          }\n        });\n        return str;\n      };\n\n      if (this.toolTipType === 'attackSource') {\n        tooltipFormatter = function tooltipFormatter(params) {\n          // console.log(params, '===formatter params')\n          var obj = params[0];\n          var str = ''; // console.log('originalData:', originalData, this.chartData)\n\n          originalData.forEach(function (item, i) {\n            if (obj.dataIndex === i) {\n              console.log('obj.name:', obj.name);\n              str = obj.name + '(' + obj.seriesName + '：' + item + ')';\n              var tipItemMap = _this2.chartData.tip[obj.name];\n              var addTipStr = \"\";\n              addTipStr += \"<br/>\" + '威胁标签：' + tipItemMap['eventType'];\n              addTipStr += \"<br/>\" + '攻击省份：' + tipItemMap['attackedProvince'];\n              str += addTipStr;\n            }\n          });\n          return str;\n        };\n      }\n\n      var barOpt = _objectSpread({\n        color: this.colors,\n        tooltip: _objectSpread({\n          show: this.tooltipShow\n        }, this.tooltipOpt(), {\n          formatter: tooltipFormatter\n        }),\n        legend: _objectSpread({}, this.legendOpt(), {\n          show: this.legendShow,\n          data: legendData,\n          textStyle: {\n            color: this.legendTextColor\n          },\n          pageTextStyle: {\n            color: this.legendPageTextColor\n          }\n        }),\n        grid: _objectSpread({}, this.gridOpt(), {\n          containLabel: true\n        })\n      }, axisOptions, {\n        series: series\n      });\n\n      if (this.xAxisValue) {\n        barOpt.yAxis.data = categoryData;\n        barOpt.yAxis.axisLabel.interval = 0;\n\n        if (this.labelLimit) {\n          // barOpt.yAxis.axisLabel.align = 'left'\n          // barOpt.yAxis.offset = this.labelLimitWidth\n          barOpt.yAxis.axisLabel.formatter = function (name) {\n            return echarts.format.truncateText(name, _this2.labelLimitWidth);\n          };\n        }\n      } else {\n        barOpt.xAxis.data = categoryData;\n        barOpt.xAxis.axisLabel.interval = 0;\n\n        if (this.labelLimit) {\n          barOpt.xAxis.axisLabel.formatter = function (name) {\n            return echarts.format.truncateText(name, _this2.labelLimitWidth);\n          };\n        }\n      } // 数值过大，添加相应单位\n\n\n      if (max > 10000 || min < -10000) {\n        //添加单位\n        if (this.xAxisValue) {\n          this.axisValueOpt(barOpt.xAxis, max, min);\n        } else {\n          this.axisValueOpt(barOpt.yAxis, max, min);\n        }\n      }\n\n      if (this.hasNational) {\n        barOpt = this.countryLabelFormatter(barOpt);\n      }\n\n      return barOpt; // return barOpt\n    },\n    countryLabelFormatter: function countryLabelFormatter(barOpt) {\n      var _this = this;\n\n      var label = this.xAxisValue ? 'yAxis' : 'xAxis';\n      barOpt[label].axisLabel.padding = [0, 0, 0, 12]; // barOpt[label].axisLabel.align = 'justify'\n\n      barOpt[label].axisLabel.formatter = function (val, index) {\n        if (_this.hasNational) {\n          var str = val;\n          var name = getNationalPng(val); // if(val.length === 2) {\n          //   str = str.slice(0, 1) + '\\t\\t\\t' + str.slice(1)\n          // }\n          // return '{' + name + '| }' + '  ' + '{value|' + str + '}'\n\n          return '{value|' + str + '}' + '  ' + '{' + name + '| }';\n        } else {\n          return val;\n        }\n      };\n\n      barOpt[label].axisLabel.rich = _objectSpread({\n        value: {\n          lineHeight: 30\n        }\n      }, getCountryImg());\n      return barOpt;\n    }\n  }\n};",{"version":3,"sources":["pictorialBar.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"pictorialBar full-block\">\r\n    <ECharts :options=\"options\" :autoresize=\"true\" @click=\"barClick\"></ECharts>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport storage from \"utils/storage\"\r\nimport { getMaxValue, getMinValue, getRangeData } from 'constants/utils'\r\nimport { getNationalPng, getCountryImg } from \"@/constants/country\"\r\nimport globalChartMixin from 'mixins/globalChartMixin'\r\nimport gridChartMixin from 'mixins/gridChartMixin'\r\nimport colorChartMixin from 'mixins/colorChartMixin'\r\nimport axisChartMixin from 'mixins/axisChartMixin'\r\nimport tooltipChartMixin from 'mixins/tooltipChartMixin'\r\nimport ECharts from 'vue-echarts/components/ECharts'\r\nimport 'echarts/lib/chart/pictorialBar'\r\nimport 'echarts/lib/chart/bar'\r\nimport 'echarts/lib/component/tooltip'\r\nimport 'echarts/lib/component/legend'\r\nimport 'echarts/lib/component/legendScroll'\r\nimport 'echarts/lib/component/title'\r\nimport echarts from 'echarts'\r\nconst chartColors = storage.get('tColors')\r\nexport default {\r\n  name: 'pictorialBar',\r\n  components: {\r\n    ECharts\r\n  },\r\n  mixins: [ globalChartMixin, axisChartMixin, gridChartMixin, colorChartMixin, tooltipChartMixin ],\r\n  props: {\r\n    chartData: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          seriesName: '图例',\r\n          seriesData: [51236, 45234, 48243, 23244, 52439, 24328],\r\n          categoryData: ['1月', '2月', '3月', '4月', '5月', '6月']\r\n        }\r\n      }\r\n    },\r\n    toolTipType: {\r\n      type: String,\r\n      default: 'default'\r\n    },\r\n    colors: {\r\n      type: Array,\r\n      default: () => chartColors.pictorialBar.colors\r\n    },\r\n    size: {\r\n      type: Array,\r\n      default: () => [6, 10]\r\n    },\r\n    bgColors: {\r\n      type: String,\r\n      default: chartColors.pictorialBar.batteryBg\r\n    },\r\n    hasNational: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    range: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    labelShow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    isClick: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    isPercent: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      ranges: []\r\n    }\r\n  },\r\n  watch: {\r\n    chartData: {\r\n      handler(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      deep: true\r\n    },\r\n    colors(newVal, oldVal) {\r\n      this.refresh()\r\n    },\r\n    size(newVal, oldVal) {\r\n      this.refresh()\r\n    },\r\n    hasNational(newVal, oldVal) {\r\n      this.refresh()\r\n    },\r\n    range(newVal, oldVal) {\r\n      this.ranges = newVal\r\n      this.refresh()\r\n    },\r\n    labelShow(newVal, oldVal) {\r\n      this.refresh()\r\n    }\r\n  },\r\n  methods: {\r\n    barClick(params) {\r\n      if(this.isClick) {\r\n        this.$emit('barClick', params)\r\n      }\r\n    },\r\n    setOptions() {\r\n      const _this = this\r\n      if (!this.chartData.seriesData) return  {}\r\n      if(this.chartData.seriesData.length === 0) return {}\r\n      if(this.chartData.categoryData.length === 0) return {}\r\n      if(!this.chartData.categoryData) return {}\r\n      let [ legendData, seriesData, categoryData ] = [ this.chartData.legendData, this.chartData.seriesData, this.chartData.categoryData ]\r\n      let [ maxValue, symbolSize ] = [ 0, 0, [] ]\r\n      let series = []\r\n      if(this.xAxisValue) {\r\n        symbolSize = this.size\r\n      } else {\r\n        symbolSize = [this.size[1], this.size[0]]\r\n      }\r\n      let originalData = seriesData\r\n      let max = getMaxValue(seriesData, 0)\r\n      let min = getMinValue(seriesData)\r\n      let tempArr = [...seriesData]\r\n      tempArr.sort((a, b) => a - b)\r\n      if (tempArr.length > 0) {\r\n        min = tempArr[0]\r\n      }\r\n      // this.range.length !== 0 ?  this.ranges = this.range : this.ranges = [min, max]\r\n      if(this.range.length !== 0 && seriesData.length !== 1) {\r\n        this.ranges = this.range\r\n        seriesData = getRangeData(seriesData, [min, max], this.ranges)\r\n      }\r\n      maxValue = getMaxValue(seriesData, maxValue)\r\n      const data = []\r\n      const data2 = []\r\n      seriesData.forEach((item, index) => {\r\n        data.push({\r\n          value: item,\r\n          itemStyle: {\r\n            normal: {\r\n              color: this.colors[index]\r\n            }\r\n          }\r\n        })\r\n        data2.push({\r\n          value: item\r\n        })\r\n      })\r\n      series.push({\r\n        name: this.chartData.seriesName,\r\n        type: 'pictorialBar',\r\n        symbol: 'rect',\r\n        symbolRepeat: 'fixed',\r\n        symbolMargin: '20%',\r\n        symbolClip: true,\r\n        symbolSize: symbolSize,\r\n        symbolBoundingData: maxValue,\r\n        data: data,\r\n        label: {\r\n          show: this.labelShow,\r\n          position: 'right',\r\n          formatter: function(params) {\r\n            if(_this.isPercent) {\r\n              return params.value + '%'\r\n            }\r\n            return params.value\r\n          }\r\n        },\r\n        z: 9999999,\r\n        animationEasing: 'elasticOut',\r\n        animationDelay: function(dataIndex, params) {\r\n            return params.index * 30\r\n        }\r\n      }, {\r\n        // full data\r\n        type: 'pictorialBar',\r\n        itemStyle: {\r\n          normal: {\r\n            color: this.bgColors\r\n          }\r\n        },\r\n        animationDuration: 0,\r\n        symbolRepeat: 'fixed',\r\n        symbolMargin: '20%',\r\n        symbol: 'rect',\r\n        symbolSize: symbolSize,\r\n        symbolBoundingData: maxValue,\r\n        data: data2,\r\n        z: 9999,\r\n        animationEasing: 'elasticOut',\r\n        animationDelay: function(dataIndex, params) {\r\n            return params.index * 30\r\n        }\r\n      }\r\n      )\r\n      let axisOptions = this.axisOpt()\r\n      let tooltipFormatter = (params) => {\r\n        // console.log(params, '===formatter params')\r\n        let obj = params[0]\r\n        let str = ''\r\n        // console.log('originalData:', originalData, this.chartData)\r\n        originalData.forEach((item, i) => {\r\n          if(obj.dataIndex === i) {\r\n            // console.log(i, obj.dataIndex)\r\n            str = obj.name + '<br/>' + obj.seriesName + ': ' + item + (_this.isPercent ? '%' : '')\r\n          }\r\n        })\r\n        return str\r\n      }\r\n      if (this.toolTipType === 'attackSource') {\r\n        tooltipFormatter = (params) => {\r\n          // console.log(params, '===formatter params')\r\n          let obj = params[0]\r\n          let str = ''\r\n          // console.log('originalData:', originalData, this.chartData)\r\n          originalData.forEach((item, i) => {\r\n            if(obj.dataIndex === i) {\r\n              console.log('obj.name:', obj.name)\r\n\r\n              str = obj.name + '(' + obj.seriesName + '：' + item + ')'\r\n              \r\n              let tipItemMap = this.chartData.tip[obj.name]\r\n              let addTipStr = \"\"\r\n              addTipStr += \"<br/>\" + '威胁标签：' + tipItemMap['eventType']\r\n              addTipStr += \"<br/>\" + '攻击省份：' + tipItemMap['attackedProvince']\r\n\r\n              str += addTipStr\r\n            }\r\n          })\r\n          return str\r\n        }\r\n      }\r\n      let barOpt = {\r\n        color: this.colors,\r\n        tooltip: {\r\n          show: this.tooltipShow,\r\n          ...this.tooltipOpt(),\r\n          formatter: tooltipFormatter\r\n        },\r\n        legend: {\r\n          ...this.legendOpt(),\r\n          show: this.legendShow,\r\n          data: legendData,\r\n          textStyle: {\r\n            color: this.legendTextColor\r\n          },\r\n          pageTextStyle: {\r\n            color: this.legendPageTextColor\r\n          }\r\n        },\r\n        grid: {\r\n          ...this.gridOpt(),\r\n          containLabel: true\r\n        },\r\n        ...axisOptions,\r\n        series: series\r\n      }\r\n      if (this.xAxisValue) {\r\n        barOpt.yAxis.data = categoryData\r\n        barOpt.yAxis.axisLabel.interval = 0\r\n        if (this.labelLimit) {\r\n          // barOpt.yAxis.axisLabel.align = 'left'\r\n          // barOpt.yAxis.offset = this.labelLimitWidth\r\n          barOpt.yAxis.axisLabel.formatter = name => {\r\n            return echarts.format.truncateText(name, this.labelLimitWidth)\r\n          }\r\n        }\r\n      } else {\r\n        barOpt.xAxis.data = categoryData\r\n        barOpt.xAxis.axisLabel.interval = 0\r\n        if (this.labelLimit) {\r\n          barOpt.xAxis.axisLabel.formatter = name => {\r\n            return echarts.format.truncateText(name, this.labelLimitWidth)\r\n          }\r\n        }\r\n      }\r\n      // 数值过大，添加相应单位\r\n      if (max > 10000 || min < -10000) {\r\n        //添加单位\r\n        if (this.xAxisValue) {\r\n          this.axisValueOpt(barOpt.xAxis, max, min)\r\n        } else {\r\n          this.axisValueOpt(barOpt.yAxis, max, min)\r\n        }\r\n      }\r\n      if(this.hasNational) {\r\n        barOpt = this.countryLabelFormatter(barOpt)\r\n      }\r\n      return barOpt\r\n      // return barOpt\r\n    },\r\n    countryLabelFormatter(barOpt) {\r\n      const _this = this\r\n      const label = this.xAxisValue ? 'yAxis' : 'xAxis'\r\n      barOpt[label].axisLabel.padding = [0, 0, 0, 12]\r\n      // barOpt[label].axisLabel.align = 'justify'\r\n      barOpt[label].axisLabel.formatter = function(val, index) {\r\n        if(_this.hasNational) {\r\n          let str = val\r\n          let name = getNationalPng(val)\r\n          // if(val.length === 2) {\r\n          //   str = str.slice(0, 1) + '\\t\\t\\t' + str.slice(1)\r\n          // }\r\n          // return '{' + name + '| }' + '  ' + '{value|' + str + '}'\r\n          return '{value|' + str + '}' + '  ' + '{' + name + '| }'\r\n        } else {\r\n          return val\r\n        }\r\n      }\r\n      barOpt[label].axisLabel.rich = {\r\n        value: {\r\n          lineHeight: 30\r\n        },\r\n        ...getCountryImg()\r\n      }\r\n      return barOpt\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"sourceRoot":"src/components/echarts/pictorialBar"}]}