{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js!D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\工作项目\\部反诈\\src\\utils\\util.js","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\utils\\util.js","mtime":1598758375149},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _typeof from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/typeof\";\nimport _objectSpread from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport _Date$now from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/date/now\";\nimport _Promise from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport { Message } from 'element-ui';\nexport function title(title) {\n  title = title || '****系统';\n  window.document.title = title;\n}\n/**\r\n * async/await catch 错误\r\n * @param {Promise} promise\r\n * @param {String} errTxt\r\n * @return {Promise}\r\n */\n\nexport function asyncTo(promise, errTxt) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).catch(function (err) {\n    err = errTxt || '请求失败';\n    return [err, undefined];\n  });\n}\n/**\r\n * 睡眠函数\r\n * @param {number} time\r\n */\n\nexport var sleep = function sleep(time) {\n  return new _Promise(function (resolve) {\n    return setTimeout(resolve, time);\n  });\n};\nexport function simpleAsyncTo(promise, errTxt) {\n  return promise.then(function (data) {\n    // 如果没有\n    if (data.isNormal === true) {\n      return data;\n    } else {\n      errCb(data.returnModel || errTxt);\n      return null;\n    }\n  }).catch(function (err) {\n    process.env.NODE_ENV === 'development' && console.error(err);\n    errCb('请求失败');\n    return null;\n  });\n}\n/**\r\n * 处理报错\r\n * @param {string} msg\r\n */\n\nexport var errCb = function errCb(msg) {\n  process.env.NODE_ENV === 'development' && console.error(msg);\n  Message.error({\n    showClose: true,\n    message: msg\n  });\n}; // 防抖函数\n// 当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时\n\nexport function debounce(fn) {\n  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n  var timer = null;\n  return function () {\n    var _arguments = arguments;\n\n    if (timer !== null) {\n      clearTimeout(timer);\n    }\n\n    var context = this;\n    timer = setTimeout(function (_) {\n      fn.apply(context, _arguments);\n    }, delay);\n  };\n} // 节流函数：当持续触发事件时，保证一定时间段内只调用一次事件处理函数\n\nexport function throttle(fn) {\n  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n  var timer = null;\n\n  var start = _Date$now();\n\n  return function () {\n    var _arguments2 = arguments;\n\n    var cur = _Date$now();\n\n    var wait = delay - (cur - start);\n    var context = this;\n    clearTimeout(timer);\n\n    if (wait <= 0) {\n      fn.aplly(context, arguments);\n      start = _Date$now();\n    } else {\n      timer = setTimeout(function (_) {\n        fn.apply(context, _arguments2);\n      }, delay);\n    }\n  };\n}\n/**\r\n * 获取椭圆上的点，亦可获取圆上的点，圆上的点弧长是等分的，椭圆的点不是等分的\r\n * @param {Number} rx x轴半径\r\n * @param {Number} ry y轴半径\r\n * @param {Number} cx 圆心x\r\n * @param {Number} cy 圆心y\r\n * @param {Number} count 等分的数量\r\n * @param {Object} options\r\n * counterclockwise: true 返回的数据是顺时针还是逆时针 true 逆时针\r\n * startAngle: 0 起始角度，从正下方开始计算\r\n */\n\nexport function getEllipsePoints(rx, ry, cx, cy, count, options) {\n  options = _objectSpread({\n    startAngle: 0,\n    counterclockwise: true\n  }, options);\n  var radian = Math.PI / 180,\n      radians = radian * Math.round(360 / count),\n      _options = options,\n      counterclockwise = _options.counterclockwise,\n      startAngle = _options.startAngle,\n      startRadians = !counterclockwise ? -(radian * startAngle - radians) : radian * startAngle,\n      points = [];\n\n  for (var i = 0; i < count; i++) {\n    var x = cx + rx * Math.sin(radians * i + startRadians),\n        y = cy + ry * Math.cos(radians * i + startRadians);\n\n    if (!counterclockwise) {\n      points.unshift({\n        x: x,\n        y: y\n      }); // 顺时针\n    } else {\n      points.push({\n        x: x,\n        y: y\n      }); // 逆时针\n    }\n  }\n\n  return points;\n}\nexport function getCircleDividePoints(radius, cx, cy, count) {\n  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  return getEllipsePoints(radius, radius, cx, cy, count, options);\n}\n\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n/**\r\n * 计算椭圆上N个等分点的坐标\r\n * @param {Number} radius 半径\r\n * @param {Number} cx 圆心x\r\n * @param {Number} cy 圆心y\r\n * @param {Number} count 等分的数量\r\n * @param {Object} options\r\n * counterclockwise: true 返回的数据是顺时针还是逆时针 true为逆时针\r\n * startAngle: 0 起始角度，从正下方开始计算\r\n * precision：0.001 精度，值越小算出来等分点的长度越接近，但也会消耗更多的性能\r\n */\n\n\nexport function getEllipseDividePoints(rx, ry, cx, cy, count, options) {\n  options = _objectSpread({\n    precision: 0.001,\n    // 值越小算出来等分点的长度越接近，但也会消耗更多的性能\n    counterclockwise: true,\n    startAngle: 0\n  }, options);\n  var q = rx + ry,\n      h = Math.pow((rx - ry) / (rx + ry), 2),\n      m = 22 / (7 * Math.PI) - 1,\n      n = Math.pow((rx - ry) / rx, 33.697),\n      l = Math.PI * q * (1 + 3 * h / (10 + Math.sqrt(4 - 3 * h))) * (1 + m * n),\n      points = [],\n      onelength = l / count,\n      radian = Math.PI / 180,\n      _options2 = options,\n      precision = _options2.precision,\n      counterclockwise = _options2.counterclockwise,\n      startAngle = _options2.startAngle,\n      startRadians = !counterclockwise ? -radian * startAngle : radian * startAngle;\n  var angle = 0,\n      x0 = rx,\n      y0 = 0;\n\n  for (var i = 0; i < count; i++) {\n    var dist = 0,\n        x = 0,\n        y = 0;\n\n    while (dist < onelength) {\n      angle += precision;\n      x = rx * Math.sin(radian * angle + startRadians);\n      y = ry * Math.cos(radian * angle + startRadians);\n      dist += distance(x0, y0, x, y);\n      x0 = x;\n      y0 = y;\n    }\n\n    var p = {\n      x: x + cx,\n      y: y + cy\n    };\n\n    if (!counterclockwise) {\n      points.unshift(p); // 顺时针\n    } else {\n      points.push(p); // 逆时针\n    }\n  }\n\n  if (!counterclockwise) {\n    points.unshift(points.pop());\n  }\n\n  return points;\n}\nexport function deepClone(source) {\n  if (!source && _typeof(source) !== 'object') {\n    throw new Error('error arguments', 'shallowClone');\n  }\n\n  var targetObj = source.constructor === Array ? [] : {};\n\n  for (var keys in source) {\n    if (source.hasOwnProperty(keys)) {\n      if (source[keys] && _typeof(source[keys]) === 'object') {\n        targetObj[keys] = source[keys].constructor === Array ? [] : {};\n        targetObj[keys] = deepClone(source[keys]);\n      } else {\n        targetObj[keys] = source[keys];\n      }\n    }\n  }\n\n  return targetObj;\n} //千位分隔符-仅限于整数\n\nexport function insertSeparator(num) {\n  var number = Number(num);\n  var reg = /\\d{1,3}(?=(\\d{3})+$)/g;\n  return (number + '').replace(reg, '$&,');\n}",{"version":3,"sources":["D:\\工作项目\\部反诈\\src\\utils\\util.js"],"names":["Message","title","window","document","asyncTo","promise","errTxt","then","data","catch","err","undefined","sleep","time","resolve","setTimeout","simpleAsyncTo","isNormal","errCb","returnModel","process","env","NODE_ENV","console","error","msg","showClose","message","debounce","fn","delay","timer","clearTimeout","context","_","apply","arguments","throttle","start","cur","wait","aplly","getEllipsePoints","rx","ry","cx","cy","count","options","startAngle","counterclockwise","radian","Math","PI","radians","round","startRadians","points","i","x","sin","y","cos","unshift","push","getCircleDividePoints","radius","distance","x1","y1","x2","y2","sqrt","getEllipseDividePoints","precision","q","h","m","n","pow","l","onelength","angle","x0","y0","dist","p","pop","deepClone","source","Error","targetObj","constructor","Array","keys","hasOwnProperty","insertSeparator","num","number","Number","reg","replace"],"mappings":"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","sourcesContent":["import { Message } from 'element-ui'\r\n\r\nexport function title(title) {\r\n  title = title || '****系统'\r\n  window.document.title = title\r\n}\r\n/**\r\n * async/await catch 错误\r\n * @param {Promise} promise\r\n * @param {String} errTxt\r\n * @return {Promise}\r\n */\r\nexport function asyncTo(promise, errTxt) {\r\n  return promise\r\n    .then(data => [null, data])\r\n    .catch(err => {\r\n      err = errTxt || '请求失败'\r\n      return [err, undefined]\r\n    })\r\n}\r\n/**\r\n * 睡眠函数\r\n * @param {number} time\r\n */\r\nexport const sleep = time => new Promise(resolve => setTimeout(resolve, time))\r\n\r\nexport function simpleAsyncTo(promise, errTxt) {\r\n  return promise\r\n    .then(data => {\r\n      // 如果没有\r\n      if (data.isNormal === true) {\r\n        return data\r\n      } else {\r\n        errCb(data.returnModel || errTxt)\r\n        return null\r\n      }\r\n    })\r\n    .catch(err => {\r\n      process.env.NODE_ENV === 'development' && console.error(err)\r\n      errCb('请求失败')\r\n      return null\r\n    })\r\n}\r\n\r\n/**\r\n * 处理报错\r\n * @param {string} msg\r\n */\r\nexport const errCb = msg => {\r\n  process.env.NODE_ENV === 'development' && console.error(msg)\r\n  Message.error({\r\n    showClose: true,\r\n    message: msg\r\n  })\r\n}\r\n\r\n// 防抖函数\r\n// 当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时\r\nexport function debounce(fn, delay = 1000) {\r\n  let timer = null\r\n  return function() {\r\n    if (timer !== null) {\r\n      clearTimeout(timer)\r\n    }\r\n    const context = this\r\n    timer = setTimeout(_ => {\r\n      fn.apply(context, arguments)\r\n    }, delay)\r\n  }\r\n}\r\n\r\n// 节流函数：当持续触发事件时，保证一定时间段内只调用一次事件处理函数\r\nexport function throttle(fn, delay = 1000) {\r\n  let timer = null\r\n  let start = Date.now()\r\n  return function() {\r\n    const cur = Date.now()\r\n    const wait = delay - (cur - start)\r\n    const context = this\r\n    clearTimeout(timer)\r\n    if (wait <= 0) {\r\n      fn.aplly(context, arguments)\r\n      start = Date.now()\r\n    } else {\r\n      timer = setTimeout(_ => {\r\n        fn.apply(context, arguments)\r\n      }, delay)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 获取椭圆上的点，亦可获取圆上的点，圆上的点弧长是等分的，椭圆的点不是等分的\r\n * @param {Number} rx x轴半径\r\n * @param {Number} ry y轴半径\r\n * @param {Number} cx 圆心x\r\n * @param {Number} cy 圆心y\r\n * @param {Number} count 等分的数量\r\n * @param {Object} options\r\n * counterclockwise: true 返回的数据是顺时针还是逆时针 true 逆时针\r\n * startAngle: 0 起始角度，从正下方开始计算\r\n */\r\nexport function getEllipsePoints(rx, ry, cx, cy, count, options) {\r\n  options = {\r\n    startAngle: 0,\r\n    counterclockwise: true,\r\n    ...options\r\n  }\r\n\r\n  const radian = Math.PI / 180,\r\n    radians = radian * Math.round(360 / count), // 弧度\r\n    { counterclockwise, startAngle } = options,\r\n    startRadians = !counterclockwise\r\n      ? -(radian * startAngle - radians)\r\n      : radian * startAngle,\r\n    points = []\r\n  for (let i = 0; i < count; i++) {\r\n    const x = cx + rx * Math.sin(radians * i + startRadians),\r\n      y = cy + ry * Math.cos(radians * i + startRadians)\r\n    if (!counterclockwise) {\r\n      points.unshift({ x, y }) // 顺时针\r\n    } else {\r\n      points.push({ x, y }) // 逆时针\r\n    }\r\n  }\r\n  return points\r\n}\r\n\r\nexport function getCircleDividePoints(radius, cx, cy, count, options = {}) {\r\n  return getEllipsePoints(radius, radius, cx, cy, count, options)\r\n}\r\n\r\nfunction distance(x1, y1, x2, y2) {\r\n  return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\r\n}\r\n/**\r\n * 计算椭圆上N个等分点的坐标\r\n * @param {Number} radius 半径\r\n * @param {Number} cx 圆心x\r\n * @param {Number} cy 圆心y\r\n * @param {Number} count 等分的数量\r\n * @param {Object} options\r\n * counterclockwise: true 返回的数据是顺时针还是逆时针 true为逆时针\r\n * startAngle: 0 起始角度，从正下方开始计算\r\n * precision：0.001 精度，值越小算出来等分点的长度越接近，但也会消耗更多的性能\r\n */\r\nexport function getEllipseDividePoints(rx, ry, cx, cy, count, options) {\r\n  options = {\r\n    precision: 0.001, // 值越小算出来等分点的长度越接近，但也会消耗更多的性能\r\n    counterclockwise: true,\r\n    startAngle: 0,\r\n    ...options\r\n  }\r\n  const q = rx + ry,\r\n    h = ((rx - ry) / (rx + ry)) ** 2,\r\n    m = 22 / (7 * Math.PI) - 1,\r\n    n = Math.pow((rx - ry) / rx, 33.697),\r\n    // 椭圆周长\r\n    l = Math.PI * q * (1 + (3 * h) / (10 + Math.sqrt(4 - 3 * h))) * (1 + m * n),\r\n    points = [],\r\n    onelength = l / count,\r\n    radian = Math.PI / 180,\r\n    { precision, counterclockwise, startAngle } = options,\r\n    startRadians = !counterclockwise\r\n      ? -radian * startAngle\r\n      : radian * startAngle\r\n\r\n  let angle = 0,\r\n    x0 = rx,\r\n    y0 = 0\r\n  for (let i = 0; i < count; i++) {\r\n    let dist = 0,\r\n      x = 0,\r\n      y = 0\r\n    while (dist < onelength) {\r\n      angle += precision\r\n      x = rx * Math.sin(radian * angle + startRadians)\r\n      y = ry * Math.cos(radian * angle + startRadians)\r\n      dist += distance(x0, y0, x, y)\r\n      x0 = x\r\n      y0 = y\r\n    }\r\n    const p = { x: x + cx, y: y + cy }\r\n    if (!counterclockwise) {\r\n      points.unshift(p) // 顺时针\r\n    } else {\r\n      points.push(p) // 逆时针\r\n    }\r\n  }\r\n  if (!counterclockwise) {\r\n    points.unshift(points.pop())\r\n  }\r\n  return points\r\n}\r\n\r\nexport function deepClone(source) {\r\n  if (!source && typeof source !== 'object') {\r\n    throw new Error('error arguments', 'shallowClone')\r\n  }\r\n  const targetObj = source.constructor === Array ? [] : {}\r\n  for (let keys in source) {\r\n    if (source.hasOwnProperty(keys)) {\r\n      if (source[keys] && typeof source[keys] === 'object') {\r\n        targetObj[keys] = source[keys].constructor === Array ? [] : {}\r\n        targetObj[keys] = deepClone(source[keys])\r\n      } else {\r\n        targetObj[keys] = source[keys]\r\n      }\r\n    }\r\n  }\r\n  return targetObj\r\n}\r\n\r\n//千位分隔符-仅限于整数\r\nexport function insertSeparator(num) {\r\n  const number = Number(num)\r\n  const reg = /\\d{1,3}(?=(\\d{3})+$)/g\r\n  return (number + '').replace(reg, '$&,')\r\n}\r\n"]}]}