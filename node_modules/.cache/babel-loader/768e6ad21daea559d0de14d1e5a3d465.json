{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js!D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\工作项目\\部反诈\\src\\mixins\\tooltipChartMixin.js","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\mixins\\tooltipChartMixin.js","mtime":1598758386942},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Object$keys from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport _objectSpread from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nexport default {\n  props: {\n    trigger: {\n      type: String,\n      default: 'axis'\n    },\n    axisPointerType: {\n      type: String,\n      default: 'shadow'\n    },\n    customFormatter: {\n      type: Boolean,\n      default: false\n    },\n    tooltipShow: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      chartName: '注意：没有给图表制定名称，请及时补充图表名称.........',\n      options: {}\n    };\n  },\n  created: function created() {// console.log(`准备构建图表组件${this.chartName}`)\n  },\n  mounted: function mounted() {\n    this.refresh();\n  },\n  watch: {\n    trigger: function trigger(newVal, oldVal) {\n      // console.log(`${this.chartName}trigger[新值:${newVal};旧值:${oldVal}]`)\n      this.refresh();\n    },\n    axisPointerType: function axisPointerType(newVal, oldVal) {\n      // console.log(`${this.chartName}axisPointerType[新值:${newVal};旧值:${oldVal}]`)\n      this.refresh();\n    },\n    customFormatter: function customFormatter(newVal, oldVal) {\n      // console.log(`${this.chartName}customFormatter[新值:${newVal};旧值:${oldVal}]`)\n      this.refresh();\n    },\n    tooltipShow: function tooltipShow(newVal, oldVal) {\n      // console.log(`${this.chartName}customFormatter[新值:${newVal};旧值:${oldVal}]`)\n      this.refresh();\n    }\n  },\n  methods: {\n    refresh: function refresh() {\n      this.options = this.setOptions();\n\n      if (this.refreshCallback) {\n        this.refreshCallback();\n      }\n    },\n    tooltipOpt: function tooltipOpt(opt) {\n      var _ref = [this.trigger, this.axisPointerType, this.customFormatter],\n          trigger = _ref[0],\n          axisPointerType = _ref[1],\n          customFormatter = _ref[2];\n      return _objectSpread({\n        trigger: trigger,\n        axisPointer: {\n          type: axisPointerType\n        },\n        formatter: function formatter(params) {\n          if (customFormatter) {\n            return this.getFormatterStr(params);\n          } else {\n            var name = params[0].name;\n            var str = '';\n            params.forEach(function (item, i) {\n              if (item.seriesName !== '阴影') {\n                str += item.seriesName + ' : ' + item.value + '<br />';\n              }\n            });\n            return \"\".concat(name, \"<br /> \").concat(str);\n          }\n        }\n      }, opt);\n    },\n    getFormatterStr: function getFormatterStr(params) {\n      return 'aaaaaaaaaaa';\n    },\n    createTplCode: function createTplCode(zjNm, imNm) {\n      var propsKeys = _Object$keys(this._props).map(function (_) {\n        return \":\".concat(_, \"=\\\"chartParams.\").concat(_, \"\\\"\");\n      }); // console.log(`<${zjNm}  ${propsKeys.join(' ')}></${zjNm}>`)\n\n    }\n  }\n};",{"version":3,"sources":["D:\\工作项目\\部反诈\\src\\mixins\\tooltipChartMixin.js"],"names":["props","trigger","type","String","default","axisPointerType","customFormatter","Boolean","tooltipShow","data","chartName","options","created","mounted","refresh","watch","newVal","oldVal","methods","setOptions","refreshCallback","tooltipOpt","opt","axisPointer","formatter","params","getFormatterStr","name","str","forEach","item","i","seriesName","value","createTplCode","zjNm","imNm","propsKeys","_props","map","_"],"mappings":"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","sourcesContent":["\r\nexport default {\r\n  props: {\r\n    trigger: {\r\n      type: String,\r\n      default: 'axis'\r\n    },\r\n    axisPointerType: {\r\n      type: String,\r\n      default: 'shadow'\r\n    },\r\n    customFormatter: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    tooltipShow: {\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      chartName: '注意：没有给图表制定名称，请及时补充图表名称.........',\r\n      options: {}\r\n    }\r\n  },\r\n  created() {\r\n    // console.log(`准备构建图表组件${this.chartName}`)\r\n  },\r\n  mounted() {\r\n    this.refresh()\r\n  },\r\n  watch: {\r\n    trigger(newVal, oldVal) {\r\n      // console.log(`${this.chartName}trigger[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    axisPointerType(newVal, oldVal) {\r\n      // console.log(`${this.chartName}axisPointerType[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    customFormatter(newVal, oldVal) {\r\n      // console.log(`${this.chartName}customFormatter[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    tooltipShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}customFormatter[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    }\r\n  },\r\n  methods: {\r\n    refresh() {\r\n      this.options = this.setOptions()\r\n      if (this.refreshCallback) {\r\n        this.refreshCallback()\r\n      }\r\n    },\r\n    tooltipOpt(opt) {\r\n      let [trigger, axisPointerType, customFormatter] = [this.trigger, this.axisPointerType, this.customFormatter]\r\n      return {\r\n        trigger: trigger,\r\n        axisPointer: {\r\n          type: axisPointerType\r\n        },\r\n        formatter: function (params) {\r\n          if (customFormatter) {\r\n            return this.getFormatterStr(params)\r\n          } else {\r\n            var name = params[0].name\r\n            var str = ''\r\n            params.forEach((item, i) => {\r\n              if (item.seriesName !== '阴影') {\r\n                str += item.seriesName + ' : ' + item.value + '<br />'\r\n              }\r\n            })\r\n            return `${name}<br /> ${str}`\r\n          }\r\n        },\r\n        ...opt\r\n      }\r\n    },\r\n    getFormatterStr(params) {\r\n      return 'aaaaaaaaaaa'\r\n    },\r\n    createTplCode(zjNm, imNm) {\r\n      let propsKeys = Object.keys(this._props).map((_) => `:${_}=\"chartParams.${_}\"`)\r\n      // console.log(`<${zjNm}  ${propsKeys.join(' ')}></${zjNm}>`)\r\n    }\r\n  }\r\n}"]}]}