{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js!D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\工作项目\\部反诈\\src\\constants\\utils.js","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\constants\\utils.js","mtime":1598758387012},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _parseFloat from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/parse-float\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.sort\";\nimport _toConsumableArray from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport * as d3 from 'd3-scale'; // 获取数组的前十个\n\nexport function getTop10(value, name) {\n  var seriesData = [];\n  var categoryData = [];\n  value.forEach(function (item, index) {\n    if (index < 10) {\n      seriesData.push(item);\n    }\n  });\n  name.forEach(function (item, index) {\n    if (index < 10) {\n      categoryData.push(item);\n    }\n  });\n  return {\n    seriesData: seriesData,\n    categoryData: categoryData\n  };\n}\n/**\n * [transPieData 把数据转化为饼图需要的数据格式]\n * @data  {[Array]} [数组]\n * @name  {[String]} [名称key]\n * @value  {[String]} [数值key]\n * @return {[Array]} [转化后的数组]\n */\n\nexport function transPieData(data, name, value, fn) {\n  var res = [];\n\n  if (data) {\n    data.forEach(function (v) {\n      var temp = v[name];\n      fn && (temp = fn(temp));\n\n      if (temp) {\n        res.push({\n          name: temp,\n          value: v[value] || 0\n        });\n      }\n    });\n  }\n\n  return res;\n}\n/**\n * [transBarData 把数据转化为柱状图需要的数据格式]\n * @data  {[Array]} [数组]\n * @name  {[String]} [名称key]\n * @value  {[String]} [数值key]\n * @return {[Array]} [转化后的数组]\n */\n\nexport function transBarData(data, name, value, fn) {\n  var xData = [],\n      yData = [];\n\n  if (data) {\n    data.forEach(function (v) {\n      var temp = v[name];\n      fn && (temp = fn(temp));\n\n      if (temp) {\n        xData.push(temp);\n        yData.push(v[value] || 0);\n      }\n    });\n  }\n\n  return [xData, yData];\n}\n/**\n * [sortKeysArr 把数组某个属性的值存为数组]\n * @data  {[Array]} [数组]\n * @keysArr  {[Array]} [名称key Array]\n * @return {[Object]} [转化后的对象，包含各个属性的数组]\n */\n\nexport function sortKeysArr(data, keysArr) {\n  var keysObj = {};\n  keysArr.forEach(function (key) {\n    keysObj[key] = [];\n  });\n\n  if (data) {\n    data.forEach(function (v) {\n      keysArr.forEach(function (key) {\n        keysObj[key].push(v[key]);\n      });\n    });\n  }\n\n  return keysObj;\n}\n/**\n * [getMaxValue 获取数组最大值]\n * @data  {[Array]} [数组]\n * @maxValue  {[Number]} [最大值]\n * @return {[Number]} [最大值]\n */\n\nexport function getMaxValue(data) {\n  var maxValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  var tempArr = _toConsumableArray(data);\n\n  tempArr.sort(function (a, b) {\n    return b - a;\n  });\n\n  if (tempArr.length > 0 && tempArr[0] > maxValue) {\n    maxValue = tempArr[0];\n  }\n\n  return maxValue;\n}\n/**\n * [getMinValue 获取数组最小值]\n * @data  {[Array]} [数组]\n * @maxValue  {[Number]} [最小值]\n * @return {[Number]} [最小值]\n */\n\nexport function getMinValue(data) {\n  var minValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  var tempArr = _toConsumableArray(data);\n\n  tempArr.sort(function (a, b) {\n    return a - b;\n  });\n\n  if (tempArr.length > 0 && tempArr[0] < minValue) {\n    minValue = tempArr[0];\n  }\n\n  return minValue;\n}\n/**\n *[getGroupArray 把一维数组转化为数组长度为cols的二位数组]\n * @data {[Array]} [数组]\n * @cols {[Number]} [数组按cols长度进行切割]\n * @return {[Array]} [转化后的数组]\n */\n\nexport function getGroupArray(data, cols) {\n  var list = [];\n  var current = [];\n\n  if (data && data.length !== 0) {\n    data.forEach(function (t) {\n      current.push(t);\n\n      if (current.length === cols) {\n        list.push(current);\n        current = [];\n      }\n    });\n  }\n\n  if (current.length) {\n    list.push(current);\n  }\n\n  return list;\n} // 二次赛贝尔曲线函数\n\nexport function bezierCurveTo(x1, y1, x2, y2) {\n  var dx = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : (x2 - x1) / 2;\n  var angle = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  if (y1 === y2) return \"M \".concat(x1, \" \").concat(y1 + 1, \" L \").concat(x2, \" \").concat(y2);\n  var radian = angle * Math.PI / 180;\n  var dy = Math.tan(radian) * dx; // const cpx1 = x1 + dx\n\n  var cpx1 = x1 + (x2 - x1) / 4;\n  var cpy1 = y1 < y2 ? y1 - dy : y1 + dy;\n  var cpx2 = x2 - dx; // const cpx2 = x2 - (x2 - x1) / 4\n\n  var cpy2 = y1 < y2 ? y2 + dy : y2 - dy;\n  return \"M \".concat(x1, \" \").concat(y1, \" C \").concat(cpx1, \" \").concat(cpy1, \" \").concat(cpx2, \" \").concat(cpy2, \" \").concat(x2, \" \").concat(y2);\n}\n/**\n * [getMinValue 把“其他”和“未知”排在最后（饼图排序）]\n * @data  {[Array]} [数组]\n * @needRank  {[Boolean]} [是否需要排序，默认由大到小排序]\n * @return {[Array]} [排序后的数组]\n */\n\nexport function rankUnknownData(data) {\n  var needRank = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var arr = [],\n      unknownArr = [];\n\n  if (data) {\n    if (needRank) data.sort(function (a, b) {\n      return b.value - a.value;\n    });\n    data.forEach(function (v) {\n      if (v.name === '其它' || v.name === '其他' || v.name === '未知') {\n        unknownArr.push(v);\n      } else {\n        arr.push(v);\n      }\n    });\n  }\n\n  return [].concat(arr, unknownArr);\n}\n/**\n *[getAddMaxValue 获取一组数组同一列和的最大值]\n * @data  {[Array]} [数组]\n * @maxValue  {[Number]} [最大值]\n * @return {[Number]} [最大值]\n */\n// serialArray\n\nexport function getColumnMaxValue() {\n  var seriesData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var sLen = seriesData.length;\n  var cLen = seriesData[0].length;\n  var arr = [];\n\n  for (var i = 0; i < cLen; ++i) {\n    arr.push(0);\n\n    for (var j = 0; j < sLen; ++j) {\n      arr[i] += seriesData[j][i];\n    }\n  }\n\n  var maxValue = getMaxValue(arr);\n  console.log(maxValue, '=====maxValue=======');\n  return maxValue;\n}\n/**\n * @param {Array} data\n * @return {Array}\n */\n\nexport function getRangeData(data, domain, range) {\n  if (!data && data.length === 0) return;\n  var logScale = d3.scaleLog().domain(domain).range(range);\n  return data.map(function (item) {\n    return logScale(item);\n  });\n}\n/**\n * 数字千分法\n * @param {Number} num\n * @return {String}\n */\n\nexport function toThousands(num) {\n  num = (num || 0).toString();\n  var result = '';\n\n  while (num.length > 3) {\n    result = ',' + num.slice(-3) + result;\n    num = num.slice(0, num.length - 3);\n  }\n\n  if (num) {\n    result = num + result;\n  }\n\n  return result;\n}\n/**\n * 数字保留1位小数取万\n * @param {Number} num\n * @return {String}\n */\n\nexport function getTenThousands(num) {\n  if (num > 10000) {\n    num = _parseFloat(num / 10000).toFixed(1); // num = toFixedNum(num, 1)\n  }\n\n  return num;\n}\nexport function formateValue(num) {\n  return num > 10000 ? getTenThousands(num) : toThousands(num);\n}",{"version":3,"sources":["D:\\工作项目\\部反诈\\src\\constants\\utils.js"],"names":["d3","getTop10","value","name","seriesData","categoryData","forEach","item","index","push","transPieData","data","fn","res","v","temp","transBarData","xData","yData","sortKeysArr","keysArr","keysObj","key","getMaxValue","maxValue","tempArr","sort","a","b","length","getMinValue","minValue","getGroupArray","cols","list","current","t","bezierCurveTo","x1","y1","x2","y2","dx","angle","radian","Math","PI","dy","tan","cpx1","cpy1","cpx2","cpy2","rankUnknownData","needRank","arr","unknownArr","getColumnMaxValue","sLen","cLen","i","j","console","log","getRangeData","domain","range","logScale","scaleLog","map","toThousands","num","toString","result","slice","getTenThousands","toFixed","formateValue"],"mappings":"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","sourcesContent":["import * as d3 from 'd3-scale'\n\n// 获取数组的前十个\nexport function getTop10(value, name) {\n  const seriesData = []\n  const categoryData = []\n  value.forEach((item, index) => {\n    if (index < 10) {\n      seriesData.push(item)\n    }\n  })\n  name.forEach((item, index) => {\n    if (index < 10) {\n      categoryData.push(item)\n    }\n  })\n  return {\n    seriesData: seriesData,\n    categoryData: categoryData\n  }\n}\n\n/**\n * [transPieData 把数据转化为饼图需要的数据格式]\n * @data  {[Array]} [数组]\n * @name  {[String]} [名称key]\n * @value  {[String]} [数值key]\n * @return {[Array]} [转化后的数组]\n */\nexport function transPieData(data, name, value, fn) {\n  let res = []\n  if (data) {\n    data.forEach(v => {\n      let temp = v[name]\n      fn && (temp = fn(temp))\n      if (temp) {\n        res.push({\n          name: temp,\n          value: v[value] || 0\n        })\n      }\n    })\n  }\n  return res\n}\n\n/**\n * [transBarData 把数据转化为柱状图需要的数据格式]\n * @data  {[Array]} [数组]\n * @name  {[String]} [名称key]\n * @value  {[String]} [数值key]\n * @return {[Array]} [转化后的数组]\n */\nexport function transBarData(data, name, value, fn) {\n  let xData = [],\n    yData = []\n  if (data) {\n    data.forEach(v => {\n      let temp = v[name]\n      fn && (temp = fn(temp))\n      if (temp) {\n        xData.push(temp)\n        yData.push(v[value] || 0)\n      }\n    })\n  }\n  return [xData, yData]\n}\n\n/**\n * [sortKeysArr 把数组某个属性的值存为数组]\n * @data  {[Array]} [数组]\n * @keysArr  {[Array]} [名称key Array]\n * @return {[Object]} [转化后的对象，包含各个属性的数组]\n */\nexport function sortKeysArr(data, keysArr) {\n  let keysObj = {}\n  keysArr.forEach(key => {\n    keysObj[key] = []\n  })\n  if (data) {\n    data.forEach(v => {\n      keysArr.forEach(key => {\n        keysObj[key].push(v[key])\n      })\n    })\n  }\n  return keysObj\n}\n\n/**\n * [getMaxValue 获取数组最大值]\n * @data  {[Array]} [数组]\n * @maxValue  {[Number]} [最大值]\n * @return {[Number]} [最大值]\n */\nexport function getMaxValue(data, maxValue = 0) {\n  let tempArr = [...data]\n  tempArr.sort((a, b) => b - a)\n  if (tempArr.length > 0 && tempArr[0] > maxValue) {\n    maxValue = tempArr[0]\n  }\n  return maxValue\n}\n\n/**\n * [getMinValue 获取数组最小值]\n * @data  {[Array]} [数组]\n * @maxValue  {[Number]} [最小值]\n * @return {[Number]} [最小值]\n */\nexport function getMinValue(data, minValue = 0) {\n  let tempArr = [...data]\n  tempArr.sort((a, b) => a - b)\n  if (tempArr.length > 0 && tempArr[0] < minValue) {\n    minValue = tempArr[0]\n  }\n  return minValue\n}\n/**\n *[getGroupArray 把一维数组转化为数组长度为cols的二位数组]\n * @data {[Array]} [数组]\n * @cols {[Number]} [数组按cols长度进行切割]\n * @return {[Array]} [转化后的数组]\n */\nexport function getGroupArray(data, cols) {\n  const list = []\n  let current = []\n  if (data && data.length !== 0) {\n    data.forEach(t => {\n      current.push(t)\n      if (current.length === cols) {\n        list.push(current)\n        current = []\n      }\n    })\n  }\n  if (current.length) {\n    list.push(current)\n  }\n  return list\n}\n\n// 二次赛贝尔曲线函数\nexport function bezierCurveTo(x1, y1, x2, y2, dx = (x2 - x1) / 2, angle = 0) {\n  if (y1 === y2) return `M ${x1} ${y1 + 1} L ${x2} ${y2}`\n  const radian = (angle * Math.PI) / 180\n  const dy = Math.tan(radian) * dx\n  // const cpx1 = x1 + dx\n  const cpx1 = x1 + (x2 - x1) / 4\n  const cpy1 = y1 < y2 ? y1 - dy : y1 + dy\n  const cpx2 = x2 - dx\n  // const cpx2 = x2 - (x2 - x1) / 4\n  const cpy2 = y1 < y2 ? y2 + dy : y2 - dy\n  return `M ${x1} ${y1} C ${cpx1} ${cpy1} ${cpx2} ${cpy2} ${x2} ${y2}`\n}\n\n/**\n * [getMinValue 把“其他”和“未知”排在最后（饼图排序）]\n * @data  {[Array]} [数组]\n * @needRank  {[Boolean]} [是否需要排序，默认由大到小排序]\n * @return {[Array]} [排序后的数组]\n */\nexport function rankUnknownData(data, needRank = true) {\n  let arr = [],\n    unknownArr = []\n  if (data) {\n    if (needRank) data.sort((a, b) => b.value - a.value)\n    data.forEach(v => {\n      if (v.name === '其它' || v.name === '其他' || v.name === '未知') {\n        unknownArr.push(v)\n      } else {\n        arr.push(v)\n      }\n    })\n  }\n  return [...arr, ...unknownArr]\n}\n\n/**\n *[getAddMaxValue 获取一组数组同一列和的最大值]\n * @data  {[Array]} [数组]\n * @maxValue  {[Number]} [最大值]\n * @return {[Number]} [最大值]\n */\n// serialArray\nexport function getColumnMaxValue(seriesData = []) {\n  let sLen = seriesData.length\n  let cLen = seriesData[0].length\n  let arr = []\n  for (var i = 0; i < cLen; ++i) {\n    arr.push(0)\n    for (var j = 0; j < sLen; ++j) {\n      arr[i] += seriesData[j][i]\n    }\n  }\n  let maxValue = getMaxValue(arr)\n  console.log(maxValue, '=====maxValue=======')\n  return maxValue\n}\n\n/**\n * @param {Array} data\n * @return {Array}\n */\nexport function getRangeData(data, domain, range) {\n  if (!data && data.length === 0) return\n  var logScale = d3\n    .scaleLog()\n    .domain(domain)\n    .range(range)\n  return data.map(item => logScale(item))\n}\n/**\n * 数字千分法\n * @param {Number} num\n * @return {String}\n */\nexport function toThousands(num) {\n  num = (num || 0).toString()\n  let result = ''\n  while (num.length > 3) {\n    result = ',' + num.slice(-3) + result\n    num = num.slice(0, num.length - 3)\n  }\n  if (num) {\n    result = num + result\n  }\n  return result\n}\n\n/**\n * 数字保留1位小数取万\n * @param {Number} num\n * @return {String}\n */\nexport function getTenThousands(num) {\n  if (num > 10000) {\n    num = parseFloat(num / 10000).toFixed(1)\n    // num = toFixedNum(num, 1)\n  }\n  return num\n}\n\nexport function formateValue(num) {\n  return num > 10000 ? getTenThousands(num) : toThousands(num)\n}\n\n"]}]}