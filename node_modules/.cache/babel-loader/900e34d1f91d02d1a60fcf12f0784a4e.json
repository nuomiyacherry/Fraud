{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js!D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\工作项目\\部反诈\\src\\components\\echarts\\line\\lineChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\components\\echarts\\line\\lineChart.vue","mtime":1598758386799},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\nimport globalChartMixin from 'mixins/globalChartMixin';\nimport gridChartMixin from 'mixins/gridChartMixin';\nimport axisChartMixin from 'mixins/axisChartMixin';\nimport colorChartMixin from 'mixins/colorChartMixin';\nimport tooltipChartMixin from 'mixins/tooltipChartMixin';\nimport storage from \"utils/storage\";\nimport { getMaxValue, getMinValue } from 'constants/utils';\nimport ECharts from 'vue-echarts/components/ECharts';\nimport 'echarts/lib/chart/line';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/legend';\nimport 'echarts/lib/component/legendScroll';\nimport 'echarts/lib/component/title';\nimport 'echarts/lib/component/markLine';\nimport 'echarts/lib/component/markPoint';\nvar chartColors = storage.get('tColors');\nexport default {\n  name: 'lineChart',\n  components: {\n    ECharts: ECharts\n  },\n  mixins: [globalChartMixin, axisChartMixin, gridChartMixin, colorChartMixin, tooltipChartMixin],\n  props: {\n    chartData: {\n      type: Object,\n      default: function _default() {\n        return {\n          legendData: ['告警事件'],\n          seriesData: [[1432, 1568, 1125, 1359, 1654, 1852, 1523, 1369, 1459, 1854, 1635, 1364]],\n          categoryData: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']\n        };\n      }\n    },\n    colors: {\n      type: Array,\n      default: function _default() {\n        return chartColors.line.colors;\n      }\n    },\n    smooth: {\n      type: Boolean,\n      default: false\n    },\n    markLineAverage: {\n      type: Boolean,\n      default: false\n    },\n    markLineAverageLabel: {\n      type: String,\n      default: '平均值'\n    },\n    markLineColor: {\n      type: String,\n      default: chartColors.line.markLine\n    },\n    showLineArea: {\n      type: Boolean,\n      default: false\n    },\n    areaStartColors: {\n      type: Array,\n      default: function _default() {\n        return chartColors.line.gradualStart;\n      }\n    },\n    areaEndColors: {\n      type: Array,\n      default: function _default() {\n        return chartColors.line.gradualEnd;\n      }\n    },\n    dataZoomShow: {\n      type: Boolean,\n      default: false\n    },\n    dataZoomStart: {\n      type: Number,\n      default: 0\n    },\n    dataZoomEnd: {\n      type: Number,\n      default: 100\n    },\n    handleColor: {\n      type: String,\n      default: chartColors.dataZoomColor.handleColor\n    },\n    backgroundColor: {\n      type: String,\n      default: chartColors.dataZoomColor.backgroundColor\n    },\n    fillerColor: {\n      type: String,\n      default: chartColors.dataZoomColor.fillerColor\n    },\n    dataZoomTextColor: {\n      type: String,\n      default: chartColors.dataZoomColor.textColor\n    }\n  },\n  data: function data() {\n    return {\n      chartName: '[折线图模板]',\n      startColors: this.areaStartColors,\n      endColors: this.areaEndColors,\n      currColors: []\n    };\n  },\n  watch: {\n    chartData: {\n      handler: function handler(newVal, oldVal) {\n        this.refresh();\n      },\n      deep: true\n    },\n    colors: function colors() {\n      // console.log(`${this.chartName}colors[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    smooth: function smooth(newVal, oldVal) {\n      // console.log(`${this.chartName}smooth[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    markLineAverage: function markLineAverage(newVal, oldVal) {\n      // console.log(`${this.chartName}markLineAverage[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    markLineColor: function markLineColor(newVal, oldVal) {\n      // console.log(`${this.chartName}markLineColor[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    showLineArea: function showLineArea(newVal, oldVal) {\n      // console.log(`${this.chartName}showLineArea[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh();\n    },\n    areaStartColors: function areaStartColors(newVal, oldVal) {\n      // console.log(`${this.chartName}areaStartColors[新值:${newVal};旧值:${oldVal}]`)\n      this.startColors = newVal;\n      this.refresh();\n    },\n    areaEndColors: function areaEndColors(newVal, oldVal) {\n      // console.log(`${this.chartName}areaEndColors[新值:${newVal};旧值:${oldVal}]`)\n      this.endColors = newVal;\n      this.refresh();\n    },\n    dataZoomShow: function dataZoomShow(newVal, oldVal) {\n      this.refresh();\n    },\n    handleColor: function handleColor(newVal, oldVal) {\n      this.refresh();\n    },\n    backgroundColor: function backgroundColor(newVal, oldVal) {\n      this.refresh();\n    },\n    fillerColor: function fillerColor(newVal, oldVal) {\n      this.refresh();\n    },\n    dataZoomTextColor: function dataZoomTextColor(newVal, oldVal) {\n      this.refresh();\n    }\n  },\n  computed: {},\n  created: function created() {\n    if (this.currColors.length === 0) {\n      this.initAreaColors();\n    }\n  },\n  methods: {\n    initAreaColors: function initAreaColors() {\n      var _this = this;\n\n      this.colors.forEach(function (item, index) {\n        _this.currColors.push({\n          type: 'linear',\n          x: 0,\n          y: 0,\n          x2: 0,\n          y2: 1,\n          colorStops: [{\n            offset: 0,\n            color: _this.areaStartColors[index] // 0% 处的颜色\n\n          }, {\n            offset: 1,\n            color: _this.areaEndColors[index] // 100% 处的颜色\n\n          }]\n        });\n      });\n    },\n    markLineAverageData: function markLineAverageData(item, index) {\n      // 判断是否绘制平均值标线\n      var oMarkLineAverage = {};\n\n      if (this.markLineAverage) {\n        oMarkLineAverage = {\n          markLine: {\n            precision: 0,\n            lineStyle: {\n              normal: {\n                color: this.markLineColor\n              }\n            },\n            label: {\n              normal: {\n                position: 'middle',\n                formatter: this.markLineAverageLabel + '：{c}'\n              }\n            },\n            data: [{\n              type: 'average',\n              name: '平均值'\n            }]\n          },\n          markPoint: {\n            data: [{\n              type: 'max',\n              name: '最大值'\n            }, {\n              type: 'min',\n              name: '最小值'\n            }]\n          }\n        };\n      }\n\n      return oMarkLineAverage;\n    },\n    setOptions: function setOptions() {\n      var _this2 = this;\n\n      var _ref = [this.chartData.legendData, this.chartData.seriesData, this.chartData.categoryData],\n          legendData = _ref[0],\n          seriesData = _ref[1],\n          categoryData = _ref[2];\n      var series = [];\n      var maxValue = 0,\n          minValue = 0; // 构造数据\n\n      if (legendData && legendData.length !== 0) {\n        legendData.forEach(function (item, index) {\n          series.push(_objectSpread({\n            name: item,\n            type: 'line',\n            smooth: _this2.smooth,\n            data: seriesData[index]\n          }, _this2.markLineAverageData(item, index)));\n\n          if (_this2.showLineArea) {\n            _this2.initColors();\n\n            series[index].areaStyle = {\n              color: _this2.currColors[index]\n            };\n          }\n\n          maxValue = getMaxValue(seriesData[index], maxValue);\n          minValue = getMinValue(seriesData[index], minValue);\n        });\n      } // 构造折线图的选项\n\n\n      var lineOpt = this.returnAxisOptions(legendData, categoryData, series, maxValue, minValue); // console.log('lineChart', lineOpt)\n\n      lineOpt.dataZoom = [{\n        show: this.dataZoomShow,\n        zoomOnMouseWheel: false,\n        moveOnMouseMove: false,\n        realtime: true,\n        handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',\n        handleSize: '20',\n        handleColor: this.handleColor,\n        //h滑动图标的颜色\n        handleStyle: {\n          borderColor: this.handleColor,\n          borderWidth: '1',\n          background: this.handleColor\n        },\n        height: 15,\n        //组件高度\n        backgroundColor: this.backgroundColor,\n        fillerColor: this.fillerColor,\n        //选中范围的填充颜色。\n        borderColor: this.handleColor,\n        textStyle: {\n          color: this.dataZoomTextColor\n        },\n        left: '15%',\n        right: '15%',\n        bottom: 2,\n        start: this.dataZoomStart,\n        end: this.dataZoomEnd,\n        filterMode: 'empty'\n      }, {\n        type: 'inside',\n        realtime: true,\n        start: 0,\n        end: 100,\n        filterMode: 'empty',\n        zoomOnMouseWheel: false,\n        moveOnMouseMove: false\n      }];\n      return lineOpt;\n    }\n  }\n};",{"version":3,"sources":["lineChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <ECharts :options=\"options\" :autoresize=\"true\" @click=\"chartClick\"></ECharts>\r\n</template>\r\n\r\n<script>\r\n  import globalChartMixin from 'mixins/globalChartMixin'\r\n  import gridChartMixin from 'mixins/gridChartMixin'\r\n  import axisChartMixin from 'mixins/axisChartMixin'\r\n  import colorChartMixin from 'mixins/colorChartMixin'\r\n  import tooltipChartMixin from 'mixins/tooltipChartMixin'\r\n  import storage from \"utils/storage\"\r\n  import { getMaxValue, getMinValue } from 'constants/utils'\r\n  import ECharts from 'vue-echarts/components/ECharts'\r\n  import 'echarts/lib/chart/line'\r\n  import 'echarts/lib/component/tooltip'\r\n  import 'echarts/lib/component/legend'\r\n  import 'echarts/lib/component/legendScroll'\r\n  import 'echarts/lib/component/title'\r\n  import 'echarts/lib/component/markLine'\r\n  import 'echarts/lib/component/markPoint'\r\n  const chartColors = storage.get('tColors')\r\n\r\n  export default {\r\n    name: 'lineChart',\r\n    components: { ECharts },\r\n    mixins: [ globalChartMixin, axisChartMixin, gridChartMixin, colorChartMixin, tooltipChartMixin ],\r\n    props: {\r\n      chartData: {\r\n        type: Object,\r\n        default: () => {\r\n          return {\r\n            legendData: ['告警事件'],\r\n            seriesData: [\r\n              [1432, 1568, 1125, 1359, 1654, 1852, 1523, 1369, 1459, 1854, 1635, 1364]\r\n            ],\r\n            categoryData: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']\r\n          }\r\n        }\r\n      },\r\n      colors: {\r\n        type: Array,\r\n        default: () => chartColors.line.colors\r\n      },\r\n      smooth: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      markLineAverage: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      markLineAverageLabel: {\r\n        type: String,\r\n        default: '平均值'\r\n      },\r\n      markLineColor: {\r\n        type: String,\r\n        default: chartColors.line.markLine\r\n      },\r\n      showLineArea: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      areaStartColors: {\r\n        type: Array,\r\n        default: () => chartColors.line.gradualStart\r\n      },\r\n      areaEndColors: {\r\n        type: Array,\r\n        default: () => chartColors.line.gradualEnd\r\n      },\r\n      dataZoomShow: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      dataZoomStart: {\r\n        type: Number,\r\n        default: 0\r\n      },\r\n      dataZoomEnd: {\r\n        type: Number,\r\n        default: 100\r\n      },\r\n      handleColor: {\r\n        type: String,\r\n        default: chartColors.dataZoomColor.handleColor\r\n      },\r\n      backgroundColor: {\r\n        type: String,\r\n        default: chartColors.dataZoomColor.backgroundColor\r\n      },\r\n      fillerColor: {\r\n        type: String,\r\n        default: chartColors.dataZoomColor.fillerColor\r\n      },\r\n      dataZoomTextColor: {\r\n        type: String,\r\n        default: chartColors.dataZoomColor.textColor\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        chartName: '[折线图模板]',\r\n        startColors: this.areaStartColors,\r\n        endColors: this.areaEndColors,\r\n        currColors: []\r\n      }\r\n    },\r\n    watch: {\r\n      chartData: {\r\n        handler(newVal, oldVal) {\r\n          this.refresh()\r\n        },\r\n        deep: true\r\n      },\r\n      colors() {\r\n        // console.log(`${this.chartName}colors[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      smooth(newVal, oldVal) {\r\n        // console.log(`${this.chartName}smooth[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      markLineAverage(newVal, oldVal) {\r\n        // console.log(`${this.chartName}markLineAverage[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      markLineColor(newVal, oldVal) {\r\n        // console.log(`${this.chartName}markLineColor[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      showLineArea(newVal, oldVal) {\r\n        // console.log(`${this.chartName}showLineArea[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      areaStartColors(newVal, oldVal) {\r\n        // console.log(`${this.chartName}areaStartColors[新值:${newVal};旧值:${oldVal}]`)\r\n        this.startColors = newVal\r\n        this.refresh()\r\n      },\r\n      areaEndColors(newVal, oldVal) {\r\n        // console.log(`${this.chartName}areaEndColors[新值:${newVal};旧值:${oldVal}]`)\r\n        this.endColors = newVal\r\n        this.refresh()\r\n      },\r\n      dataZoomShow(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      handleColor(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      backgroundColor(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      fillerColor(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      dataZoomTextColor(newVal, oldVal) {\r\n        this.refresh()\r\n      }\r\n    },\r\n    computed: {},\r\n    created() {\r\n      if (this.currColors.length === 0) {\r\n        this.initAreaColors()\r\n      }\r\n    },\r\n    methods: {\r\n      initAreaColors() {\r\n        this.colors.forEach((item, index) => {\r\n          this.currColors.push({\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 0,\r\n            y2: 1,\r\n            colorStops: [\r\n              {\r\n                offset: 0,\r\n                color: this.areaStartColors[index] // 0% 处的颜色\r\n              },\r\n              {\r\n                offset: 1,\r\n                color: this.areaEndColors[index] // 100% 处的颜色\r\n              }\r\n            ]\r\n          })\r\n        })\r\n      },\r\n      markLineAverageData(item, index) {\r\n        // 判断是否绘制平均值标线\r\n        let oMarkLineAverage = {}\r\n        if (this.markLineAverage) {\r\n          oMarkLineAverage = {\r\n            markLine: {\r\n              precision: 0,\r\n              lineStyle: {\r\n                normal: {\r\n                  color: this.markLineColor\r\n                }\r\n              },\r\n              label: {\r\n                normal: {\r\n                  position: 'middle',\r\n                  formatter: this.markLineAverageLabel + '：{c}'\r\n                }\r\n              },\r\n              data: [{\r\n                type: 'average',\r\n                name: '平均值'\r\n              }]\r\n            },\r\n            markPoint: {\r\n              data: [{\r\n                type: 'max',\r\n                name: '最大值'\r\n              },\r\n              {\r\n                type: 'min',\r\n                name: '最小值'\r\n              }\r\n              ]\r\n            }\r\n          }\r\n        }\r\n        return oMarkLineAverage\r\n      },\r\n      setOptions() {\r\n        let [ legendData, seriesData, categoryData ] = [ this.chartData.legendData, this.chartData.seriesData, this.chartData.categoryData ]\r\n        const series = []\r\n        let maxValue = 0, minValue = 0\r\n\r\n        // 构造数据\r\n        if (legendData && legendData.length !== 0) {\r\n          legendData.forEach((item, index) => {\r\n            series.push({\r\n              name: item,\r\n              type: 'line',\r\n              smooth: this.smooth,\r\n              data: seriesData[index],\r\n              ...this.markLineAverageData(item, index)\r\n            })\r\n            if (this.showLineArea) {\r\n              this.initColors()\r\n              series[index].areaStyle = {\r\n                color: this.currColors[index]\r\n              }\r\n            }\r\n            maxValue = getMaxValue(seriesData[index], maxValue)\r\n            minValue = getMinValue(seriesData[index], minValue)\r\n          })\r\n        }\r\n\r\n        // 构造折线图的选项\r\n        let lineOpt = this.returnAxisOptions(legendData, categoryData, series, maxValue, minValue)\r\n\r\n        // console.log('lineChart', lineOpt)\r\n        lineOpt.dataZoom = [\r\n          {\r\n            show: this.dataZoomShow,\r\n            zoomOnMouseWheel: false,\r\n            moveOnMouseMove: false,\r\n            realtime: true,\r\n            handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',\r\n            handleSize: '20',\r\n            handleColor: this.handleColor, //h滑动图标的颜色\r\n            handleStyle: {\r\n              borderColor: this.handleColor,\r\n              borderWidth: '1',\r\n              background: this.handleColor\r\n            },\r\n            height: 15, //组件高度\r\n            backgroundColor: this.backgroundColor,\r\n            fillerColor: this.fillerColor, //选中范围的填充颜色。\r\n            borderColor: this.handleColor,\r\n            textStyle: {\r\n              color: this.dataZoomTextColor\r\n            },\r\n            left: '15%',\r\n            right: '15%',\r\n            bottom: 2,\r\n            start: this.dataZoomStart,\r\n            end: this.dataZoomEnd,\r\n            filterMode: 'empty'\r\n          },\r\n          {\r\n            type: 'inside',\r\n            realtime: true,\r\n            start: 0,\r\n            end: 100,\r\n            filterMode: 'empty',\r\n            zoomOnMouseWheel: false,\r\n            moveOnMouseMove: false\r\n          }\r\n        ]\r\n\r\n        return lineOpt\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/echarts/line"}]}