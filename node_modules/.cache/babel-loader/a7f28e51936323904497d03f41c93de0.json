{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js!D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\工作项目\\部反诈\\src\\components\\echarts\\bar\\barChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\components\\echarts\\bar\\barChart.vue","mtime":1598758386905},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\nimport globalChartMixin from \"mixins/globalChartMixin\";\nimport gridChartMixin from \"mixins/gridChartMixin\";\nimport axisChartMixin from \"mixins/axisChartMixin\";\nimport colorChartMixin from \"mixins/colorChartMixin\";\nimport tooltipChartMixin from \"mixins/tooltipChartMixin\";\nimport storage from \"utils/storage\";\nimport { getMaxValue, getMinValue, getColumnMaxValue } from \"constants/utils\";\nimport { getNationalPng, getCountryImg } from \"@/constants/country\";\nimport ECharts from \"vue-echarts/components/ECharts\";\nimport \"echarts/lib/chart/bar\";\nimport \"echarts/lib/component/tooltip\";\nimport \"echarts/lib/component/legend\";\nimport \"echarts/lib/component/legendScroll\";\nimport \"echarts/lib/component/title\";\nimport echarts from 'echarts';\nvar chartColors = storage.get(\"tColors\");\nexport default {\n  name: \"barChart\",\n  components: {\n    ECharts: ECharts\n  },\n  mixins: [globalChartMixin, axisChartMixin, gridChartMixin, colorChartMixin, tooltipChartMixin],\n  props: {\n    chartData: {\n      type: Object,\n      default: function _default() {\n        return {\n          legendData: [\"IP\", \"IPV4\"],\n          seriesData: [[16672, 14345, 19876, 22098], [12672, 19345, 18876, 10098]],\n          categoryData: [\"IDC\", \"IRCS\", \"CDN\", \"DNS\"]\n        };\n      }\n    },\n    tipData: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    colors: {\n      type: Array,\n      default: function _default() {\n        return chartColors.bar.colors;\n      }\n    },\n    barStack: {\n      type: Boolean,\n      default: false\n    },\n    barCategoryGap: {\n      type: String,\n      default: \"40%\"\n    },\n    barBorderRadius: {\n      type: Array,\n      default: function _default() {\n        return [0, 0, 0, 0];\n      }\n    },\n    labelShow: {\n      type: Boolean,\n      default: false\n    },\n    barGradientShow: {\n      type: Boolean,\n      default: false\n    },\n    barGradientStartColors: {\n      type: Array,\n      default: function _default() {\n        return chartColors.bar.gradualStart;\n      }\n    },\n    barGradientEndColors: {\n      type: Array,\n      default: function _default() {\n        return chartColors.bar.gradualEnd;\n      }\n    },\n    barShadowShow: {\n      type: Boolean,\n      default: false\n    },\n    barShadowRadius: {\n      type: Array,\n      default: function _default() {\n        return [0, 0, 0, 0];\n      }\n    },\n    barShadowColors: {\n      type: String,\n      default: chartColors.bar.shadow\n    },\n    barWidth: {\n      type: [Number, String],\n      default: \"auto\"\n    },\n    hasNational: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      chartName: \"[柱状图模板]\",\n      startColors: this.barGradientStartColors,\n      endColors: this.barGradientEndColors,\n      currColors: []\n    };\n  },\n  mounted: function mounted() {\n    this.createTplCode(\"BarChart\");\n  },\n  watch: {\n    // chartData(newVal, oldVal) {\n    //   // console.log(`${this.chartName}chartData[新值:${newVal};旧值:${oldVal}]`)\n    //   this.refresh()\n    // },\n    chartData: {\n      handler: function handler(newVal, oldVal) {\n        this.refresh();\n      },\n      deep: true\n    },\n    colors: function colors(newVal, oldVal) {\n      // console.log(`${this.chartName}colors[新值:${newVal};旧值:${oldVal}]`)\n      this.refresh();\n    },\n    barStack: function barStack(newVal, oldVal) {\n      // console.log(`${this.chartName}barStack[新值:${newVal};旧值:${oldVal}]`)\n      this.refresh();\n    },\n    barCategoryGap: function barCategoryGap(newVal, oldVal) {\n      // console.log(`${this.chartName}barCategoryGap[新值:${newVal};旧值:${oldVal}]`)\n      this.refresh();\n    },\n    barBorderRadius: function barBorderRadius(newVal, oldVal) {\n      // console.log(`${this.chartName}barBorderRadius[新值:${newVal};旧值:${oldVal}]`)\n      this.refresh();\n    },\n    barShadowRadius: function barShadowRadius(newVal, oldVal) {\n      // console.log(`${this.chartName}barShadowRadius[新值:${newVal};旧值:${oldVal}]`)\n      this.refresh();\n    },\n    labelShow: function labelShow(newVal, oldVal) {\n      // console.log(`${this.chartName}labelShow[新值:${newVal};旧值:${oldVal}]`)\n      this.refresh();\n    },\n    barGradientShow: function barGradientShow(newVal, oldVal) {\n      // console.log(`${this.chartName}barGradientShow[新值:${newVal};旧值:${oldVal}]`)\n      this.refresh();\n    },\n    barGradientStartColors: function barGradientStartColors(newVal, oldVal) {\n      // console.log(`${this.chartName}barGradientStartColors[新值:${newVal};旧值:${oldVal}]`)\n      this.startColors = newVal;\n      this.refresh();\n    },\n    barGradientEndColors: function barGradientEndColors(newVal, oldVal) {\n      // console.log(`${this.chartName}barGradientEndColors[新值:${newVal};旧值:${oldVal}]`)\n      this.endColors = newVal;\n      this.refresh();\n    },\n    barShadowShow: function barShadowShow(newVal, oldVal) {\n      // console.log(`${this.chartName}barShadowShow[新值:${newVal};旧值:${oldVal}]`)\n      this.refresh();\n    },\n    barShadowColors: function barShadowColors(newVal, oldVal) {\n      // console.log(`${this.chartName}barShadowColors[新值:${newVal};旧值:${oldVal}]`)\n      this.refresh();\n    },\n    hasNational: function hasNational(newVal, oldVal) {\n      // console.log(`${this.chartName}barShadowColors[新值:${newVal};旧值:${oldVal}]`)\n      this.refresh();\n    },\n    tipData: function tipData(newVal, oldVal) {\n      this.refresh();\n    }\n  },\n  methods: {\n    setOptions: function setOptions() {\n      var _this2 = this;\n\n      var _ref = [this.chartData.legendData, this.chartData.seriesData, this.chartData.categoryData],\n          legendData = _ref[0],\n          seriesData = _ref[1],\n          categoryData = _ref[2];\n      var seriesLabelPosition = \"inside\",\n          seriesLabelShow = false,\n          series = [],\n          maxSeriesData = [];\n      var maxValue = 0,\n          minValue = 0;\n      var _ref2 = [this.barCategoryGap, this.barStack],\n          barCategoryGap = _ref2[0],\n          barStack = _ref2[1];\n\n      var _this = this;\n\n      if (this.barStack) {\n        if (this.labelShow) {\n          seriesLabelShow = true;\n          this.xAxisValue ? seriesLabelPosition = \"insideRight\" : seriesLabelPosition = \"insideTop\";\n        }\n\n        if (this.barShadowShow) {\n          if (legendData && legendData.length !== 1) {\n            barCategoryGap = \"0%\";\n            barStack = true;\n          }\n        }\n      }\n\n      if (legendData && legendData.length !== 0) {\n        legendData.forEach(function (item, index) {\n          maxValue = getMaxValue(seriesData[index], maxValue);\n          minValue = getMinValue(seriesData[index], minValue);\n\n          if (_this2.tipData.length !== 0) {\n            seriesData[0] = _this2.tipData;\n          }\n\n          series.push({\n            name: item,\n            type: \"bar\",\n            barCategoryGap: barCategoryGap,\n            label: {\n              normal: {\n                show: seriesLabelShow,\n                position: seriesLabelPosition\n              }\n            },\n            itemStyle: {\n              normal: {\n                barBorderRadius: _this2.barBorderRadius,\n                color: _this2.colors[index]\n              }\n            },\n            stack: barStack,\n            data: seriesData[index],\n            barMaxWidth: \"20\",\n            barWidth: _this2.barWidth\n          });\n\n          if (_this2.barGradientShow) {\n            _this2.initColors();\n\n            series[index].itemStyle.normal = {\n              barBorderRadius: _this2.barBorderRadius,\n              color: _this2.currColors[index]\n            };\n          }\n        });\n      }\n\n      if (this.barStack && this.barShadowShow) {\n        if (legendData && legendData.length !== 1) {\n          maxValue = getColumnMaxValue(seriesData);\n        }\n\n        if (categoryData) {\n          for (var i = 0; i < categoryData.length; i++) {\n            maxSeriesData.push(maxValue + 20);\n          }\n        }\n\n        series.push({\n          name: \"阴影\",\n          type: \"bar\",\n          barGap: \"-100%\",\n          z: 0,\n          label: {\n            normal: {\n              show: seriesLabelShow,\n              position: seriesLabelPosition\n            }\n          },\n          itemStyle: {\n            normal: {\n              barBorderRadius: this.barShadowRadius,\n              color: this.barShadowColors\n            }\n          },\n          data: maxSeriesData,\n          barMaxWidth: \"20\",\n          barWidth: this.barWidth\n        });\n      }\n\n      var barOpt = this.returnAxisOptions(legendData, categoryData, series, maxValue, minValue);\n\n      if (this.tipData.length !== 0) {\n        barOpt.tooltip = {\n          formatter: function formatter(params) {\n            var name = params.name;\n            var str = '';\n\n            if (_this.tipData.length !== 0) {\n              var title = params.data.name + '(' + params.data.country + ')';\n              return \"\".concat(title, \"<br /> \").concat(params.seriesName) + ' : ' + params.data.value;\n            } else {\n              params.forEach(function (item, i) {\n                if (item.seriesName !== '阴影') {\n                  str += item.seriesName + ' : ' + item.value + '<br />';\n                }\n              });\n              return \"\".concat(name, \"<br /> \").concat(str);\n            }\n          }\n        };\n      }\n\n      return barOpt;\n    },\n    countryLabelFormatter: function countryLabelFormatter(barOpt) {\n      var _this = this;\n\n      var label = this.xAxisValue ? \"yAxis\" : \"xAxis\";\n      barOpt[label].axisLabel.padding = [0, 0, 0, 12];\n\n      barOpt[label].axisLabel.formatter = function (val, index) {\n        if (_this.hasNational) {\n          var name = getNationalPng(val);\n          return \"{\" + name + \"| }\" + \"  \" + \"{value|\" + val + \"}\";\n        } else {\n          return val;\n        }\n      };\n\n      barOpt[label].axisLabel.rich = _objectSpread({\n        value: {\n          lineHeight: 30\n        }\n      }, getCountryImg());\n      return barOpt;\n    }\n  }\n};",{"version":3,"sources":["barChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <ECharts :options=\"options\" :autoresize=\"true\"></ECharts>\r\n</template>\r\n\r\n<script>\r\nimport globalChartMixin from \"mixins/globalChartMixin\"\r\nimport gridChartMixin from \"mixins/gridChartMixin\"\r\nimport axisChartMixin from \"mixins/axisChartMixin\"\r\nimport colorChartMixin from \"mixins/colorChartMixin\"\r\nimport tooltipChartMixin from \"mixins/tooltipChartMixin\"\r\nimport storage from \"utils/storage\"\r\nimport { getMaxValue, getMinValue, getColumnMaxValue } from \"constants/utils\"\r\nimport { getNationalPng, getCountryImg } from \"@/constants/country\"\r\nimport ECharts from \"vue-echarts/components/ECharts\"\r\nimport \"echarts/lib/chart/bar\"\r\nimport \"echarts/lib/component/tooltip\"\r\nimport \"echarts/lib/component/legend\"\r\nimport \"echarts/lib/component/legendScroll\"\r\nimport \"echarts/lib/component/title\"\r\nimport echarts from 'echarts'\r\nconst chartColors = storage.get(\"tColors\")\r\n\r\nexport default {\r\n  name: \"barChart\",\r\n  components: { ECharts },\r\n  mixins: [\r\n    globalChartMixin,\r\n    axisChartMixin,\r\n    gridChartMixin,\r\n    colorChartMixin,\r\n    tooltipChartMixin\r\n  ],\r\n  props: {\r\n    chartData: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          legendData: [\"IP\", \"IPV4\"],\r\n          seriesData: [\r\n            [16672, 14345, 19876, 22098],\r\n            [12672, 19345, 18876, 10098]\r\n          ],\r\n          categoryData: [\"IDC\", \"IRCS\", \"CDN\", \"DNS\"]\r\n        }\r\n      }\r\n    },\r\n    tipData: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    colors: {\r\n      type: Array,\r\n      default: () => chartColors.bar.colors\r\n    },\r\n    barStack: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    barCategoryGap: {\r\n      type: String,\r\n      default: \"40%\"\r\n    },\r\n    barBorderRadius: {\r\n      type: Array,\r\n      default: () => [0, 0, 0, 0]\r\n    },\r\n    labelShow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    barGradientShow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    barGradientStartColors: {\r\n      type: Array,\r\n      default: () => chartColors.bar.gradualStart\r\n    },\r\n    barGradientEndColors: {\r\n      type: Array,\r\n      default: () => chartColors.bar.gradualEnd\r\n    },\r\n    barShadowShow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    barShadowRadius: {\r\n      type: Array,\r\n      default: () => [0, 0, 0, 0]\r\n    },\r\n    barShadowColors: {\r\n      type: String,\r\n      default: chartColors.bar.shadow\r\n    },\r\n    barWidth: {\r\n      type: [Number, String],\r\n      default: \"auto\"\r\n    },\r\n    hasNational: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      chartName: \"[柱状图模板]\",\r\n      startColors: this.barGradientStartColors,\r\n      endColors: this.barGradientEndColors,\r\n      currColors: []\r\n    }\r\n  },\r\n  mounted() {\r\n    this.createTplCode(\"BarChart\")\r\n  },\r\n  watch: {\r\n    // chartData(newVal, oldVal) {\r\n    //   // console.log(`${this.chartName}chartData[新值:${newVal};旧值:${oldVal}]`)\r\n    //   this.refresh()\r\n    // },\r\n    chartData: {\r\n      handler(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      deep: true\r\n    },\r\n    colors(newVal, oldVal) {\r\n      // console.log(`${this.chartName}colors[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barStack(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barStack[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barCategoryGap(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barCategoryGap[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barBorderRadius(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barBorderRadius[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barShadowRadius(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barShadowRadius[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    labelShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}labelShow[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barGradientShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barGradientShow[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barGradientStartColors(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barGradientStartColors[新值:${newVal};旧值:${oldVal}]`)\r\n      this.startColors = newVal\r\n      this.refresh()\r\n    },\r\n    barGradientEndColors(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barGradientEndColors[新值:${newVal};旧值:${oldVal}]`)\r\n      this.endColors = newVal\r\n      this.refresh()\r\n    },\r\n    barShadowShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barShadowShow[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barShadowColors(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barShadowColors[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    hasNational(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barShadowColors[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    tipData(newVal, oldVal) {\r\n      this.refresh()\r\n    }\r\n  },\r\n  methods: {\r\n    setOptions() {\r\n      let [legendData, seriesData, categoryData] = [\r\n        this.chartData.legendData,\r\n        this.chartData.seriesData,\r\n        this.chartData.categoryData\r\n      ]\r\n      let [seriesLabelPosition, seriesLabelShow, series, maxSeriesData] = [\r\n        \"inside\",\r\n        false,\r\n        [],\r\n        []\r\n      ]\r\n      let [maxValue, minValue] = [0, 0]\r\n      let [barCategoryGap, barStack] = [this.barCategoryGap, this.barStack]\r\n      const _this = this\r\n      if (this.barStack) {\r\n        if (this.labelShow) {\r\n          seriesLabelShow = true\r\n          this.xAxisValue\r\n            ? (seriesLabelPosition = \"insideRight\")\r\n            : (seriesLabelPosition = \"insideTop\")\r\n        }\r\n        if (this.barShadowShow) {\r\n          if (legendData && legendData.length !== 1) {\r\n            barCategoryGap = \"0%\"\r\n            barStack = true\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (legendData && legendData.length !== 0) {\r\n        legendData.forEach((item, index) => {\r\n          maxValue = getMaxValue(seriesData[index], maxValue)\r\n          minValue = getMinValue(seriesData[index], minValue)\r\n          if (this.tipData.length !== 0) {\r\n            seriesData[0] = this.tipData\r\n          }\r\n          series.push({\r\n            name: item,\r\n            type: \"bar\",\r\n            barCategoryGap: barCategoryGap,\r\n            label: {\r\n              normal: {\r\n                show: seriesLabelShow,\r\n                position: seriesLabelPosition\r\n              }\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                barBorderRadius: this.barBorderRadius,\r\n                color: this.colors[index]\r\n              }\r\n            },\r\n            stack: barStack,\r\n            data: seriesData[index],\r\n            barMaxWidth: \"20\",\r\n            barWidth: this.barWidth\r\n          })\r\n          if (this.barGradientShow) {\r\n            this.initColors()\r\n            series[index].itemStyle.normal = {\r\n              barBorderRadius: this.barBorderRadius,\r\n              color: this.currColors[index]\r\n            }\r\n          }\r\n        })\r\n      }\r\n      if (this.barStack && this.barShadowShow) {\r\n        if (legendData && legendData.length !== 1) {\r\n          maxValue = getColumnMaxValue(seriesData)\r\n        }\r\n        if (categoryData) {\r\n          for (var i = 0; i < categoryData.length; i++) {\r\n            maxSeriesData.push(maxValue + 20)\r\n          }\r\n        }\r\n        series.push({\r\n          name: \"阴影\",\r\n          type: \"bar\",\r\n          barGap: \"-100%\",\r\n          z: 0,\r\n          label: {\r\n            normal: {\r\n              show: seriesLabelShow,\r\n              position: seriesLabelPosition\r\n            }\r\n          },\r\n          itemStyle: {\r\n            normal: {\r\n              barBorderRadius: this.barShadowRadius,\r\n              color: this.barShadowColors\r\n            }\r\n          },\r\n          data: maxSeriesData,\r\n          barMaxWidth: \"20\",\r\n          barWidth: this.barWidth\r\n        })\r\n      }\r\n      let barOpt = this.returnAxisOptions(\r\n        legendData,\r\n        categoryData,\r\n        series,\r\n        maxValue,\r\n        minValue\r\n      )\r\n      if (this.tipData.length !== 0) {\r\n        barOpt.tooltip = {\r\n          formatter: function(params) {\r\n            var name = params.name\r\n            var str = ''\r\n            if (_this.tipData.length !== 0) {\r\n              var title = params.data.name + '(' + params.data.country + ')'\r\n              return `${title}<br /> ${params.seriesName}` + ' : ' + params.data.value \r\n            } else {\r\n              params.forEach((item, i) => {\r\n                if (item.seriesName !== '阴影') {\r\n                  str += item.seriesName + ' : ' + item.value + '<br />'\r\n                }\r\n              })\r\n              return `${name}<br /> ${str}`\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return barOpt\r\n    },\r\n    countryLabelFormatter(barOpt) {\r\n      const _this = this\r\n      const label = this.xAxisValue ? \"yAxis\" : \"xAxis\"\r\n      barOpt[label].axisLabel.padding = [0, 0, 0, 12]\r\n      barOpt[label].axisLabel.formatter = function(val, index) {\r\n        if (_this.hasNational) {\r\n          let name = getNationalPng(val)\r\n          return \"{\" + name + \"| }\" + \"  \" + \"{value|\" + val + \"}\"\r\n        } else {\r\n          return val\r\n        }\r\n      }\r\n      barOpt[label].axisLabel.rich = {\r\n        value: {\r\n          lineHeight: 30\r\n        },\r\n        ...getCountryImg()\r\n      }\r\n      return barOpt\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped></style>\r\n"],"sourceRoot":"src/components/echarts/bar"}]}