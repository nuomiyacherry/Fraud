{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js!D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\工作项目\\部反诈\\src\\utils\\fetch.js","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\utils\\fetch.js","mtime":1598758375157},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Promise from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/es6.regexp.search\";\nimport axios from 'axios';\nimport { Message // Loading\n} from 'element-ui';\nimport { router } from '../main';\nimport qs from 'qs'; // eslint-disable-line\n\nimport storage from './storage'; // import {\n//   baseUrl\n// } from 'constants/common'\n\nvar baseurl = require('mock/config').baseurl; // let loadingInstance\n// 创建axios实例\n\n\nvar service = axios.create({\n  // baseURL: process.env.BASE_API, // api的base_url\n  baseURL: baseurl,\n  // api的base_url\n  // timeout: 30000, // 请求超时时间\n  headers: {\n    Accept: 'application/json',\n    // 'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',\n    'Content-Type': 'application/json; charset=utf-8',\n    'Authorization': decodeURIComponent(location.search).substr(1)\n  }\n});\nvar fetch = axios.create({\n  headers: {\n    Accept: 'application/json',\n    // 这里必须使用application/json，不然bodyparser 处理参数会将boolean类型与number类型处理成string\n    'Content-Type': 'application/json; charset=utf-8'\n  }\n}); // request拦截器\n\nservice.interceptors.request.use(function (config) {\n  // console.log(config)\n  // Do something before request is sent\n  // if (config.method === 'post') {\n  //   config.data = qs.stringify(config.data)\n  // }\n\n  /*if (!config.notLoading) {\n      loadingInstance = Loading.service({\n          fullscreen: true,\n          text: '正在加载'\n      })\n  }*/\n  // if(config.headers)\n  if (config.method === 'post') {\n    if (!config.data) {\n      config.data = {};\n    }\n  }\n\n  return config;\n}, function (error) {\n  // loadingInstance.close()\n  Message.error({\n    showClose: true,\n    message: '加载超时',\n    type: 'error'\n  });\n  console.log(error); // for debug\n\n  _Promise.reject(error);\n});\n\nfunction setMockData(url, data) {\n  //eslint-disable-line\n  fetch({\n    method: 'post',\n    url: '/mock/saveMockData',\n    data: {\n      url: url,\n      data: data\n    }\n  }).then(function (res) {\n    process.env.NODE_ENV === 'development' && console.log(res);\n  }).catch(function (err) {\n    process.env.NODE_ENV === 'development' && console.error(err);\n  });\n} // respone拦截器\n\n\nservice.interceptors.response.use(function (response) {\n  // console.log(response, 'response')\n  var data = response.data;\n\n  if (data.sessionOut) {\n    Message.error({\n      showClose: true,\n      message: '页面超时',\n      type: 'error'\n    });\n    setTimeout(function (_) {\n      window.location.href = storage.get('loginUrl');\n    }, 1000);\n  } else {\n    if (data.errorType !== 0) {\n      Message.error({\n        showClose: true,\n        message: data.msg,\n        type: 'error'\n      });\n    } else {\n      // if (process.env.NODE_ENV === 'development' && !process.env.VUE_APP_MOCK) {\n      //   setMockData(response.config.url, data)\n      // }\n      return data;\n    }\n  }\n}, function (error) {\n  Message.error({\n    showClose: true,\n    message: '加载失败',\n    type: 'error'\n  });\n\n  if (error.response) {\n    switch (error.response.status) {\n      // case 404:\n\n      /**未找到页面**/\n      // 404 跳转到404页面\n      // router.replace({\n      //   path: '/error/404'\n      // })\n      // break\n      case 500:\n        /**服务端报错**/\n\n        /*router.replace({\n          path: '/error/500'\n        })*/\n        break;\n    }\n  }\n\n  console.error('Error', error);\n  return error;\n});\nexport default service;",{"version":3,"sources":["D:\\工作项目\\部反诈\\src\\utils\\fetch.js"],"names":["axios","Message","router","qs","storage","baseurl","require","service","create","baseURL","headers","Accept","decodeURIComponent","location","search","substr","fetch","interceptors","request","use","config","method","data","error","showClose","message","type","console","log","reject","setMockData","url","then","res","process","env","NODE_ENV","catch","err","response","sessionOut","setTimeout","_","window","href","get","errorType","msg","status"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n  Message\n  // Loading\n} from 'element-ui'\nimport {\n  router\n} from '../main'\nimport qs from 'qs' // eslint-disable-line\nimport storage from './storage'\n// import {\n//   baseUrl\n// } from 'constants/common'\nconst baseurl = require('mock/config').baseurl\n\n// let loadingInstance\n\n// 创建axios实例\nconst service = axios.create({\n  // baseURL: process.env.BASE_API, // api的base_url\n  baseURL: baseurl, // api的base_url\n  // timeout: 30000, // 请求超时时间\n  headers: {\n    Accept: 'application/json',\n    // 'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',\n    'Content-Type': 'application/json; charset=utf-8',\n    'Authorization': decodeURIComponent(location.search).substr(1)\n  }\n})\n\nconst fetch = axios.create({\n  headers: {\n    Accept: 'application/json',\n    // 这里必须使用application/json，不然bodyparser 处理参数会将boolean类型与number类型处理成string\n    'Content-Type': 'application/json; charset=utf-8'\n  }\n})\n\n// request拦截器\nservice.interceptors.request.use(config => {\n  // console.log(config)\n  // Do something before request is sent\n  // if (config.method === 'post') {\n  //   config.data = qs.stringify(config.data)\n  // }\n  /*if (!config.notLoading) {\n      loadingInstance = Loading.service({\n          fullscreen: true,\n          text: '正在加载'\n      })\n  }*/\n  // if(config.headers)\n  if (config.method === 'post') {\n    if (!config.data) {\n      config.data = {}\n    }\n  }\n\n  return config\n}, error => {\n  // loadingInstance.close()\n  Message.error({\n    showClose: true,\n    message: '加载超时',\n    type: 'error'\n  })\n  console.log(error) // for debug\n  Promise.reject(error)\n})\n\nfunction setMockData(url, data) {//eslint-disable-line\n  fetch({\n    method: 'post',\n    url: '/mock/saveMockData',\n    data: { url, data }\n  }).then(res => {\n    process.env.NODE_ENV === 'development' && console.log(res)\n  })\n    .catch(err => {\n    process.env.NODE_ENV === 'development' && console.error(err)\n  })\n}\n\n// respone拦截器\nservice.interceptors.response.use(\n  response => {\n    // console.log(response, 'response')\n    const data = response.data\n\n    if (data.sessionOut) {\n      Message.error({\n        showClose: true,\n        message: '页面超时',\n        type: 'error'\n      })\n      setTimeout(_ => {\n        window.location.href = storage.get('loginUrl')\n      }, 1000)\n    } else {\n      if (data.errorType !== 0) {\n        Message.error({\n          showClose: true,\n          message: data.msg,\n          type: 'error'\n        })\n      } else {\n        // if (process.env.NODE_ENV === 'development' && !process.env.VUE_APP_MOCK) {\n        //   setMockData(response.config.url, data)\n        // }\n        return data\n      }\n    }\n  },\n  error => {\n    Message.error({\n      showClose: true,\n      message: '加载失败',\n      type: 'error'\n    })\n    if (error.response) {\n      switch (error.response.status) {\n        // case 404:\n        /**未找到页面**/\n        // 404 跳转到404页面\n        // router.replace({\n        //   path: '/error/404'\n        // })\n        // break\n        case 500:\n          /**服务端报错**/\n          /*router.replace({\n            path: '/error/500'\n          })*/\n          break\n      }\n    }\n    console.error('Error', error)\n    return error\n  }\n)\n\nexport default service\n"]}]}