{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js!D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\工作项目\\部反诈\\src\\utils\\map3d\\tool\\color.js","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\utils\\map3d\\tool\\color.js","mtime":1598758375270},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _parseInt from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/parse-int\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\n/* 前端的颜色表示方式多种，一种是以3个或6个十六进制的数子表示，一种是RGB的数字形式，还有一种是直接以颜色的英文来表示。这三种都是不支持透明色的。所以还有RGBA的表式方式，在RGB的的基础上加入了Alpha透明，使网页可以展现更加复杂绚丽的效果。\n\n随机颜色\n在平时的码农日常中，经常会用到求随机颜色的地方，下面是我总结的几种简单的实现随机颜色的方式：\n\n十六进制格式（#000000-#FFFFFF）\n第一种是比较简单的方法，这种方法是先随机生成ffffff以内16进制数，然后判断位数，少于6位的用while循环在前面加0，凑够6位。 */\n// 随机生成十六进制颜色\nexport function randomHex1() {\n  // 生成ffffff以内16进制数\n  var hex = Math.floor(Math.random() * 16777216).toString(16);\n\n  while (hex.length < 6) {\n    // while循环判断hex位数，少于6位前面加0凑够6位\n    hex = '0' + hex;\n  } // 返回‘#’开头16进制颜色\n\n\n  return '#' + hex;\n}\n/*\n还有一种比较方便但是比较难懂的方法，需要用到位运算。\n按执行顺序可以分为以下六步：\n先执行Math.random() * 0x1000000，其中0x1000000=0xffffff+1，因为Math.random()取不到1，所以+1，这样就会生成一个1-16777216(不包含)以内的浮点数。\n然后执行<<0，这是取整运算，去掉后面的小数点。这时为一个16777216(不包含)以内的十进制数。\n之后执行.toString(16)，把十进制数转化为六位以下16进制数。\n再后执行'00000'+，这时因为之前生成的16进制数最少可能仅一位，在前面加上5个0。\n最后执行.substr(-6)，是去从-6开始的后面所有字符串，也就是最后6位数。\n*/\n\nexport function randomHex() {\n  // 随机生成十六进制颜色\n  return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);\n} // RGB格式\n\nexport function randomRgb() {\n  // 随机生成RGB颜色\n  var r = Math.floor(Math.random() * 256); // 随机生成256以内r值\n\n  var g = Math.floor(Math.random() * 256); // 随机生成256以内g值\n\n  var b = Math.floor(Math.random() * 256); // 随机生成256以内b值\n\n  return \"rgb(\".concat(r, \",\").concat(g, \",\").concat(b, \")\"); // 返回rgb(r,g,b)格式颜色\n} // RGBA格式\n\nexport function randomRgba() {\n  // 随机生成RGBA颜色\n  var r = Math.floor(Math.random() * 256); // 随机生成256以内r值\n\n  var g = Math.floor(Math.random() * 256); // 随机生成256以内g值\n\n  var b = Math.floor(Math.random() * 256); // 随机生成256以内b值\n\n  var alpha = Math.random(); // 随机生成1以内a值\n\n  return \"rgb(\".concat(r, \",\").concat(g, \",\").concat(b, \",\").concat(alpha, \")\"); // 返回rgba(r,g,b,a)格式颜色\n}\n/* 颜色格式转化\n在编码过程中，经常会遇到要将颜色格式相互转化的问题,其中十六进制格式和RGB格式是可以相互转化的，但是RGBA格式由于多了前两者没有的Alpha透明属性，所以和前两者转化会丢失Alpha值，不建议进行转化，下面是颜色转化的方法：\n*/\n// 十六进制转为RGBA\n\nexport function hex2Rgba(hex) {\n  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  // 十六进制转为RGB\n  var rgb = []; // 定义rgb数组\n  // eslint-disable-next-line no-useless-escape\n\n  if (/^\\#[0-9A-F]{3}$/i.test(hex)) {\n    // 判断传入是否为#三位十六进制数\n    var sixHex = '#';\n    hex.replace(/[0-9A-F]/gi, function (kw) {\n      // 把三位16进制数转化为六位\n      sixHex += kw + kw;\n    });\n    hex = sixHex; // 保存回hex\n  }\n\n  if (/^#[0-9A-F]{6}$/i.test(hex)) {\n    // 判断传入是否为#六位十六进制数\n    hex.replace(/[0-9A-F]{2}/gi, function (kw) {\n      // 十六进制转化为十进制并存如数组\n      rgb.push(eval('0x' + kw)); // eslint-disable-line\n    }); // 输出RGB格式颜色\n\n    return \"rgba(\".concat(rgb.join(','), \", \").concat(alpha, \")\");\n  } else {\n    console.log(\"Input \".concat(hex, \" is wrong!\"));\n    return \"rgba(0, 0, 0, \".concat(alpha, \")\");\n  }\n}\nexport function rgbToRgba(rgb, alpha) {\n  var nums = rgb.split(',').map(function (item) {\n    var index = item.indexOf('(');\n\n    if (index > -1) {\n      item = item.substr(index + 1);\n    }\n\n    return _parseInt(item);\n  });\n  return \"rgba(\".concat(nums.join(', '), \", \").concat(alpha, \")\");\n} // RGB转为十六进制\n\nexport function rgb2Hex(rgb) {\n  // eslint-disable-next-line no-useless-escape\n  if (/^rgb\\((\\d{1,3}\\,){2}\\d{1,3}\\)$/i.test(rgb)) {\n    // test RGB\n    var hex = '#'; // 定义十六进制颜色变量\n\n    rgb.replace(/\\d{1,3}/g, function (kw) {\n      // 提取rgb数字\n      kw = _parseInt(kw).toString(16); // 转为十六进制\n\n      kw = kw.length < 2 ? 0 + kw : kw; // 判断位数，保证两位\n\n      hex += kw; // 拼接\n    });\n    return hex; // 返回十六进制\n  } else {\n    console.log(\"Input \".concat(rgb, \" is wrong!\")); // 输入格式错误,返回#000\n\n    return '#000';\n  }\n}\nexport function rgbToHsl(r, g, b) {\n  r = r / 255;\n  g = g / 255;\n  b = b / 255;\n  var max = Math.max(r, g, b),\n      min = Math.min(r, g, b),\n      L = (max + min) / 2;\n  var H, S;\n\n  if (max === min) {\n    H = 0;\n    S = 0;\n  } else {\n    var d = max - min;\n    S = L > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n    switch (max) {\n      case r:\n        H = 60 * ((g - b) / d + (g < b ? 6 : 0));\n        break;\n\n      case g:\n        H = 60 * ((b - r) / d + 2);\n        break;\n\n      case b:\n        H = 60 * ((r - g) / d + 4);\n        break;\n    }\n  }\n\n  return [H, S, L];\n}",{"version":3,"sources":["D:\\工作项目\\部反诈\\src\\utils\\map3d\\tool\\color.js"],"names":["randomHex1","hex","Math","floor","random","toString","length","randomHex","substr","randomRgb","r","g","b","randomRgba","alpha","hex2Rgba","rgb","test","sixHex","replace","kw","push","eval","join","console","log","rgbToRgba","nums","split","map","item","index","indexOf","rgb2Hex","rgbToHsl","max","min","L","H","S","d"],"mappings":"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","sourcesContent":["/* 前端的颜色表示方式多种，一种是以3个或6个十六进制的数子表示，一种是RGB的数字形式，还有一种是直接以颜色的英文来表示。这三种都是不支持透明色的。所以还有RGBA的表式方式，在RGB的的基础上加入了Alpha透明，使网页可以展现更加复杂绚丽的效果。\n\n随机颜色\n在平时的码农日常中，经常会用到求随机颜色的地方，下面是我总结的几种简单的实现随机颜色的方式：\n\n十六进制格式（#000000-#FFFFFF）\n第一种是比较简单的方法，这种方法是先随机生成ffffff以内16进制数，然后判断位数，少于6位的用while循环在前面加0，凑够6位。 */\n// 随机生成十六进制颜色\nexport function randomHex1() {\n  // 生成ffffff以内16进制数\n  let hex = Math.floor(Math.random() * 16777216).toString(16)\n  while (hex.length < 6) {\n    // while循环判断hex位数，少于6位前面加0凑够6位\n    hex = '0' + hex\n  }\n  // 返回‘#’开头16进制颜色\n  return '#' + hex\n}\n\n/*\n还有一种比较方便但是比较难懂的方法，需要用到位运算。\n按执行顺序可以分为以下六步：\n先执行Math.random() * 0x1000000，其中0x1000000=0xffffff+1，因为Math.random()取不到1，所以+1，这样就会生成一个1-16777216(不包含)以内的浮点数。\n然后执行<<0，这是取整运算，去掉后面的小数点。这时为一个16777216(不包含)以内的十进制数。\n之后执行.toString(16)，把十进制数转化为六位以下16进制数。\n再后执行'00000'+，这时因为之前生成的16进制数最少可能仅一位，在前面加上5个0。\n最后执行.substr(-6)，是去从-6开始的后面所有字符串，也就是最后6位数。\n*/\nexport function randomHex() {\n  // 随机生成十六进制颜色\n  return (\n    '#' + ('00000' + ((Math.random() * 0x1000000) << 0).toString(16)).substr(-6)\n  )\n}\n\n// RGB格式\nexport function randomRgb() {\n  // 随机生成RGB颜色\n  const r = Math.floor(Math.random() * 256) // 随机生成256以内r值\n  const g = Math.floor(Math.random() * 256) // 随机生成256以内g值\n  const b = Math.floor(Math.random() * 256) // 随机生成256以内b值\n  return `rgb(${r},${g},${b})` // 返回rgb(r,g,b)格式颜色\n}\n\n// RGBA格式\nexport function randomRgba() {\n  // 随机生成RGBA颜色\n  const r = Math.floor(Math.random() * 256) // 随机生成256以内r值\n  const g = Math.floor(Math.random() * 256) // 随机生成256以内g值\n  const b = Math.floor(Math.random() * 256) // 随机生成256以内b值\n  const alpha = Math.random() // 随机生成1以内a值\n  return `rgb(${r},${g},${b},${alpha})` // 返回rgba(r,g,b,a)格式颜色\n}\n\n/* 颜色格式转化\n在编码过程中，经常会遇到要将颜色格式相互转化的问题,其中十六进制格式和RGB格式是可以相互转化的，但是RGBA格式由于多了前两者没有的Alpha透明属性，所以和前两者转化会丢失Alpha值，不建议进行转化，下面是颜色转化的方法：\n*/\n// 十六进制转为RGBA\nexport function hex2Rgba(hex, alpha = 1) {\n  // 十六进制转为RGB\n  const rgb = [] // 定义rgb数组\n  // eslint-disable-next-line no-useless-escape\n  if (/^\\#[0-9A-F]{3}$/i.test(hex)) {\n    // 判断传入是否为#三位十六进制数\n    let sixHex = '#'\n    hex.replace(/[0-9A-F]/gi, function(kw) {\n      // 把三位16进制数转化为六位\n      sixHex += kw + kw\n    })\n    hex = sixHex // 保存回hex\n  }\n  if (/^#[0-9A-F]{6}$/i.test(hex)) {\n    // 判断传入是否为#六位十六进制数\n    hex.replace(/[0-9A-F]{2}/gi, function(kw) {\n      // 十六进制转化为十进制并存如数组\n      rgb.push(eval('0x' + kw)) // eslint-disable-line\n    })\n    // 输出RGB格式颜色\n    return `rgba(${rgb.join(',')}, ${alpha})`\n  } else {\n    console.log(`Input ${hex} is wrong!`)\n    return `rgba(0, 0, 0, ${alpha})`\n  }\n}\n\nexport function rgbToRgba(rgb, alpha) {\n  const nums = rgb.split(',').map(item => {\n    const index = item.indexOf('(')\n    if (index > -1) {\n      item = item.substr(index + 1)\n    }\n    return parseInt(item)\n  })\n\n  return `rgba(${nums.join(', ')}, ${alpha})`\n}\n\n// RGB转为十六进制\nexport function rgb2Hex(rgb) {\n  // eslint-disable-next-line no-useless-escape\n  if (/^rgb\\((\\d{1,3}\\,){2}\\d{1,3}\\)$/i.test(rgb)) {\n    // test RGB\n    let hex = '#' // 定义十六进制颜色变量\n    rgb.replace(/\\d{1,3}/g, function(kw) {\n      // 提取rgb数字\n      kw = parseInt(kw).toString(16) // 转为十六进制\n      kw = kw.length < 2 ? 0 + kw : kw // 判断位数，保证两位\n      hex += kw // 拼接\n    })\n    return hex // 返回十六进制\n  } else {\n    console.log(`Input ${rgb} is wrong!`)\n    // 输入格式错误,返回#000\n    return '#000'\n  }\n}\n\nexport function rgbToHsl(r, g, b) {\n  r = r / 255\n  g = g / 255\n  b = b / 255\n  const max = Math.max(r, g, b),\n    min = Math.min(r, g, b),\n    L = (max + min) / 2\n\n  let H, S\n\n  if (max === min) {\n    H = 0\n    S = 0\n  } else {\n    const d = max - min\n    S = L > 0.5 ? d / (2 - max - min) : d / (max + min)\n    switch (max) {\n      case r:\n        H = 60 * ((g - b) / d + (g < b ? 6 : 0))\n        break\n      case g:\n        H = 60 * ((b - r) / d + 2)\n        break\n      case b:\n        H = 60 * ((r - g) / d + 4)\n        break\n    }\n  }\n  return [H, S, L]\n}\n"]}]}