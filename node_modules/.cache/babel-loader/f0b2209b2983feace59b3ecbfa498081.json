{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js!D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\工作项目\\部反诈\\src\\utils\\map3d\\components\\flyline\\index.js","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\utils\\map3d\\components\\flyline\\index.js","mtime":1598758375212},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.float32-array\";\nimport _toConsumableArray from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.string.starts-with\";\nimport _getIterator from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/get-iterator\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _objectSpread from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport * as THREE from 'three';\nimport merge from 'lodash/merge';\nimport extend from 'lodash/extend';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { createCanvas } from '../../tool/canvas';\nimport { COLOR, pointCount, flylineOpt } from './options';\nimport { getTexture } from '../../core/texture';\n\nvar Flyline =\n/*#__PURE__*/\nfunction () {\n  function Flyline(context, options) {\n    _classCallCheck(this, Flyline);\n\n    var necessaryExtendProps = ['standardLayout', 'mapCenterVectors', // 'coordToVector3',\n    'scene', 'TWEEN', 'tweenEasing'];\n    this.defaultOptions = _objectSpread({}, flylineOpt, {\n      data: []\n    });\n    this.initOptions(options);\n    extend(this, pick(context, necessaryExtendProps));\n    this.context = context;\n    this.textures = [];\n    this.init();\n  }\n\n  _createClass(Flyline, [{\n    key: \"init\",\n    value: function init() {\n      this.symbols = [];\n      this.symbolOpts = [];\n      this.allFlylines = null;\n      this.drawFlylines(this.options.data);\n    }\n  }, {\n    key: \"initOptions\",\n    value: function initOptions(options) {\n      var _opt = omit(options, ['data']),\n          _flylineOpt = merge({}, flylineOpt, _opt);\n\n      options.data && (this.defaultOptions.data = cloneDeep(options.data).map(function (item) {\n        return merge({}, _flylineOpt, item);\n      }));\n      this.options = merge({}, this.defaultOptions, _flylineOpt);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options, repaint) {\n      var _this = this;\n\n      if (repaint) {\n        this.allFlylines.forEach(function (item) {\n          _this.context.remove(item);\n        });\n        this.initOptions(options);\n        this.init();\n      } else {\n        var data = cloneDeep(options).map(function (item) {\n          return merge({}, flylineOpt, item);\n        });\n        this.drawFlylines(data);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.symbolAnimate();\n      this.flylineTween && this.flylineTween.update();\n    }\n  }, {\n    key: \"symbolAnimate\",\n    value: function symbolAnimate() {\n      this.symbols.forEach(function (item) {\n        item.progress > 1.0 && (item.progress = 0);\n        item.progress += item.speed;\n\n        var _ref = item.curve.getPoint(item.progress) || [],\n            x = _ref.x,\n            y = _ref.y,\n            z = _ref.z;\n\n        x && item.mesh.position.set(x, y, z);\n      });\n    }\n  }, {\n    key: \"flylineAnimate\",\n    value: function flylineAnimate() {\n      var _this2 = this;\n\n      !this.flylineTween && (this.flylineTween = new this.TWEEN.Group());\n      this.flylineTween.removeAll();\n      this.allFlylines.children.forEach(function (group) {\n        var line = group.getObjectByName('flyline');\n        if (!line || !line.tween) return;\n        var _line$tween = line.tween,\n            animationDuration = _line$tween.animationDuration,\n            animationEasing = _line$tween.animationEasing,\n            points = _line$tween.points;\n        new _this2.TWEEN.Tween({\n          endPointIndex: 0\n        }, _this2.flylineTween).to({\n          endPointIndex: pointCount\n        }, animationDuration).easing(_this2.tweenEasing[animationEasing]).onUpdate(function (obj) {\n          var endPointIndex = Math.ceil(obj.endPointIndex); // 这种设置在不是BufferGeometry时才有效果\n          // line.geometry.vectices = new THREE.QuadraticBezierCurve3(points.slice(0, endPointIndex))\n\n          line.geometry.setFromPoints(points.slice(0, endPointIndex));\n          line.geometry.verticesNeedUpdate = true;\n        }).start();\n      });\n    }\n  }, {\n    key: \"drawFlylines\",\n    value: function drawFlylines(data) {\n      var _this3 = this;\n\n      var group = new THREE.Group();\n      group.name = 'flylines';\n      data && data.forEach(function (item) {\n        var g = new THREE.Group(),\n            source = item.source,\n            target = item.target,\n            lineStyle = item.lineStyle,\n            symbolStyle = item.symbolStyle,\n            sname = source.name,\n            scenter = source.center,\n            tname = target.name,\n            tcenter = target.center,\n            maxHeight = lineStyle.maxHeight,\n            name = \"\".concat(sname, \"-\").concat(tname),\n            spos = scenter ? _this3.context.coordToVector3(scenter.slice(0, 2), scenter[3] || 0) : _this3.mapCenterVectors[sname],\n            tpos = tcenter ? _this3.context.coordToVector3(tcenter.slice(0, 2), tcenter[3] || 0) : _this3.mapCenterVectors[tname];\n        if (!spos || !tpos) return;\n\n        var _spos = _slicedToArray(spos, 3),\n            x1 = _spos[0],\n            y1 = _spos[1],\n            z1 = _spos[2],\n            _tpos = _slicedToArray(tpos, 3),\n            x2 = _tpos[0],\n            y2 = _tpos[1],\n            z2 = _tpos[2],\n            curve = new THREE.QuadraticBezierCurve3(new THREE.Vector3(x1, y1, z1), new THREE.Vector3((x1 + x2) / 2, (y1 + y2) / 2, // maxHeight\n        maxHeight / _this3.standardLayout.zoom), new THREE.Vector3(x2, y2, z2)),\n            points = curve.getPoints(pointCount),\n            line = _this3.drawFlyline(points, lineStyle);\n\n        _this3.symbolOpts.push(_objectSpread({}, symbolStyle, {\n          position: [x1, y1, z1],\n          name: name,\n          curve: curve\n        }));\n\n        g.add(line);\n        g.name = name;\n        group.add(g);\n      });\n      this.scene.add(group);\n      this.allFlylines = group;\n      this.drawSymbols();\n      this.flylineAnimate();\n    }\n  }, {\n    key: \"drawFlyline\",\n    value: function drawFlyline(points, _ref2) {\n      var _ref2$color = _ref2.color,\n          color = _ref2$color === void 0 ? COLOR : _ref2$color,\n          _ref2$opacity = _ref2.opacity,\n          opacity = _ref2$opacity === void 0 ? 1 : _ref2$opacity,\n          _ref2$show = _ref2.show,\n          show = _ref2$show === void 0 ? true : _ref2$show,\n          _ref2$type = _ref2.type,\n          type = _ref2$type === void 0 ? 'solid' : _ref2$type,\n          _ref2$dashSize = _ref2.dashSize,\n          dashSize = _ref2$dashSize === void 0 ? 3 : _ref2$dashSize,\n          _ref2$gapSize = _ref2.gapSize,\n          gapSize = _ref2$gapSize === void 0 ? 1 : _ref2$gapSize,\n          animationEasing = _ref2.animationEasing,\n          animation = _ref2.animation,\n          animationDuration = _ref2.animationDuration;\n\n      var _points = animation ? points.slice(0, 1) : points,\n          geometry = new THREE.BufferGeometry().setFromPoints(_points);\n\n      var material;\n\n      if (type === 'solid') {\n        material = new THREE.LineBasicMaterial({\n          color: color,\n          transparent: true,\n          opacity: opacity,\n          side: THREE.DoubleSide\n        });\n      } else {\n        material = new THREE.LineDashedMaterial({\n          color: color,\n          transparent: true,\n          opacity: opacity,\n          side: THREE.DoubleSide,\n          // linewidth: 2,\n          dashSize: dashSize / this.standardLayout.zoom,\n          gapSize: gapSize / this.standardLayout.zoom\n        });\n      }\n\n      var line = new THREE.Line(geometry, material);\n      type === 'dashed' && line.computeLineDistances(); // 不可或缺的，若无，则线段不能显示为虚线\n\n      line.name = 'flyline';\n      animation && (line.tween = {\n        points: points,\n        animationEasing: animationEasing,\n        animationDuration: animationDuration\n      });\n      line.visible = show;\n      return line;\n    }\n  }, {\n    key: \"drawSymbols\",\n    value: function () {\n      var _drawSymbols = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, opt, curve, name, speed, symbol, g;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context.prev = 3;\n                _iterator = _getIterator(this.symbolOpts);\n\n              case 5:\n                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                  _context.next = 17;\n                  break;\n                }\n\n                opt = _step.value;\n                curve = opt.curve;\n                name = opt.name;\n                speed = opt.speed;\n                _context.next = 12;\n                return this.drawSymbol(opt);\n\n              case 12:\n                symbol = _context.sent;\n\n                if (symbol) {\n                  this.symbols.push({\n                    name: name,\n                    curve: curve,\n                    speed: speed,\n                    progress: 0,\n                    mesh: symbol\n                  });\n                  g = this.scene.getObjectByName(name) || this.scene;\n                  g.add(symbol);\n                }\n\n              case 14:\n                _iteratorNormalCompletion = true;\n                _context.next = 5;\n                break;\n\n              case 17:\n                _context.next = 23;\n                break;\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](3);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 23:\n                _context.prev = 23;\n                _context.prev = 24;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 26:\n                _context.prev = 26;\n\n                if (!_didIteratorError) {\n                  _context.next = 29;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 29:\n                return _context.finish(26);\n\n              case 30:\n                return _context.finish(23);\n\n              case 31:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 19, 23, 31], [24,, 26, 30]]);\n      }));\n\n      function drawSymbols() {\n        return _drawSymbols.apply(this, arguments);\n      }\n\n      return drawSymbols;\n    }()\n  }, {\n    key: \"drawSymbol\",\n    value: function () {\n      var _drawSymbol = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(_ref3) {\n        var symbol, size, color, opacity, position, shadow, mesh, texture, _mesh$position;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                symbol = _ref3.symbol, size = _ref3.size, color = _ref3.color, opacity = _ref3.opacity, position = _ref3.position, shadow = _ref3.shadow;\n\n                if (!symbol.startsWith('image://')) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 4;\n                return getTexture(symbol);\n\n              case 4:\n                texture = _context2.sent;\n                mesh = this.drawDotted({\n                  color: color,\n                  shadow: shadow,\n                  size: size,\n                  texture: texture\n                });\n                _context2.next = 16;\n                break;\n\n              case 8:\n                _context2.t0 = symbol;\n                _context2.next = _context2.t0 === 'dotted' ? 11 : _context2.t0 === 'ball' ? 14 : 16;\n                break;\n\n              case 11:\n                !this.dottedTexture && (this.dottedTexture = this.drawSymbolTexture(color, shadow));\n                mesh = this.drawDotted({\n                  color: color,\n                  shadow: shadow,\n                  size: size,\n                  texture: this.dottedTexture\n                });\n                return _context2.abrupt(\"break\", 16);\n\n              case 14:\n                mesh = this.drawBall({\n                  color: color,\n                  opacity: opacity,\n                  size: size\n                });\n                return _context2.abrupt(\"break\", 16);\n\n              case 16:\n                if (mesh) {\n                  (_mesh$position = mesh.position).set.apply(_mesh$position, _toConsumableArray(position));\n\n                  mesh.renderOrder = 10;\n                  mesh.name = 'flyline-symbol';\n                }\n\n                return _context2.abrupt(\"return\", mesh);\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function drawSymbol(_x) {\n        return _drawSymbol.apply(this, arguments);\n      }\n\n      return drawSymbol;\n    }()\n  }, {\n    key: \"drawDotted\",\n    value: function drawDotted(_ref4) {\n      var color = _ref4.color,\n          size = _ref4.size,\n          texture = _ref4.texture;\n      var material = new THREE.PointsMaterial({\n        color: color,\n        size: size * 3,\n        // opacity,\n        transparent: true,\n        blending: THREE.AdditiveBlending,\n        depthTest: false,\n        map: texture\n      }),\n          geometry = new THREE.BufferGeometry(),\n          // geometry.vertices.push(\n      //   new THREE.Vector3(0, 0, 0)\n      // )\n      positions = new Float32Array(3);\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n      return new THREE.Points(geometry, material);\n    }\n  }, {\n    key: \"drawBall\",\n    value: function drawBall(_ref5) {\n      var _ref5$color = _ref5.color,\n          color = _ref5$color === void 0 ? 0xffffff : _ref5$color,\n          _ref5$opacity = _ref5.opacity,\n          opacity = _ref5$opacity === void 0 ? 1 : _ref5$opacity,\n          _ref5$size = _ref5.size,\n          size = _ref5$size === void 0 ? 10 : _ref5$size;\n      var material = new THREE.MeshBasicMaterial({\n        color: color,\n        transparent: true,\n        opacity: opacity,\n        depthTest: false\n      }),\n          geometry = new THREE.SphereGeometry(size / this.standardLayout.zoom, 100, 100);\n      return new THREE.Mesh(geometry, material);\n    }\n  }, {\n    key: \"drawSymbolTexture\",\n    value: function drawSymbolTexture(color, shadow) {\n      var size = 32,\n          _createCanvas = createCanvas(size, size),\n          canvas = _createCanvas.canvas,\n          ctx = _createCanvas.ctx;\n\n      var gradient = color;\n\n      if (shadow) {\n        gradient = ctx.createRadialGradient(size / 2, size / 2, 0, size / 2, size / 2, size / 2);\n        gradient.addColorStop(0, color);\n        gradient.addColorStop(1, 'transparent');\n      }\n\n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, size, size);\n      var texture = new THREE.Texture(canvas);\n      texture.needsUpdate = true;\n      return texture;\n    }\n  }]);\n\n  return Flyline;\n}();\n\nexport { Flyline as default };",{"version":3,"sources":["D:\\工作项目\\部反诈\\src\\utils\\map3d\\components\\flyline\\index.js"],"names":["THREE","merge","extend","omit","pick","cloneDeep","createCanvas","COLOR","pointCount","flylineOpt","getTexture","Flyline","context","options","necessaryExtendProps","defaultOptions","data","initOptions","textures","init","symbols","symbolOpts","allFlylines","drawFlylines","_opt","_flylineOpt","map","item","repaint","forEach","remove","symbolAnimate","flylineTween","update","progress","speed","curve","getPoint","x","y","z","mesh","position","set","TWEEN","Group","removeAll","children","group","line","getObjectByName","tween","animationDuration","animationEasing","points","Tween","endPointIndex","to","easing","tweenEasing","onUpdate","obj","Math","ceil","geometry","setFromPoints","slice","verticesNeedUpdate","start","name","g","source","target","lineStyle","symbolStyle","sname","scenter","center","tname","tcenter","maxHeight","spos","coordToVector3","mapCenterVectors","tpos","x1","y1","z1","x2","y2","z2","QuadraticBezierCurve3","Vector3","standardLayout","zoom","getPoints","drawFlyline","push","add","scene","drawSymbols","flylineAnimate","color","opacity","show","type","dashSize","gapSize","animation","_points","BufferGeometry","material","LineBasicMaterial","transparent","side","DoubleSide","LineDashedMaterial","Line","computeLineDistances","visible","opt","drawSymbol","symbol","size","shadow","startsWith","texture","drawDotted","dottedTexture","drawSymbolTexture","drawBall","renderOrder","PointsMaterial","blending","AdditiveBlending","depthTest","positions","Float32Array","addAttribute","BufferAttribute","Points","MeshBasicMaterial","SphereGeometry","Mesh","canvas","ctx","gradient","createRadialGradient","addColorStop","fillStyle","fillRect","Texture","needsUpdate"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport merge from 'lodash/merge'\nimport extend from 'lodash/extend'\nimport omit from 'lodash/omit'\nimport pick from 'lodash/pick'\nimport cloneDeep from 'lodash/cloneDeep'\nimport {createCanvas} from '../../tool/canvas'\nimport {COLOR, pointCount, flylineOpt} from './options'\nimport {getTexture} from '../../core/texture'\n\nexport default class Flyline {\n  constructor(context, options) {\n    const necessaryExtendProps = [\n      'standardLayout',\n      'mapCenterVectors',\n      // 'coordToVector3',\n      'scene',\n      'TWEEN',\n      'tweenEasing'\n    ]\n    this.defaultOptions = {\n      ...flylineOpt,\n      data: []\n    }\n    this.initOptions(options)\n    extend(this, pick(context, necessaryExtendProps))\n    this.context = context\n    this.textures = []\n    this.init()\n  }\n\n  init() {\n    this.symbols = []\n    this.symbolOpts = []\n    this.allFlylines = null\n    this.drawFlylines(this.options.data)\n  }\n\n  initOptions(options) {\n    const _opt = omit(options, ['data']),\n      _flylineOpt = merge({}, flylineOpt, _opt)\n    options.data &&\n      (this.defaultOptions.data = cloneDeep(options.data).map(item =>\n        merge({}, _flylineOpt, item)\n      ))\n    this.options = merge({}, this.defaultOptions, _flylineOpt)\n  }\n\n  setOptions(options, repaint) {\n    if (repaint) {\n      this.allFlylines.forEach(item => {\n        this.context.remove(item)\n      })\n      this.initOptions(options)\n      this.init()\n    } else {\n      const data = cloneDeep(options).map(item => merge({}, flylineOpt, item))\n      this.drawFlylines(data)\n    }\n  }\n\n  render() {\n    this.symbolAnimate()\n    this.flylineTween && this.flylineTween.update()\n  }\n\n  symbolAnimate() {\n    this.symbols.forEach(item => {\n      item.progress > 1.0 && (item.progress = 0)\n      item.progress += item.speed\n      const {x, y, z} = item.curve.getPoint(item.progress) || []\n      x && item.mesh.position.set(x, y, z)\n    })\n  }\n\n  flylineAnimate() {\n    !this.flylineTween && (this.flylineTween = new this.TWEEN.Group())\n    this.flylineTween.removeAll()\n\n    this.allFlylines.children.forEach(group => {\n      const line = group.getObjectByName('flyline')\n      if (!line || !line.tween) return\n      const {animationDuration, animationEasing, points} = line.tween\n      new this.TWEEN.Tween({endPointIndex: 0}, this.flylineTween)\n        .to({endPointIndex: pointCount}, animationDuration)\n        .easing(this.tweenEasing[animationEasing])\n        .onUpdate(obj => {\n          const endPointIndex = Math.ceil(obj.endPointIndex)\n          // 这种设置在不是BufferGeometry时才有效果\n          // line.geometry.vectices = new THREE.QuadraticBezierCurve3(points.slice(0, endPointIndex))\n          line.geometry.setFromPoints(points.slice(0, endPointIndex))\n          line.geometry.verticesNeedUpdate = true\n        })\n        .start()\n    })\n  }\n\n  drawFlylines(data) {\n    const group = new THREE.Group()\n    group.name = 'flylines'\n    data &&\n      data.forEach(item => {\n        const g = new THREE.Group(),\n          {source, target, lineStyle, symbolStyle} = item,\n          {name: sname, center: scenter} = source,\n          {name: tname, center: tcenter} = target,\n          {maxHeight} = lineStyle,\n          name = `${sname}-${tname}`,\n          spos = scenter\n            ? this.context.coordToVector3(scenter.slice(0, 2), scenter[3] || 0)\n            : this.mapCenterVectors[sname],\n          tpos = tcenter\n            ? this.context.coordToVector3(tcenter.slice(0, 2), tcenter[3] || 0)\n            : this.mapCenterVectors[tname]\n        if (!spos || !tpos) return\n        const [x1, y1, z1] = spos,\n          [x2, y2, z2] = tpos,\n          curve = new THREE.QuadraticBezierCurve3(\n            new THREE.Vector3(x1, y1, z1),\n            new THREE.Vector3(\n              (x1 + x2) / 2,\n              (y1 + y2) / 2,\n              // maxHeight\n              maxHeight / this.standardLayout.zoom\n            ),\n            new THREE.Vector3(x2, y2, z2)\n          ),\n          points = curve.getPoints(pointCount),\n          line = this.drawFlyline(points, lineStyle)\n        this.symbolOpts.push({\n          ...symbolStyle,\n          position: [x1, y1, z1],\n          name,\n          curve\n        })\n        g.add(line)\n        g.name = name\n        group.add(g)\n      })\n    this.scene.add(group)\n    this.allFlylines = group\n    this.drawSymbols()\n    this.flylineAnimate()\n  }\n\n  drawFlyline(\n    points,\n    {\n      color = COLOR,\n      opacity = 1,\n      show = true,\n      type = 'solid',\n      dashSize = 3,\n      gapSize = 1,\n      animationEasing,\n      animation,\n      animationDuration\n    }\n  ) {\n    const _points = animation ? points.slice(0, 1) : points,\n      geometry = new THREE.BufferGeometry().setFromPoints(_points)\n    let material\n    if (type === 'solid') {\n      material = new THREE.LineBasicMaterial({\n        color,\n        transparent: true,\n        opacity,\n        side: THREE.DoubleSide\n      })\n    } else {\n      material = new THREE.LineDashedMaterial({\n        color,\n        transparent: true,\n        opacity,\n        side: THREE.DoubleSide,\n        // linewidth: 2,\n        dashSize: dashSize / this.standardLayout.zoom,\n        gapSize: gapSize / this.standardLayout.zoom\n      })\n    }\n    const line = new THREE.Line(geometry, material)\n\n    type === 'dashed' && line.computeLineDistances() // 不可或缺的，若无，则线段不能显示为虚线\n    line.name = 'flyline'\n    animation &&\n      (line.tween = {\n        points,\n        animationEasing,\n        animationDuration\n      })\n    line.visible = show\n    return line\n  }\n\n  async drawSymbols() {\n    for (let opt of this.symbolOpts) {\n      const {curve, name, speed} = opt,\n        symbol = await this.drawSymbol(opt)\n      if (symbol) {\n        this.symbols.push({\n          name,\n          curve,\n          speed,\n          progress: 0,\n          mesh: symbol\n        })\n        const g = this.scene.getObjectByName(name) || this.scene\n        g.add(symbol)\n      }\n    }\n  }\n\n  async drawSymbol({symbol, size, color, opacity, position, shadow}) {\n    let mesh\n    if (symbol.startsWith('image://')) {\n      const texture = await getTexture(symbol)\n      mesh = this.drawDotted({color, shadow, size, texture})\n    } else {\n      switch (symbol) {\n        case 'dotted':\n          !this.dottedTexture &&\n            (this.dottedTexture = this.drawSymbolTexture(color, shadow))\n          mesh = this.drawDotted({\n            color,\n            shadow,\n            size,\n            texture: this.dottedTexture\n          })\n          break\n        case 'ball':\n          mesh = this.drawBall({color, opacity, size})\n          break\n      }\n    }\n    if (mesh) {\n      mesh.position.set(...position)\n\n      mesh.renderOrder = 10\n      mesh.name = 'flyline-symbol'\n    }\n    return mesh\n  }\n\n  drawDotted({color, size, texture}) {\n    const material = new THREE.PointsMaterial({\n        color,\n        size: size * 3,\n        // opacity,\n        transparent: true,\n        blending: THREE.AdditiveBlending,\n        depthTest: false,\n        map: texture\n      }),\n      geometry = new THREE.BufferGeometry(),\n      // geometry.vertices.push(\n      //   new THREE.Vector3(0, 0, 0)\n      // )\n      positions = new Float32Array(3)\n    geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n    return new THREE.Points(geometry, material)\n  }\n\n  drawBall({color = 0xffffff, opacity = 1, size = 10}) {\n    const material = new THREE.MeshBasicMaterial({\n        color,\n        transparent: true,\n        opacity,\n        depthTest: false\n      }),\n      geometry = new THREE.SphereGeometry(\n        size / this.standardLayout.zoom,\n        100,\n        100\n      )\n    return new THREE.Mesh(geometry, material)\n  }\n\n  drawSymbolTexture(color, shadow) {\n    const size = 32,\n      {canvas, ctx} = createCanvas(size, size)\n    let gradient = color\n    if (shadow) {\n      gradient = ctx.createRadialGradient(\n        size / 2,\n        size / 2,\n        0,\n        size / 2,\n        size / 2,\n        size / 2\n      )\n      gradient.addColorStop(0, color)\n      gradient.addColorStop(1, 'transparent')\n    }\n    ctx.fillStyle = gradient\n    ctx.fillRect(0, 0, size, size)\n    const texture = new THREE.Texture(canvas)\n    texture.needsUpdate = true\n    return texture\n  }\n}\n"]}]}