{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js!D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\工作项目\\部反诈\\src\\views\\overview\\data.js","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\views\\overview\\data.js","mtime":1598758387117},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Promise from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport _objectSpread from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.function.name\";\nimport { getCoord, mapName } from '@/constants/worldsForMap'; //eslint-disable-line\n\nvar provinces = ['北京市', '天津市', '河北省', '山西省', '内蒙古自治区', '黑龙江省', '吉林省', '辽宁省', '上海市', '山东省', '江苏省', '安徽省', '浙江省', '江西省', '福建省', '河南省', '湖北省', '湖南省', '海南省', '广西壮族自治区', '广东省', '重庆市', '四川省', '贵州省', '云南省', '西藏自治区', '陕西省', '甘肃省', '宁夏回族自治区', '青海省', '新疆维吾尔自治区', '台湾省', '香港特别行政区', '澳门特别行政区'];\nvar coords = [{\n  name: '北京',\n  center: [116.525424, 40.277672]\n}, {\n  name: '天津',\n  center: [117.482083, 39.341208]\n}, {\n  name: '河北',\n  center: [115.274407, 38.362957]\n}, {\n  name: '山西',\n  center: [112.257251, 37.128518]\n}, {\n  name: '内蒙古',\n  center: [110.748672, 41.423192]\n}, {\n  name: '黑龙江',\n  center: [128.520461, 46.950597]\n}, {\n  name: '吉林',\n  center: [126.975088, 43.332681]\n}, {\n  name: '辽宁',\n  center: [123.553191, 41.06214]\n}, {\n  name: '上海',\n  center: [121.403438, 31.097639]\n}, {\n  name: '山东',\n  center: [117.997207, 36.067855]\n}, {\n  name: '江苏',\n  center: [119.800142, 33.240592]\n}, {\n  name: '安徽',\n  center: [117.445288, 31.112728]\n}, {\n  name: '浙江',\n  center: [120.094499, 28.96795]\n}, {\n  name: '江西',\n  center: [115.691077, 27.604804]\n}, {\n  name: '福建',\n  center: [118.068928, 25.995128]\n}, {\n  name: '河南',\n  center: [113.82837, 33.792663]\n}, {\n  name: '湖北',\n  center: [112.26918, 31.212352]\n}, {\n  name: '湖南',\n  center: [111.754056, 27.539223]\n}, {\n  name: '海南',\n  center: [109.803942, 19.12266]\n}, {\n  name: '广西',\n  center: [109.569377, 24.084451]\n}, {\n  name: '广东',\n  center: [113.653577, 24.016868]\n}, {\n  name: '重庆',\n  center: [107.633061, 29.810576]\n}, {\n  name: '四川',\n  center: [102.628997, 30.042951]\n}, {\n  name: '贵州',\n  center: [107.485883, 27.046109]\n}, {\n  name: '云南',\n  center: [101.511361, 24.421822]\n}, {\n  name: '西藏',\n  center: [88.412486, 31.693395]\n}, {\n  name: '陕西',\n  center: [108.295364, 33.646196]\n}, {\n  name: '甘肃',\n  center: [104.505521, 34.928903]\n}, {\n  name: '宁夏',\n  center: [106.124483, 37.316797]\n}, {\n  name: '青海',\n  center: [96.559326, 35.707387]\n}, {\n  name: '新疆',\n  center: [85.542507, 39.949912]\n}, {\n  name: '台湾',\n  center: [120.989499, 23.63605]\n}, {\n  name: '香港',\n  center: [114.249895, 22.256975]\n}, {\n  name: '澳门',\n  center: [113.557912, 22.193541]\n}];\nvar nameMap = provinces.reduce(function (prev, cur, index) {\n  prev[cur] = coords[index].name;\n  return prev;\n}, {}); // const style1 = {\n//   areaStyle: {\n//     normal: {\n//       color: '#6BC5F2'\n//     }\n//   }\n// }\n// const style2 = {\n//   areaStyle: {\n//     normal: {\n//       color: '#4FA3ED'\n//     }\n//   }\n// }\n// const style3 = {\n//   areaStyle: {\n//     normal: {\n//       color: '#3784E8'\n//     }\n//   }\n// }\n// const style4 = {\n//   areaStyle: {\n//     normal: {\n//       color: '#3C54C8'\n//     }\n//   }\n// }\n// const area1 = ['新疆', '黑龙江']\n// const area3 = ['河南', '内蒙古', '广东']\n// const area4 = [\n//   '广西',\n//   '海南',\n//   '台湾',\n//   '浙江',\n//   '安徽',\n//   '山东',\n//   '江苏',\n//   '辽宁',\n//   '吉林',\n//   '湖北'\n// ]\n// const arean = area1.concat(area3).concat(area4)\n// const area2 = coords\n//   .filter(item => !arean.includes(item.name))\n//   .map(item => item.name)\n// function getMapData(min, max, area) {\n//   let arr = []\n//   area.forEach(item => {\n//     arr.push({ name: item, value: Math.floor(Math.random() * (max - min + 1) + min) })\n//   })\n//   return arr\n// }\n// const map = {\n//   ...setMapStyle(area1, style1, getMapData(0, 200, area1)),\n//   ...setMapStyle(area2, style2, getMapData(200, 400, area2)),\n//   ...setMapStyle(area3, style3, getMapData(400, 600, area3)),\n//   ...setMapStyle(area4, style4, getMapData(600, 800, area4))\n// }\n// function setMapStyle(arr, style, mapData) {\n//   return arr.reduce((prev, cur) => {\n//     prev[cur] = { ...style }\n//     // prev[cur].textStyle = {\n//     //   normal: {\n//     //     show: true,\n//     //     fontSize: 16,\n//     //     color: '#eee'\n//     //   }\n//     // }\n//     prev[cur].center = coords.find(item => item.name === cur).center\n//     prev[cur].data = mapData.filter(item => item.name === cur)[0]\n//     return prev\n//   }, {})\n// }\n// const scatterShape = [\n//   // 六边形\n//   'hexagon',\n//   'circle',\n//   'triangle',\n//   'diamond',\n//   4,\n//   5,\n//   6,\n//   7\n// ]\n// const colors = ['#74F6FD', '#DACD00', '#DA8000', '#CC1CDF']\n// function randomInRange(min, max) {\n//   return Math.floor(Math.random() * (max - min) + min)\n// }\n// function pickOne(data) {\n//   return data[Math.floor(Math.random() * data.length)]\n// }\n\nfunction getFlylinesData(target, mapData) {\n  // const provs = coords.filter(prov => prov.name !== target)\n  return mapData.map(function (p) {\n    return {\n      source: {\n        name: p.name,\n        // center: null\n        center: getCoord(p.name)\n      },\n      target: {\n        // name: target,\n        name: target,\n        center: getCoord(target) //coords.filter(item => item.name === target)[0].center //[110.444119, 50.798952]\n\n      },\n      lineStyle: {\n        color: '#DACD00' //pickOne(colors)\n\n      },\n      symbolStyle: {\n        color: '#DACD00',\n        //pickOne(colors),\n        size: 10,\n        // symbol: pickOne(['dotted', 'ball']),\n        // symbol: 'ball',\n        opacity: 0.7 //Math.random()\n\n      }\n    };\n  });\n}\n\nfunction getScatterData(target, mapData) {\n  // const total = mapData.reduce((pre, cur) => {\n  //   return pre.value + cur.value\n  // })\n  // const newMapData = mapData.slice(0)\n  // mapData.push({ name: target, value: total })\n  return mapData.map(function (item) {\n    return {\n      color: '#FFFFAF',\n      //'#05FA8C', //pickOne(['red', '#00f3ff']),\n      // show: Math.random() > 0.5,\n      show: true,\n      // symbol: pickOne(scatterShape),\n      // effectType: pickOne(['ripple', 'none']),\n      size: 12,\n      center: getCoord(item.name),\n      data: {\n        name: item.name,\n        data: {\n          name: '攻击次数',\n          value: item.value\n        } // {\n        //   name: province.name,\n        //   value: randomInRange(1000, 10000)\n        // }\n\n      }\n    };\n  });\n}\n\nfunction getMaxValue(data) {\n  //eslint-disable-line\n  var max = 0;\n\n  if (data && data.length) {\n    data.sort(function (a, b) {\n      return b.value - a.value;\n    });\n    max = data[0].value;\n  }\n\n  return max;\n} // const data = [\n//   {name: '湖北', value: 5621},\n//   {name: '湖南', value: 9567},\n//   {name: '广东', value: 102364},\n//   {name: '浙江', value: 7724}\n// ]\n// getMaxValue(data)\n\n\nexport function getData(mapData) {\n  var map = {};\n  mapData && mapData.forEach(function (item) {\n    var center = coords.find(function (el) {\n      return el.name === item.name;\n    }).center;\n    map[item.name] = {\n      data: _objectSpread({}, item),\n      center: center\n    };\n  });\n  return new _Promise(function (resolve, reject) {\n    setTimeout(function () {\n      var data = {\n        map: map,\n        nameMap: nameMap\n      };\n      resolve(data);\n    }, 1000);\n  });\n}",{"version":3,"sources":["D:\\工作项目\\部反诈\\src\\views\\overview\\data.js"],"names":["getCoord","mapName","provinces","coords","name","center","nameMap","reduce","prev","cur","index","getFlylinesData","target","mapData","map","p","source","lineStyle","color","symbolStyle","size","opacity","getScatterData","item","show","data","value","getMaxValue","max","length","sort","a","b","getData","forEach","find","el","resolve","reject","setTimeout"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,0BAAlC,C,CAA4D;;AAC5D,IAAMC,SAAS,GAAG,CAChB,KADgB,EAEhB,KAFgB,EAGhB,KAHgB,EAIhB,KAJgB,EAKhB,QALgB,EAMhB,MANgB,EAOhB,KAPgB,EAQhB,KARgB,EAShB,KATgB,EAUhB,KAVgB,EAWhB,KAXgB,EAYhB,KAZgB,EAahB,KAbgB,EAchB,KAdgB,EAehB,KAfgB,EAgBhB,KAhBgB,EAiBhB,KAjBgB,EAkBhB,KAlBgB,EAmBhB,KAnBgB,EAoBhB,SApBgB,EAqBhB,KArBgB,EAsBhB,KAtBgB,EAuBhB,KAvBgB,EAwBhB,KAxBgB,EAyBhB,KAzBgB,EA0BhB,OA1BgB,EA2BhB,KA3BgB,EA4BhB,KA5BgB,EA6BhB,SA7BgB,EA8BhB,KA9BgB,EA+BhB,UA/BgB,EAgChB,KAhCgB,EAiChB,SAjCgB,EAkChB,SAlCgB,CAAlB;AAqCA,IAAMC,MAAM,GAAG,CACb;AACEC,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CADa,EAKb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CALa,EASb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CATa,EAab;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CAba,EAiBb;AACED,EAAAA,IAAI,EAAE,KADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CAjBa,EAqBb;AACED,EAAAA,IAAI,EAAE,KADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CArBa,EAyBb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CAzBa,EA6Bb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,QAAb;AAFV,CA7Ba,EAiCb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CAjCa,EAqCb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CArCa,EAyCb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CAzCa,EA6Cb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CA7Ca,EAiDb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,QAAb;AAFV,CAjDa,EAqDb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CArDa,EAyDb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CAzDa,EA6Db;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ;AAFV,CA7Da,EAiEb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ;AAFV,CAjEa,EAqEb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CArEa,EAyEb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,QAAb;AAFV,CAzEa,EA6Eb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CA7Ea,EAiFb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CAjFa,EAqFb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CArFa,EAyFb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CAzFa,EA6Fb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CA7Fa,EAiGb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CAjGa,EAqGb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ;AAFV,CArGa,EAyGb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CAzGa,EA6Gb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CA7Ga,EAiHb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CAjHa,EAqHb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ;AAFV,CArHa,EAyHb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ;AAFV,CAzHa,EA6Hb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,QAAb;AAFV,CA7Ha,EAiIb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CAjIa,EAqIb;AACED,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,SAAb;AAFV,CArIa,CAAf;AA2IA,IAAMC,OAAO,GAAGJ,SAAS,CAACK,MAAV,CAAiB,UAACC,IAAD,EAAOC,GAAP,EAAYC,KAAZ,EAAsB;AACrDF,EAAAA,IAAI,CAACC,GAAD,CAAJ,GAAYN,MAAM,CAACO,KAAD,CAAN,CAAcN,IAA1B;AACA,SAAOI,IAAP;AACD,CAHe,EAGb,EAHa,CAAhB,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA,SAASG,eAAT,CAAyBC,MAAzB,EAAiCC,OAAjC,EAA0C;AACxC;AACA,SAAOA,OAAO,CAACC,GAAR,CAAY,UAAAC,CAAC;AAAA,WAAK;AACvBC,MAAAA,MAAM,EAAE;AACNZ,QAAAA,IAAI,EAAEW,CAAC,CAACX,IADF;AAEN;AACAC,QAAAA,MAAM,EAAEL,QAAQ,CAACe,CAAC,CAACX,IAAH;AAHV,OADe;AAMvBQ,MAAAA,MAAM,EAAE;AACN;AACAR,QAAAA,IAAI,EAAEQ,MAFA;AAGNP,QAAAA,MAAM,EAAEL,QAAQ,CAACY,MAAD,CAHV,CAGoB;;AAHpB,OANe;AAWvBK,MAAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAE,SADE,CACQ;;AADR,OAXY;AAcvBC,MAAAA,WAAW,EAAE;AACXD,QAAAA,KAAK,EAAE,SADI;AACO;AAClBE,QAAAA,IAAI,EAAE,EAFK;AAGX;AACA;AACAC,QAAAA,OAAO,EAAE,GALE,CAKE;;AALF;AAdU,KAAL;AAAA,GAAb,CAAP;AAsBD;;AAED,SAASC,cAAT,CAAwBV,MAAxB,EAAgCC,OAAhC,EAAyC;AACvC;AACA;AACA;AACA;AACA;AACA,SAAOA,OAAO,CAACC,GAAR,CAAY,UAAAS,IAAI;AAAA,WAAK;AAC1BL,MAAAA,KAAK,EAAE,SADmB;AACR;AAClB;AACAM,MAAAA,IAAI,EAAE,IAHoB;AAI1B;AACA;AACAJ,MAAAA,IAAI,EAAE,EANoB;AAO1Bf,MAAAA,MAAM,EAAEL,QAAQ,CAACuB,IAAI,CAACnB,IAAN,CAPU;AAQ1BqB,MAAAA,IAAI,EAAE;AACJrB,QAAAA,IAAI,EAAEmB,IAAI,CAACnB,IADP;AAEJqB,QAAAA,IAAI,EAAE;AACJrB,UAAAA,IAAI,EAAE,MADF;AAEJsB,UAAAA,KAAK,EAAEH,IAAI,CAACG;AAFR,SAFF,CAON;AACA;AACA;AACA;;AAVM;AARoB,KAAL;AAAA,GAAhB,CAAP;AAoBD;;AAED,SAASC,WAAT,CAAsBF,IAAtB,EAA4B;AAAC;AAC3B,MAAIG,GAAG,GAAG,CAAV;;AACA,MAAGH,IAAI,IAAIA,IAAI,CAACI,MAAhB,EAAwB;AACtBJ,IAAAA,IAAI,CAACK,IAAL,CAAU,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAClB,aAAOA,CAAC,CAACN,KAAF,GAAUK,CAAC,CAACL,KAAnB;AACD,KAFD;AAGAE,IAAAA,GAAG,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQC,KAAd;AACD;;AACD,SAAOE,GAAP;AACD,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,SAASK,OAAT,CAAiBpB,OAAjB,EAA0B;AAC/B,MAAIC,GAAG,GAAG,EAAV;AACAD,EAAAA,OAAO,IAAIA,OAAO,CAACqB,OAAR,CAAgB,UAAAX,IAAI,EAAI;AACjC,QAAIlB,MAAM,GAAGF,MAAM,CAACgC,IAAP,CAAY,UAAAC,EAAE;AAAA,aAAIA,EAAE,CAAChC,IAAH,KAAYmB,IAAI,CAACnB,IAArB;AAAA,KAAd,EAAyCC,MAAtD;AACAS,IAAAA,GAAG,CAACS,IAAI,CAACnB,IAAN,CAAH,GAAiB;AACfqB,MAAAA,IAAI,oBAAOF,IAAP,CADW;AAEflB,MAAAA,MAAM,EAAEA;AAFO,KAAjB;AAID,GANU,CAAX;AAOA,SAAO,aAAY,UAACgC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,IAAAA,UAAU,CAAC,YAAM;AACf,UAAMd,IAAI,GAAG;AACXX,QAAAA,GAAG,EAAHA,GADW;AAEXR,QAAAA,OAAO,EAAPA;AAFW,OAAb;AAIA+B,MAAAA,OAAO,CAACZ,IAAD,CAAP;AACD,KANS,EAMP,IANO,CAAV;AAOD,GARM,CAAP;AASD","sourcesContent":["import { getCoord, mapName } from '@/constants/worldsForMap'//eslint-disable-line\r\nconst provinces = [\r\n  '北京市',\r\n  '天津市',\r\n  '河北省',\r\n  '山西省',\r\n  '内蒙古自治区',\r\n  '黑龙江省',\r\n  '吉林省',\r\n  '辽宁省',\r\n  '上海市',\r\n  '山东省',\r\n  '江苏省',\r\n  '安徽省',\r\n  '浙江省',\r\n  '江西省',\r\n  '福建省',\r\n  '河南省',\r\n  '湖北省',\r\n  '湖南省',\r\n  '海南省',\r\n  '广西壮族自治区',\r\n  '广东省',\r\n  '重庆市',\r\n  '四川省',\r\n  '贵州省',\r\n  '云南省',\r\n  '西藏自治区',\r\n  '陕西省',\r\n  '甘肃省',\r\n  '宁夏回族自治区',\r\n  '青海省',\r\n  '新疆维吾尔自治区',\r\n  '台湾省',\r\n  '香港特别行政区',\r\n  '澳门特别行政区'\r\n]\r\n\r\nconst coords = [\r\n  {\r\n    name: '北京',\r\n    center: [116.525424, 40.277672]\r\n  },\r\n  {\r\n    name: '天津',\r\n    center: [117.482083, 39.341208]\r\n  },\r\n  {\r\n    name: '河北',\r\n    center: [115.274407, 38.362957]\r\n  },\r\n  {\r\n    name: '山西',\r\n    center: [112.257251, 37.128518]\r\n  },\r\n  {\r\n    name: '内蒙古',\r\n    center: [110.748672, 41.423192]\r\n  },\r\n  {\r\n    name: '黑龙江',\r\n    center: [128.520461, 46.950597]\r\n  },\r\n  {\r\n    name: '吉林',\r\n    center: [126.975088, 43.332681]\r\n  },\r\n  {\r\n    name: '辽宁',\r\n    center: [123.553191, 41.06214]\r\n  },\r\n  {\r\n    name: '上海',\r\n    center: [121.403438, 31.097639]\r\n  },\r\n  {\r\n    name: '山东',\r\n    center: [117.997207, 36.067855]\r\n  },\r\n  {\r\n    name: '江苏',\r\n    center: [119.800142, 33.240592]\r\n  },\r\n  {\r\n    name: '安徽',\r\n    center: [117.445288, 31.112728]\r\n  },\r\n  {\r\n    name: '浙江',\r\n    center: [120.094499, 28.96795]\r\n  },\r\n  {\r\n    name: '江西',\r\n    center: [115.691077, 27.604804]\r\n  },\r\n  {\r\n    name: '福建',\r\n    center: [118.068928, 25.995128]\r\n  },\r\n  {\r\n    name: '河南',\r\n    center: [113.82837, 33.792663]\r\n  },\r\n  {\r\n    name: '湖北',\r\n    center: [112.26918, 31.212352]\r\n  },\r\n  {\r\n    name: '湖南',\r\n    center: [111.754056, 27.539223]\r\n  },\r\n  {\r\n    name: '海南',\r\n    center: [109.803942, 19.12266]\r\n  },\r\n  {\r\n    name: '广西',\r\n    center: [109.569377, 24.084451]\r\n  },\r\n  {\r\n    name: '广东',\r\n    center: [113.653577, 24.016868]\r\n  },\r\n  {\r\n    name: '重庆',\r\n    center: [107.633061, 29.810576]\r\n  },\r\n  {\r\n    name: '四川',\r\n    center: [102.628997, 30.042951]\r\n  },\r\n  {\r\n    name: '贵州',\r\n    center: [107.485883, 27.046109]\r\n  },\r\n  {\r\n    name: '云南',\r\n    center: [101.511361, 24.421822]\r\n  },\r\n  {\r\n    name: '西藏',\r\n    center: [88.412486, 31.693395]\r\n  },\r\n  {\r\n    name: '陕西',\r\n    center: [108.295364, 33.646196]\r\n  },\r\n  {\r\n    name: '甘肃',\r\n    center: [104.505521, 34.928903]\r\n  },\r\n  {\r\n    name: '宁夏',\r\n    center: [106.124483, 37.316797]\r\n  },\r\n  {\r\n    name: '青海',\r\n    center: [96.559326, 35.707387]\r\n  },\r\n  {\r\n    name: '新疆',\r\n    center: [85.542507, 39.949912]\r\n  },\r\n  {\r\n    name: '台湾',\r\n    center: [120.989499, 23.63605]\r\n  },\r\n  {\r\n    name: '香港',\r\n    center: [114.249895, 22.256975]\r\n  },\r\n  {\r\n    name: '澳门',\r\n    center: [113.557912, 22.193541]\r\n  }\r\n]\r\n\r\nconst nameMap = provinces.reduce((prev, cur, index) => {\r\n  prev[cur] = coords[index].name\r\n  return prev\r\n}, {})\r\n\r\n// const style1 = {\r\n//   areaStyle: {\r\n//     normal: {\r\n//       color: '#6BC5F2'\r\n//     }\r\n//   }\r\n// }\r\n\r\n// const style2 = {\r\n//   areaStyle: {\r\n//     normal: {\r\n//       color: '#4FA3ED'\r\n//     }\r\n//   }\r\n// }\r\n\r\n// const style3 = {\r\n//   areaStyle: {\r\n//     normal: {\r\n//       color: '#3784E8'\r\n//     }\r\n//   }\r\n// }\r\n\r\n// const style4 = {\r\n//   areaStyle: {\r\n//     normal: {\r\n//       color: '#3C54C8'\r\n//     }\r\n//   }\r\n// }\r\n\r\n// const area1 = ['新疆', '黑龙江']\r\n// const area3 = ['河南', '内蒙古', '广东']\r\n// const area4 = [\r\n//   '广西',\r\n//   '海南',\r\n//   '台湾',\r\n//   '浙江',\r\n//   '安徽',\r\n//   '山东',\r\n//   '江苏',\r\n//   '辽宁',\r\n//   '吉林',\r\n//   '湖北'\r\n// ]\r\n// const arean = area1.concat(area3).concat(area4)\r\n// const area2 = coords\r\n//   .filter(item => !arean.includes(item.name))\r\n//   .map(item => item.name)\r\n\r\n// function getMapData(min, max, area) {\r\n//   let arr = []\r\n//   area.forEach(item => {\r\n//     arr.push({ name: item, value: Math.floor(Math.random() * (max - min + 1) + min) })\r\n//   })\r\n//   return arr\r\n// }\r\n// const map = {\r\n//   ...setMapStyle(area1, style1, getMapData(0, 200, area1)),\r\n//   ...setMapStyle(area2, style2, getMapData(200, 400, area2)),\r\n//   ...setMapStyle(area3, style3, getMapData(400, 600, area3)),\r\n//   ...setMapStyle(area4, style4, getMapData(600, 800, area4))\r\n// }\r\n\r\n// function setMapStyle(arr, style, mapData) {\r\n//   return arr.reduce((prev, cur) => {\r\n//     prev[cur] = { ...style }\r\n//     // prev[cur].textStyle = {\r\n//     //   normal: {\r\n//     //     show: true,\r\n//     //     fontSize: 16,\r\n//     //     color: '#eee'\r\n//     //   }\r\n//     // }\r\n//     prev[cur].center = coords.find(item => item.name === cur).center\r\n//     prev[cur].data = mapData.filter(item => item.name === cur)[0]\r\n//     return prev\r\n//   }, {})\r\n// }\r\n\r\n// const scatterShape = [\r\n//   // 六边形\r\n//   'hexagon',\r\n//   'circle',\r\n//   'triangle',\r\n//   'diamond',\r\n//   4,\r\n//   5,\r\n//   6,\r\n//   7\r\n// ]\r\n// const colors = ['#74F6FD', '#DACD00', '#DA8000', '#CC1CDF']\r\n\r\n// function randomInRange(min, max) {\r\n//   return Math.floor(Math.random() * (max - min) + min)\r\n// }\r\n\r\n// function pickOne(data) {\r\n//   return data[Math.floor(Math.random() * data.length)]\r\n// }\r\n\r\nfunction getFlylinesData(target, mapData) {\r\n  // const provs = coords.filter(prov => prov.name !== target)\r\n  return mapData.map(p => ({\r\n    source: {\r\n      name: p.name,\r\n      // center: null\r\n      center: getCoord(p.name)\r\n    },\r\n    target: {\r\n      // name: target,\r\n      name: target,\r\n      center: getCoord(target)  //coords.filter(item => item.name === target)[0].center //[110.444119, 50.798952]\r\n    },\r\n    lineStyle: {\r\n      color: '#DACD00' //pickOne(colors)\r\n    },\r\n    symbolStyle: {\r\n      color: '#DACD00', //pickOne(colors),\r\n      size: 10,\r\n      // symbol: pickOne(['dotted', 'ball']),\r\n      // symbol: 'ball',\r\n      opacity: 0.7 //Math.random()\r\n    }\r\n  }))\r\n}\r\n\r\nfunction getScatterData(target, mapData) {\r\n  // const total = mapData.reduce((pre, cur) => {\r\n  //   return pre.value + cur.value\r\n  // })\r\n  // const newMapData = mapData.slice(0)\r\n  // mapData.push({ name: target, value: total })\r\n  return mapData.map(item => ({\r\n    color: '#FFFFAF', //'#05FA8C', //pickOne(['red', '#00f3ff']),\r\n    // show: Math.random() > 0.5,\r\n    show: true,\r\n    // symbol: pickOne(scatterShape),\r\n    // effectType: pickOne(['ripple', 'none']),\r\n    size: 12,\r\n    center: getCoord(item.name),\r\n    data: { \r\n      name: item.name,\r\n      data: {\r\n        name: '攻击次数',\r\n        value: item.value\r\n      }\r\n    }\r\n    // {\r\n    //   name: province.name,\r\n    //   value: randomInRange(1000, 10000)\r\n    // }\r\n  }))\r\n}\r\n\r\nfunction getMaxValue (data) {//eslint-disable-line\r\n  let max = 0\r\n  if(data && data.length) {\r\n    data.sort((a, b) => {\r\n      return b.value - a.value\r\n    })\r\n    max = data[0].value\r\n  }\r\n  return max\r\n}\r\n// const data = [\r\n//   {name: '湖北', value: 5621},\r\n//   {name: '湖南', value: 9567},\r\n//   {name: '广东', value: 102364},\r\n//   {name: '浙江', value: 7724}\r\n// ]\r\n// getMaxValue(data)\r\n\r\nexport function getData(mapData) {\r\n  let map = {}\r\n  mapData && mapData.forEach(item => {\r\n    let center = coords.find(el => el.name === item.name).center\r\n    map[item.name] = {\r\n      data: { ...item },\r\n      center: center\r\n    }\r\n  })\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const data = {\r\n        map,\r\n        nameMap\r\n      }\r\n      resolve(data)\r\n    }, 1000)\r\n  })\r\n}"]}]}