{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js!D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\工作项目\\部反诈\\src\\components\\echarts\\pie\\pieChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\components\\echarts\\pie\\pieChart.vue","mtime":1598758386873},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"D:\\\\\\u5DE5\\u4F5C\\u9879\\u76EE\\\\\\u90E8\\u53CD\\u8BC8\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\nimport globalChartMixin from 'mixins/globalChartMixin';\nimport ECharts from 'vue-echarts/components/ECharts';\nimport 'echarts/lib/chart/pie';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/legend';\nimport 'echarts/lib/component/legendScroll';\nimport 'echarts/lib/component/title';\nimport storage from \"utils/storage\";\nimport { deepClone } from 'utils/util';\nvar chartColors = storage.get('tColors');\nexport default {\n  name: 'pieChart',\n  components: {\n    ECharts: ECharts\n  },\n  mixins: [globalChartMixin],\n  props: {\n    chartData: {\n      type: Object,\n      default: function _default() {\n        return {\n          // legendData: ['直接访问', '邮件营销', '联盟广告', '视频广告', '搜索引擎'],\n          seriesData: [{\n            value: 335,\n            name: '直接访问'\n          }, {\n            value: 310,\n            name: '邮件营销'\n          }, {\n            value: 234,\n            name: '联盟广告'\n          }, {\n            value: 135,\n            name: '视频广告'\n          }, {\n            value: 1548,\n            name: '搜索引擎'\n          }]\n        };\n      }\n    },\n    colors: {\n      type: Array,\n      default: function _default() {\n        return chartColors.pie.colors;\n      }\n    },\n    pieName: {\n      type: String,\n      default: '分布情况'\n    },\n    seriesLabelShow: {\n      type: Boolean,\n      default: false\n    },\n    seriesLabelPosition: {\n      type: String,\n      default: ''\n    },\n    seriesLabelFormat: {\n      type: String,\n      default: '{b}\\n{d}%'\n    },\n    pieAutoPlay: {\n      type: Boolean,\n      default: false\n    },\n    center: {\n      type: Array,\n      default: function _default() {\n        return ['50%', '50%'];\n      }\n    },\n    radius: {\n      type: Array,\n      default: function _default() {\n        return ['40%', '65%'];\n      }\n    },\n    showPercent: {\n      type: Boolean,\n      default: false\n    },\n    pieAutoPlayNumColor: {\n      type: String,\n      default: chartColors.pie.autoPlayNum\n    },\n    pieAutoPlayNumFontSize: {\n      type: String,\n      default: '22'\n    },\n    pieAutoPlayNumFontWeight: {\n      type: String,\n      default: 'bold'\n    },\n    pieAutoPlayTextColor: {\n      type: String,\n      default: chartColors.pie.autoPlayText\n    },\n    pieAutoPlayTextFontSize: {\n      type: String,\n      default: '14'\n    },\n    pieAutoPlayTextFontWeight: {\n      type: String,\n      default: 'bold'\n    },\n    showRatio: {\n      type: Boolean,\n      default: true\n    },\n    seriesLabelEmphasisShow: {\n      type: Boolean,\n      default: true\n    },\n    roseType: {\n      type: [Boolean, String],\n      default: function _default() {\n        return false;\n      }\n    }\n  },\n  data: function data() {\n    return {\n      chartName: '[饼图模板]',\n      timeFlag: null\n    };\n  },\n  mounted: function mounted() {},\n  watch: {\n    chartData: {\n      handler: function handler(newVal, oldVal) {\n        this.refresh();\n      },\n      deep: true\n    },\n    colors: function colors(newVal, oldVal) {\n      this.refresh();\n    },\n    pieName: function pieName(newVal, oldVal) {\n      this.refresh();\n    },\n    seriesLabelShow: function seriesLabelShow(newVal, oldVal) {\n      this.refresh();\n    },\n    pieAutoPlay: function pieAutoPlay(newVal, oldVal) {\n      this.refresh();\n    },\n    center: function center(newVal, oldVal) {\n      this.refresh();\n    },\n    radius: function radius(newVal, oldVal) {\n      this.refresh();\n    },\n    showPercent: function showPercent(newVal, oldVal) {\n      this.refresh();\n    },\n    pieAutoPlayNumColor: function pieAutoPlayNumColor(newVal, oldVal) {\n      this.refresh();\n    },\n    pieAutoPlayNumFontSize: function pieAutoPlayNumFontSize(newVal, oldVal) {\n      this.refresh();\n    },\n    pieAutoPlayNumFontWeight: function pieAutoPlayNumFontWeight(newVal, oldVal) {\n      this.refresh();\n    },\n    pieAutoPlayTextColor: function pieAutoPlayTextColor(newVal, oldVal) {\n      this.refresh();\n    },\n    pieAutoPlayTextFontSize: function pieAutoPlayTextFontSize(newVal, oldVal) {\n      this.refresh();\n    },\n    pieAutoPlayTextFontWeight: function pieAutoPlayTextFontWeight(newVal, oldVal) {\n      this.refresh();\n    },\n    showRatio: function showRatio(newVal, oldVal) {\n      this.refresh();\n    },\n    seriesLabelEmphasisShow: function seriesLabelEmphasisShow(newVal, oldVal) {\n      this.refresh();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    clearInterval(this.timeFlag);\n  },\n  methods: {\n    refreshCallback: function refreshCallback() {\n      if (this.pieAutoPlay) {\n        var _data = this.chartData.seriesData ? deepClone(this.chartData.seriesData) : [];\n\n        this.startPieAutoPlay(_data);\n      }\n    },\n    allData: function allData(data) {\n      var allNum = 0;\n\n      for (var a = 0; a < data.length; a++) {\n        allNum += data[a].value;\n      }\n\n      return allNum;\n    },\n    startPieAutoPlay: function startPieAutoPlay(data) {\n      var _this = this;\n\n      var pieIndex = 0;\n\n      if (!data || data.length === 0) {\n        return;\n      }\n\n      clearInterval(this.timeFlag);\n      this.timeFlag = setInterval(function () {\n        if (pieIndex > data.length - 1) {\n          pieIndex = 0;\n        }\n\n        for (var i = 0; i < data.length; i++) {\n          _this.options.series[1].data[i].selected = false;\n        }\n\n        if (!data[pieIndex]) return;\n        _this.options.series[1].data[pieIndex].selected = true;\n        data.splice(pieIndex, 1, data[pieIndex]);\n\n        if (_this.showPercent) {\n          _this.options.series[0].data[0].label.normal.formatter = (_this.options.series[1].data[pieIndex].value / _this.allData(data) * 100).toFixed(1) + '%';\n        } else {\n          _this.options.series[0].data[0].label.normal.formatter = _this.options.series[1].data[pieIndex].value.toFixed(0);\n        }\n\n        _this.options.series[0].data[1].label.normal.formatter = '\\n\\n\\n' + _this.options.series[1].data[pieIndex].name;\n        pieIndex++;\n      }, 2000);\n    },\n    getLegendData: function getLegendData(data) {\n      var legendData = [];\n\n      if (data && data.length !== 0) {\n        data.forEach(function (item) {\n          legendData.push(item.name);\n        });\n      }\n\n      return legendData;\n    },\n    setOptions: function setOptions() {\n      var seriesData = this.chartData.seriesData;\n      var legendData = this.getLegendData(seriesData);\n      var seriesLabelPos = '',\n          seriesLabelEmphasis = true;\n\n      if (this.seriesLabelShow) {\n        seriesLabelPos = 'outside';\n      } else {\n        seriesLabelPos = 'center';\n      }\n\n      if (this.pieAutoPlay) {\n        seriesLabelEmphasis = false;\n      } else {\n        this.seriesLabelEmphasisShow ? seriesLabelEmphasis = true : seriesLabelEmphasis = false;\n      } // const _this = this\n      // console.log(this.colors, '=====colors====')\n\n\n      var pieOpts = {\n        color: this.colors,\n        backgroundColor: 'transparent',\n        tooltip: {\n          show: this.tooltipShow,\n          trigger: 'item',\n          formatter: '{a} <br/>{b} : {c} ({d}%)'\n        },\n        legend: _objectSpread({}, this.legendOpt(), {\n          show: this.legendShow,\n          data: legendData,\n          textStyle: {\n            fontSize: this.legendFontSize,\n            color: this.legendTextColor\n          },\n          pageTextStyle: {\n            color: this.legendPageTextColor\n          }\n        }),\n        series: [{\n          name: '',\n          type: 'pie',\n          hoverAnimation: false,\n          radius: [200, 200],\n          // center: ['50%', '43%'],\n          center: this.center,\n          label: {\n            normal: {\n              position: 'center'\n            }\n          },\n          data: [{\n            value: 0,\n            tooltip: {\n              show: false\n            },\n            label: {\n              normal: {\n                formatter: '',\n                textStyle: {\n                  color: this.pieAutoPlayNumColor,\n                  fontSize: this.pieAutoPlayNumFontSize,\n                  fontWeight: this.pieAutoPlayNumFontWeight\n                }\n              }\n            }\n          }, {\n            tooltip: {\n              show: false\n            },\n            label: {\n              normal: {\n                formatter: '',\n                textStyle: {\n                  color: this.pieAutoPlayTextColor,\n                  fontSize: this.pieAutoPlayTextFontSize,\n                  fontWeight: this.pieAutoPlayTextFontWeight\n                }\n              }\n            }\n          }]\n        }, {\n          name: this.pieName,\n          type: 'pie',\n          radius: this.radius,\n          center: this.center,\n          roseType: this.roseType,\n          hoverAnimation: true,\n          avoidLabelOverlap: false,\n          itemStyle: {\n            emphasis: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              // color: function(params) {\n              //   const num = _this.colors.length\n              //   return _this.colors[params.dataIndex % num]\n              // },\n              shadowColor: chartColors.shadowColor\n            }\n          },\n          label: {\n            normal: {\n              show: this.seriesLabelShow,\n              position: this.seriesLabelPosition || seriesLabelPos,\n              formatter: this.showRatio ? this.seriesLabelFormat : '{b}'\n            },\n            emphasis: {\n              show: seriesLabelEmphasis,\n              textStyle: {\n                fontSize: '14',\n                fontWeight: 'bold'\n              }\n            }\n          },\n          data: seriesData\n        }]\n      };\n      return pieOpts;\n    }\n  }\n};",{"version":3,"sources":["pieChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <ECharts :options=\"options\" :autoresize=\"true\"></ECharts>\r\n</template>\r\n\r\n<script>\r\n  import globalChartMixin from 'mixins/globalChartMixin'\r\n  import ECharts from 'vue-echarts/components/ECharts'\r\n  import 'echarts/lib/chart/pie'\r\n  import 'echarts/lib/component/tooltip'\r\n  import 'echarts/lib/component/legend'\r\n  import 'echarts/lib/component/legendScroll'\r\n  import 'echarts/lib/component/title'\r\n  import storage from \"utils/storage\"\r\n  import { deepClone } from 'utils/util'\r\n  const chartColors = storage.get('tColors')\r\n  export default {\r\n    name: 'pieChart',\r\n    components: { ECharts },\r\n    mixins: [ globalChartMixin ],\r\n    props: {\r\n      chartData: {\r\n        type: Object,\r\n        default: () => {\r\n          return {\r\n            // legendData: ['直接访问', '邮件营销', '联盟广告', '视频广告', '搜索引擎'],\r\n            seriesData: [\r\n            { value: 335, name: '直接访问' },\r\n            { value: 310, name: '邮件营销' },\r\n            { value: 234, name: '联盟广告' },\r\n            { value: 135, name: '视频广告' },\r\n            { value: 1548, name: '搜索引擎' }\r\n            ]\r\n          }\r\n        }\r\n      },\r\n      colors: {\r\n        type: Array,\r\n        default: () => chartColors.pie.colors\r\n      },\r\n      pieName: {\r\n        type: String,\r\n        default: '分布情况'\r\n      },\r\n      seriesLabelShow: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      seriesLabelPosition: {\r\n        type: String,\r\n        default: ''\r\n      },\r\n      seriesLabelFormat: {\r\n        type: String,\r\n        default: '{b}\\n{d}%'\r\n      },\r\n      pieAutoPlay: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      center: {\r\n        type: Array,\r\n        default: () => (['50%', '50%'])\r\n      },\r\n      radius: {\r\n        type: Array,\r\n        default: () => (['40%', '65%'])\r\n      },\r\n      showPercent: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      pieAutoPlayNumColor: {\r\n        type: String,\r\n        default: chartColors.pie.autoPlayNum\r\n      },\r\n      pieAutoPlayNumFontSize: {\r\n        type: String,\r\n        default: '22'\r\n      },\r\n      pieAutoPlayNumFontWeight: {\r\n        type: String,\r\n        default: 'bold'\r\n      },\r\n      pieAutoPlayTextColor: {\r\n        type: String,\r\n        default: chartColors.pie.autoPlayText\r\n      },\r\n      pieAutoPlayTextFontSize: {\r\n        type: String,\r\n        default: '14'\r\n      },\r\n      pieAutoPlayTextFontWeight: {\r\n        type: String,\r\n        default: 'bold'\r\n      },\r\n      showRatio: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      seriesLabelEmphasisShow: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      roseType: {\r\n        type: [Boolean, String],\r\n        default: () => false\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        chartName: '[饼图模板]',\r\n        timeFlag: null\r\n      }\r\n    },\r\n    mounted() {\r\n    },\r\n    watch: {\r\n      chartData: {\r\n        handler(newVal, oldVal) {\r\n          this.refresh()\r\n        },\r\n        deep: true\r\n      },\r\n      colors(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieName(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      seriesLabelShow(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieAutoPlay(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      center(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      radius(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      showPercent(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieAutoPlayNumColor(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieAutoPlayNumFontSize(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieAutoPlayNumFontWeight(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieAutoPlayTextColor(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieAutoPlayTextFontSize(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieAutoPlayTextFontWeight(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      showRatio(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      seriesLabelEmphasisShow(newVal, oldVal) {\r\n        this.refresh()\r\n      }\r\n    },\r\n    beforeDestroy() {\r\n      clearInterval(this.timeFlag)\r\n    },\r\n    methods: {\r\n      refreshCallback() {\r\n        if (this.pieAutoPlay) {\r\n          const _data = this.chartData.seriesData ? deepClone(this.chartData.seriesData) : []\r\n          this.startPieAutoPlay(_data)\r\n        }\r\n      },\r\n      allData(data) {\r\n        var allNum = 0\r\n        for (var a = 0; a < data.length; a++) {\r\n          allNum += data[a].value\r\n        }\r\n        return allNum\r\n      },\r\n      startPieAutoPlay(data) {\r\n        let pieIndex = 0\r\n        if(!data || data.length === 0) {\r\n          return\r\n        }\r\n        clearInterval(this.timeFlag)\r\n        this.timeFlag = setInterval(() => {\r\n          if (pieIndex > data.length - 1) {\r\n            pieIndex = 0\r\n          }\r\n          for (let i = 0; i < data.length; i++) {\r\n            this.options.series[1].data[i].selected = false\r\n          }\r\n          if (!data[pieIndex]) return\r\n          this.options.series[1].data[pieIndex].selected = true\r\n          data.splice(pieIndex, 1, data[pieIndex])\r\n          if (this.showPercent) {\r\n            this.options.series[0].data[0].label.normal.formatter = (this.options.series[1].data[pieIndex].value / this.allData(data) * 100).toFixed(1) + '%'\r\n          } else {\r\n            this.options.series[0].data[0].label.normal.formatter = this.options.series[1].data[pieIndex].value.toFixed(0)\r\n          }\r\n          this.options.series[0].data[1].label.normal.formatter = '\\n\\n\\n' + this.options.series[1].data[pieIndex].name\r\n          pieIndex++\r\n        }, 2000)\r\n      },\r\n      getLegendData(data) {\r\n        const legendData = []\r\n        if(data && data.length !== 0) {\r\n          data.forEach(item => {\r\n            legendData.push(item.name)\r\n          })\r\n        }\r\n        return legendData\r\n      },\r\n      setOptions() {\r\n        let seriesData = this.chartData.seriesData \r\n        let legendData = this.getLegendData(seriesData)\r\n        let [ seriesLabelPos, seriesLabelEmphasis ] = [ '', true ]\r\n        if (this.seriesLabelShow) {\r\n          seriesLabelPos = 'outside'\r\n        } else {\r\n          seriesLabelPos = 'center'\r\n        }\r\n        if (this.pieAutoPlay) {\r\n          seriesLabelEmphasis = false\r\n        } else {\r\n          this.seriesLabelEmphasisShow\r\n            ? (seriesLabelEmphasis = true)\r\n            : (seriesLabelEmphasis = false)\r\n        }\r\n        // const _this = this\r\n        // console.log(this.colors, '=====colors====')\r\n        let pieOpts = {\r\n          color: this.colors,\r\n          backgroundColor: 'transparent',\r\n          tooltip: {\r\n            show: this.tooltipShow,\r\n            trigger: 'item',\r\n            formatter: '{a} <br/>{b} : {c} ({d}%)'\r\n          },\r\n          legend: {\r\n            ...this.legendOpt(),\r\n            show: this.legendShow,\r\n            data: legendData,\r\n            textStyle: {\r\n              fontSize: this.legendFontSize,\r\n              color: this.legendTextColor\r\n            },\r\n            pageTextStyle: {\r\n              color: this.legendPageTextColor\r\n            }\r\n          },\r\n          series: [\r\n            {\r\n              name: '',\r\n              type: 'pie',\r\n              hoverAnimation: false,\r\n              radius: [200, 200],\r\n              // center: ['50%', '43%'],\r\n              center: this.center,\r\n              label: {\r\n                normal: {\r\n                  position: 'center'\r\n                }\r\n              },\r\n              data: [\r\n                {\r\n                  value: 0,\r\n                  tooltip: {\r\n                    show: false\r\n                  },\r\n                  label: {\r\n                    normal: {\r\n                      formatter: '',\r\n                      textStyle: {\r\n                        color: this.pieAutoPlayNumColor,\r\n                        fontSize: this.pieAutoPlayNumFontSize,\r\n                        fontWeight: this.pieAutoPlayNumFontWeight\r\n                      }\r\n                    }\r\n                  }\r\n                },\r\n                {\r\n                  tooltip: {\r\n                    show: false\r\n                  },\r\n                  label: {\r\n                    normal: {\r\n                      formatter: '',\r\n                      textStyle: {\r\n                        color: this.pieAutoPlayTextColor,\r\n                        fontSize: this.pieAutoPlayTextFontSize,\r\n                        fontWeight: this.pieAutoPlayTextFontWeight\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              name: this.pieName,\r\n              type: 'pie',\r\n              radius: this.radius,\r\n              center: this.center,\r\n              roseType: this.roseType,\r\n              hoverAnimation: true,\r\n              avoidLabelOverlap: false,\r\n              itemStyle: {\r\n                emphasis: {\r\n                  shadowBlur: 10,\r\n                  shadowOffsetX: 0,\r\n                  // color: function(params) {\r\n                  //   const num = _this.colors.length\r\n                  //   return _this.colors[params.dataIndex % num]\r\n                  // },\r\n                  shadowColor: chartColors.shadowColor\r\n                }\r\n              },\r\n              label: {\r\n                normal: {\r\n                  show: this.seriesLabelShow,\r\n                  position: this.seriesLabelPosition || seriesLabelPos,\r\n                  formatter: this.showRatio ? this.seriesLabelFormat : '{b}'\r\n                },\r\n                emphasis: {\r\n                  show: seriesLabelEmphasis,\r\n                  textStyle: {\r\n                    fontSize: '14',\r\n                    fontWeight: 'bold'\r\n                  }\r\n                }\r\n              },\r\n              data: seriesData\r\n            }\r\n          ]\r\n        }\r\n\r\n        return pieOpts\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped></style>\r\n"],"sourceRoot":"src/components/echarts/pie"}]}