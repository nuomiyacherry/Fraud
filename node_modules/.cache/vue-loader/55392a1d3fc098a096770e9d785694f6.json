{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\工作项目\\部反诈\\src\\components\\echarts\\bar\\barChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\components\\echarts\\bar\\barChart.vue","mtime":1598758386905},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\r\nimport globalChartMixin from \"mixins/globalChartMixin\"\r\nimport gridChartMixin from \"mixins/gridChartMixin\"\r\nimport axisChartMixin from \"mixins/axisChartMixin\"\r\nimport colorChartMixin from \"mixins/colorChartMixin\"\r\nimport tooltipChartMixin from \"mixins/tooltipChartMixin\"\r\nimport storage from \"utils/storage\"\r\nimport { getMaxValue, getMinValue, getColumnMaxValue } from \"constants/utils\"\r\nimport { getNationalPng, getCountryImg } from \"@/constants/country\"\r\nimport ECharts from \"vue-echarts/components/ECharts\"\r\nimport \"echarts/lib/chart/bar\"\r\nimport \"echarts/lib/component/tooltip\"\r\nimport \"echarts/lib/component/legend\"\r\nimport \"echarts/lib/component/legendScroll\"\r\nimport \"echarts/lib/component/title\"\r\nimport echarts from 'echarts'\r\nconst chartColors = storage.get(\"tColors\")\r\n\r\nexport default {\r\n  name: \"barChart\",\r\n  components: { ECharts },\r\n  mixins: [\r\n    globalChartMixin,\r\n    axisChartMixin,\r\n    gridChartMixin,\r\n    colorChartMixin,\r\n    tooltipChartMixin\r\n  ],\r\n  props: {\r\n    chartData: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          legendData: [\"IP\", \"IPV4\"],\r\n          seriesData: [\r\n            [16672, 14345, 19876, 22098],\r\n            [12672, 19345, 18876, 10098]\r\n          ],\r\n          categoryData: [\"IDC\", \"IRCS\", \"CDN\", \"DNS\"]\r\n        }\r\n      }\r\n    },\r\n    tipData: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    colors: {\r\n      type: Array,\r\n      default: () => chartColors.bar.colors\r\n    },\r\n    barStack: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    barCategoryGap: {\r\n      type: String,\r\n      default: \"40%\"\r\n    },\r\n    barBorderRadius: {\r\n      type: Array,\r\n      default: () => [0, 0, 0, 0]\r\n    },\r\n    labelShow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    barGradientShow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    barGradientStartColors: {\r\n      type: Array,\r\n      default: () => chartColors.bar.gradualStart\r\n    },\r\n    barGradientEndColors: {\r\n      type: Array,\r\n      default: () => chartColors.bar.gradualEnd\r\n    },\r\n    barShadowShow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    barShadowRadius: {\r\n      type: Array,\r\n      default: () => [0, 0, 0, 0]\r\n    },\r\n    barShadowColors: {\r\n      type: String,\r\n      default: chartColors.bar.shadow\r\n    },\r\n    barWidth: {\r\n      type: [Number, String],\r\n      default: \"auto\"\r\n    },\r\n    hasNational: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      chartName: \"[柱状图模板]\",\r\n      startColors: this.barGradientStartColors,\r\n      endColors: this.barGradientEndColors,\r\n      currColors: []\r\n    }\r\n  },\r\n  mounted() {\r\n    this.createTplCode(\"BarChart\")\r\n  },\r\n  watch: {\r\n    // chartData(newVal, oldVal) {\r\n    //   // console.log(`${this.chartName}chartData[新值:${newVal};旧值:${oldVal}]`)\r\n    //   this.refresh()\r\n    // },\r\n    chartData: {\r\n      handler(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      deep: true\r\n    },\r\n    colors(newVal, oldVal) {\r\n      // console.log(`${this.chartName}colors[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barStack(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barStack[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barCategoryGap(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barCategoryGap[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barBorderRadius(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barBorderRadius[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barShadowRadius(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barShadowRadius[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    labelShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}labelShow[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barGradientShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barGradientShow[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barGradientStartColors(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barGradientStartColors[新值:${newVal};旧值:${oldVal}]`)\r\n      this.startColors = newVal\r\n      this.refresh()\r\n    },\r\n    barGradientEndColors(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barGradientEndColors[新值:${newVal};旧值:${oldVal}]`)\r\n      this.endColors = newVal\r\n      this.refresh()\r\n    },\r\n    barShadowShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barShadowShow[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barShadowColors(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barShadowColors[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    hasNational(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barShadowColors[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    tipData(newVal, oldVal) {\r\n      this.refresh()\r\n    }\r\n  },\r\n  methods: {\r\n    setOptions() {\r\n      let [legendData, seriesData, categoryData] = [\r\n        this.chartData.legendData,\r\n        this.chartData.seriesData,\r\n        this.chartData.categoryData\r\n      ]\r\n      let [seriesLabelPosition, seriesLabelShow, series, maxSeriesData] = [\r\n        \"inside\",\r\n        false,\r\n        [],\r\n        []\r\n      ]\r\n      let [maxValue, minValue] = [0, 0]\r\n      let [barCategoryGap, barStack] = [this.barCategoryGap, this.barStack]\r\n      const _this = this\r\n      if (this.barStack) {\r\n        if (this.labelShow) {\r\n          seriesLabelShow = true\r\n          this.xAxisValue\r\n            ? (seriesLabelPosition = \"insideRight\")\r\n            : (seriesLabelPosition = \"insideTop\")\r\n        }\r\n        if (this.barShadowShow) {\r\n          if (legendData && legendData.length !== 1) {\r\n            barCategoryGap = \"0%\"\r\n            barStack = true\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (legendData && legendData.length !== 0) {\r\n        legendData.forEach((item, index) => {\r\n          maxValue = getMaxValue(seriesData[index], maxValue)\r\n          minValue = getMinValue(seriesData[index], minValue)\r\n          if (this.tipData.length !== 0) {\r\n            seriesData[0] = this.tipData\r\n          }\r\n          series.push({\r\n            name: item,\r\n            type: \"bar\",\r\n            barCategoryGap: barCategoryGap,\r\n            label: {\r\n              normal: {\r\n                show: seriesLabelShow,\r\n                position: seriesLabelPosition\r\n              }\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                barBorderRadius: this.barBorderRadius,\r\n                color: this.colors[index]\r\n              }\r\n            },\r\n            stack: barStack,\r\n            data: seriesData[index],\r\n            barMaxWidth: \"20\",\r\n            barWidth: this.barWidth\r\n          })\r\n          if (this.barGradientShow) {\r\n            this.initColors()\r\n            series[index].itemStyle.normal = {\r\n              barBorderRadius: this.barBorderRadius,\r\n              color: this.currColors[index]\r\n            }\r\n          }\r\n        })\r\n      }\r\n      if (this.barStack && this.barShadowShow) {\r\n        if (legendData && legendData.length !== 1) {\r\n          maxValue = getColumnMaxValue(seriesData)\r\n        }\r\n        if (categoryData) {\r\n          for (var i = 0; i < categoryData.length; i++) {\r\n            maxSeriesData.push(maxValue + 20)\r\n          }\r\n        }\r\n        series.push({\r\n          name: \"阴影\",\r\n          type: \"bar\",\r\n          barGap: \"-100%\",\r\n          z: 0,\r\n          label: {\r\n            normal: {\r\n              show: seriesLabelShow,\r\n              position: seriesLabelPosition\r\n            }\r\n          },\r\n          itemStyle: {\r\n            normal: {\r\n              barBorderRadius: this.barShadowRadius,\r\n              color: this.barShadowColors\r\n            }\r\n          },\r\n          data: maxSeriesData,\r\n          barMaxWidth: \"20\",\r\n          barWidth: this.barWidth\r\n        })\r\n      }\r\n      let barOpt = this.returnAxisOptions(\r\n        legendData,\r\n        categoryData,\r\n        series,\r\n        maxValue,\r\n        minValue\r\n      )\r\n      if (this.tipData.length !== 0) {\r\n        barOpt.tooltip = {\r\n          formatter: function(params) {\r\n            var name = params.name\r\n            var str = ''\r\n            if (_this.tipData.length !== 0) {\r\n              var title = params.data.name + '(' + params.data.country + ')'\r\n              return `${title}<br /> ${params.seriesName}` + ' : ' + params.data.value \r\n            } else {\r\n              params.forEach((item, i) => {\r\n                if (item.seriesName !== '阴影') {\r\n                  str += item.seriesName + ' : ' + item.value + '<br />'\r\n                }\r\n              })\r\n              return `${name}<br /> ${str}`\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return barOpt\r\n    },\r\n    countryLabelFormatter(barOpt) {\r\n      const _this = this\r\n      const label = this.xAxisValue ? \"yAxis\" : \"xAxis\"\r\n      barOpt[label].axisLabel.padding = [0, 0, 0, 12]\r\n      barOpt[label].axisLabel.formatter = function(val, index) {\r\n        if (_this.hasNational) {\r\n          let name = getNationalPng(val)\r\n          return \"{\" + name + \"| }\" + \"  \" + \"{value|\" + val + \"}\"\r\n        } else {\r\n          return val\r\n        }\r\n      }\r\n      barOpt[label].axisLabel.rich = {\r\n        value: {\r\n          lineHeight: 30\r\n        },\r\n        ...getCountryImg()\r\n      }\r\n      return barOpt\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["barChart.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"barChart.vue","sourceRoot":"src/components/echarts/bar","sourcesContent":["<template>\r\n  <ECharts :options=\"options\" :autoresize=\"true\"></ECharts>\r\n</template>\r\n\r\n<script>\r\nimport globalChartMixin from \"mixins/globalChartMixin\"\r\nimport gridChartMixin from \"mixins/gridChartMixin\"\r\nimport axisChartMixin from \"mixins/axisChartMixin\"\r\nimport colorChartMixin from \"mixins/colorChartMixin\"\r\nimport tooltipChartMixin from \"mixins/tooltipChartMixin\"\r\nimport storage from \"utils/storage\"\r\nimport { getMaxValue, getMinValue, getColumnMaxValue } from \"constants/utils\"\r\nimport { getNationalPng, getCountryImg } from \"@/constants/country\"\r\nimport ECharts from \"vue-echarts/components/ECharts\"\r\nimport \"echarts/lib/chart/bar\"\r\nimport \"echarts/lib/component/tooltip\"\r\nimport \"echarts/lib/component/legend\"\r\nimport \"echarts/lib/component/legendScroll\"\r\nimport \"echarts/lib/component/title\"\r\nimport echarts from 'echarts'\r\nconst chartColors = storage.get(\"tColors\")\r\n\r\nexport default {\r\n  name: \"barChart\",\r\n  components: { ECharts },\r\n  mixins: [\r\n    globalChartMixin,\r\n    axisChartMixin,\r\n    gridChartMixin,\r\n    colorChartMixin,\r\n    tooltipChartMixin\r\n  ],\r\n  props: {\r\n    chartData: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          legendData: [\"IP\", \"IPV4\"],\r\n          seriesData: [\r\n            [16672, 14345, 19876, 22098],\r\n            [12672, 19345, 18876, 10098]\r\n          ],\r\n          categoryData: [\"IDC\", \"IRCS\", \"CDN\", \"DNS\"]\r\n        }\r\n      }\r\n    },\r\n    tipData: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    colors: {\r\n      type: Array,\r\n      default: () => chartColors.bar.colors\r\n    },\r\n    barStack: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    barCategoryGap: {\r\n      type: String,\r\n      default: \"40%\"\r\n    },\r\n    barBorderRadius: {\r\n      type: Array,\r\n      default: () => [0, 0, 0, 0]\r\n    },\r\n    labelShow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    barGradientShow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    barGradientStartColors: {\r\n      type: Array,\r\n      default: () => chartColors.bar.gradualStart\r\n    },\r\n    barGradientEndColors: {\r\n      type: Array,\r\n      default: () => chartColors.bar.gradualEnd\r\n    },\r\n    barShadowShow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    barShadowRadius: {\r\n      type: Array,\r\n      default: () => [0, 0, 0, 0]\r\n    },\r\n    barShadowColors: {\r\n      type: String,\r\n      default: chartColors.bar.shadow\r\n    },\r\n    barWidth: {\r\n      type: [Number, String],\r\n      default: \"auto\"\r\n    },\r\n    hasNational: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      chartName: \"[柱状图模板]\",\r\n      startColors: this.barGradientStartColors,\r\n      endColors: this.barGradientEndColors,\r\n      currColors: []\r\n    }\r\n  },\r\n  mounted() {\r\n    this.createTplCode(\"BarChart\")\r\n  },\r\n  watch: {\r\n    // chartData(newVal, oldVal) {\r\n    //   // console.log(`${this.chartName}chartData[新值:${newVal};旧值:${oldVal}]`)\r\n    //   this.refresh()\r\n    // },\r\n    chartData: {\r\n      handler(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      deep: true\r\n    },\r\n    colors(newVal, oldVal) {\r\n      // console.log(`${this.chartName}colors[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barStack(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barStack[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barCategoryGap(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barCategoryGap[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barBorderRadius(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barBorderRadius[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barShadowRadius(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barShadowRadius[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    labelShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}labelShow[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barGradientShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barGradientShow[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barGradientStartColors(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barGradientStartColors[新值:${newVal};旧值:${oldVal}]`)\r\n      this.startColors = newVal\r\n      this.refresh()\r\n    },\r\n    barGradientEndColors(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barGradientEndColors[新值:${newVal};旧值:${oldVal}]`)\r\n      this.endColors = newVal\r\n      this.refresh()\r\n    },\r\n    barShadowShow(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barShadowShow[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    barShadowColors(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barShadowColors[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    hasNational(newVal, oldVal) {\r\n      // console.log(`${this.chartName}barShadowColors[新值:${newVal};旧值:${oldVal}]`)\r\n      this.refresh()\r\n    },\r\n    tipData(newVal, oldVal) {\r\n      this.refresh()\r\n    }\r\n  },\r\n  methods: {\r\n    setOptions() {\r\n      let [legendData, seriesData, categoryData] = [\r\n        this.chartData.legendData,\r\n        this.chartData.seriesData,\r\n        this.chartData.categoryData\r\n      ]\r\n      let [seriesLabelPosition, seriesLabelShow, series, maxSeriesData] = [\r\n        \"inside\",\r\n        false,\r\n        [],\r\n        []\r\n      ]\r\n      let [maxValue, minValue] = [0, 0]\r\n      let [barCategoryGap, barStack] = [this.barCategoryGap, this.barStack]\r\n      const _this = this\r\n      if (this.barStack) {\r\n        if (this.labelShow) {\r\n          seriesLabelShow = true\r\n          this.xAxisValue\r\n            ? (seriesLabelPosition = \"insideRight\")\r\n            : (seriesLabelPosition = \"insideTop\")\r\n        }\r\n        if (this.barShadowShow) {\r\n          if (legendData && legendData.length !== 1) {\r\n            barCategoryGap = \"0%\"\r\n            barStack = true\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (legendData && legendData.length !== 0) {\r\n        legendData.forEach((item, index) => {\r\n          maxValue = getMaxValue(seriesData[index], maxValue)\r\n          minValue = getMinValue(seriesData[index], minValue)\r\n          if (this.tipData.length !== 0) {\r\n            seriesData[0] = this.tipData\r\n          }\r\n          series.push({\r\n            name: item,\r\n            type: \"bar\",\r\n            barCategoryGap: barCategoryGap,\r\n            label: {\r\n              normal: {\r\n                show: seriesLabelShow,\r\n                position: seriesLabelPosition\r\n              }\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                barBorderRadius: this.barBorderRadius,\r\n                color: this.colors[index]\r\n              }\r\n            },\r\n            stack: barStack,\r\n            data: seriesData[index],\r\n            barMaxWidth: \"20\",\r\n            barWidth: this.barWidth\r\n          })\r\n          if (this.barGradientShow) {\r\n            this.initColors()\r\n            series[index].itemStyle.normal = {\r\n              barBorderRadius: this.barBorderRadius,\r\n              color: this.currColors[index]\r\n            }\r\n          }\r\n        })\r\n      }\r\n      if (this.barStack && this.barShadowShow) {\r\n        if (legendData && legendData.length !== 1) {\r\n          maxValue = getColumnMaxValue(seriesData)\r\n        }\r\n        if (categoryData) {\r\n          for (var i = 0; i < categoryData.length; i++) {\r\n            maxSeriesData.push(maxValue + 20)\r\n          }\r\n        }\r\n        series.push({\r\n          name: \"阴影\",\r\n          type: \"bar\",\r\n          barGap: \"-100%\",\r\n          z: 0,\r\n          label: {\r\n            normal: {\r\n              show: seriesLabelShow,\r\n              position: seriesLabelPosition\r\n            }\r\n          },\r\n          itemStyle: {\r\n            normal: {\r\n              barBorderRadius: this.barShadowRadius,\r\n              color: this.barShadowColors\r\n            }\r\n          },\r\n          data: maxSeriesData,\r\n          barMaxWidth: \"20\",\r\n          barWidth: this.barWidth\r\n        })\r\n      }\r\n      let barOpt = this.returnAxisOptions(\r\n        legendData,\r\n        categoryData,\r\n        series,\r\n        maxValue,\r\n        minValue\r\n      )\r\n      if (this.tipData.length !== 0) {\r\n        barOpt.tooltip = {\r\n          formatter: function(params) {\r\n            var name = params.name\r\n            var str = ''\r\n            if (_this.tipData.length !== 0) {\r\n              var title = params.data.name + '(' + params.data.country + ')'\r\n              return `${title}<br /> ${params.seriesName}` + ' : ' + params.data.value \r\n            } else {\r\n              params.forEach((item, i) => {\r\n                if (item.seriesName !== '阴影') {\r\n                  str += item.seriesName + ' : ' + item.value + '<br />'\r\n                }\r\n              })\r\n              return `${name}<br /> ${str}`\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return barOpt\r\n    },\r\n    countryLabelFormatter(barOpt) {\r\n      const _this = this\r\n      const label = this.xAxisValue ? \"yAxis\" : \"xAxis\"\r\n      barOpt[label].axisLabel.padding = [0, 0, 0, 12]\r\n      barOpt[label].axisLabel.formatter = function(val, index) {\r\n        if (_this.hasNational) {\r\n          let name = getNationalPng(val)\r\n          return \"{\" + name + \"| }\" + \"  \" + \"{value|\" + val + \"}\"\r\n        } else {\r\n          return val\r\n        }\r\n      }\r\n      barOpt[label].axisLabel.rich = {\r\n        value: {\r\n          lineHeight: 30\r\n        },\r\n        ...getCountryImg()\r\n      }\r\n      return barOpt\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped></style>\r\n"]}]}