{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\工作项目\\部反诈\\src\\components\\echarts\\pie\\pieChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\components\\echarts\\pie\\pieChart.vue","mtime":1598758386873},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport globalChartMixin from 'mixins/globalChartMixin'\nimport ECharts from 'vue-echarts/components/ECharts'\nimport 'echarts/lib/chart/pie'\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/legend'\nimport 'echarts/lib/component/legendScroll'\nimport 'echarts/lib/component/title'\nimport storage from \"utils/storage\"\nimport { deepClone } from 'utils/util'\nconst chartColors = storage.get('tColors')\nexport default {\n  name: 'pieChart',\n  components: { ECharts },\n  mixins: [ globalChartMixin ],\n  props: {\n    chartData: {\n      type: Object,\n      default: () => {\n        return {\n          // legendData: ['直接访问', '邮件营销', '联盟广告', '视频广告', '搜索引擎'],\n          seriesData: [\n          { value: 335, name: '直接访问' },\n          { value: 310, name: '邮件营销' },\n          { value: 234, name: '联盟广告' },\n          { value: 135, name: '视频广告' },\n          { value: 1548, name: '搜索引擎' }\n          ]\n        }\n      }\n    },\n    colors: {\n      type: Array,\n      default: () => chartColors.pie.colors\n    },\n    pieName: {\n      type: String,\n      default: '分布情况'\n    },\n    seriesLabelShow: {\n      type: Boolean,\n      default: false\n    },\n    seriesLabelPosition: {\n      type: String,\n      default: ''\n    },\n    seriesLabelFormat: {\n      type: String,\n      default: '{b}\\n{d}%'\n    },\n    pieAutoPlay: {\n      type: Boolean,\n      default: false\n    },\n    center: {\n      type: Array,\n      default: () => (['50%', '50%'])\n    },\n    radius: {\n      type: Array,\n      default: () => (['40%', '65%'])\n    },\n    showPercent: {\n      type: Boolean,\n      default: false\n    },\n    pieAutoPlayNumColor: {\n      type: String,\n      default: chartColors.pie.autoPlayNum\n    },\n    pieAutoPlayNumFontSize: {\n      type: String,\n      default: '22'\n    },\n    pieAutoPlayNumFontWeight: {\n      type: String,\n      default: 'bold'\n    },\n    pieAutoPlayTextColor: {\n      type: String,\n      default: chartColors.pie.autoPlayText\n    },\n    pieAutoPlayTextFontSize: {\n      type: String,\n      default: '14'\n    },\n    pieAutoPlayTextFontWeight: {\n      type: String,\n      default: 'bold'\n    },\n    showRatio: {\n      type: Boolean,\n      default: true\n    },\n    seriesLabelEmphasisShow: {\n      type: Boolean,\n      default: true\n    },\n    roseType: {\n      type: [Boolean, String],\n      default: () => false\n    }\n  },\n  data() {\n    return {\n      chartName: '[饼图模板]',\n      timeFlag: null\n    }\n  },\n  mounted() {\n  },\n  watch: {\n    chartData: {\n      handler(newVal, oldVal) {\n        this.refresh()\n      },\n      deep: true\n    },\n    colors(newVal, oldVal) {\n      this.refresh()\n    },\n    pieName(newVal, oldVal) {\n      this.refresh()\n    },\n    seriesLabelShow(newVal, oldVal) {\n      this.refresh()\n    },\n    pieAutoPlay(newVal, oldVal) {\n      this.refresh()\n    },\n    center(newVal, oldVal) {\n      this.refresh()\n    },\n    radius(newVal, oldVal) {\n      this.refresh()\n    },\n    showPercent(newVal, oldVal) {\n      this.refresh()\n    },\n    pieAutoPlayNumColor(newVal, oldVal) {\n      this.refresh()\n    },\n    pieAutoPlayNumFontSize(newVal, oldVal) {\n      this.refresh()\n    },\n    pieAutoPlayNumFontWeight(newVal, oldVal) {\n      this.refresh()\n    },\n    pieAutoPlayTextColor(newVal, oldVal) {\n      this.refresh()\n    },\n    pieAutoPlayTextFontSize(newVal, oldVal) {\n      this.refresh()\n    },\n    pieAutoPlayTextFontWeight(newVal, oldVal) {\n      this.refresh()\n    },\n    showRatio(newVal, oldVal) {\n      this.refresh()\n    },\n    seriesLabelEmphasisShow(newVal, oldVal) {\n      this.refresh()\n    }\n  },\n  beforeDestroy() {\n    clearInterval(this.timeFlag)\n  },\n  methods: {\n    refreshCallback() {\n      if (this.pieAutoPlay) {\n        const _data = this.chartData.seriesData ? deepClone(this.chartData.seriesData) : []\n        this.startPieAutoPlay(_data)\n      }\n    },\n    allData(data) {\n      var allNum = 0\n      for (var a = 0; a < data.length; a++) {\n        allNum += data[a].value\n      }\n      return allNum\n    },\n    startPieAutoPlay(data) {\n      let pieIndex = 0\n      if(!data || data.length === 0) {\n        return\n      }\n      clearInterval(this.timeFlag)\n      this.timeFlag = setInterval(() => {\n        if (pieIndex > data.length - 1) {\n          pieIndex = 0\n        }\n        for (let i = 0; i < data.length; i++) {\n          this.options.series[1].data[i].selected = false\n        }\n        if (!data[pieIndex]) return\n        this.options.series[1].data[pieIndex].selected = true\n        data.splice(pieIndex, 1, data[pieIndex])\n        if (this.showPercent) {\n          this.options.series[0].data[0].label.normal.formatter = (this.options.series[1].data[pieIndex].value / this.allData(data) * 100).toFixed(1) + '%'\n        } else {\n          this.options.series[0].data[0].label.normal.formatter = this.options.series[1].data[pieIndex].value.toFixed(0)\n        }\n        this.options.series[0].data[1].label.normal.formatter = '\\n\\n\\n' + this.options.series[1].data[pieIndex].name\n        pieIndex++\n      }, 2000)\n    },\n    getLegendData(data) {\n      const legendData = []\n      if(data && data.length !== 0) {\n        data.forEach(item => {\n          legendData.push(item.name)\n        })\n      }\n      return legendData\n    },\n    setOptions() {\n      let seriesData = this.chartData.seriesData \n      let legendData = this.getLegendData(seriesData)\n      let [ seriesLabelPos, seriesLabelEmphasis ] = [ '', true ]\n      if (this.seriesLabelShow) {\n        seriesLabelPos = 'outside'\n      } else {\n        seriesLabelPos = 'center'\n      }\n      if (this.pieAutoPlay) {\n        seriesLabelEmphasis = false\n      } else {\n        this.seriesLabelEmphasisShow\n          ? (seriesLabelEmphasis = true)\n          : (seriesLabelEmphasis = false)\n      }\n      // const _this = this\n      // console.log(this.colors, '=====colors====')\n      let pieOpts = {\n        color: this.colors,\n        backgroundColor: 'transparent',\n        tooltip: {\n          show: this.tooltipShow,\n          trigger: 'item',\n          formatter: '{a} <br/>{b} : {c} ({d}%)'\n        },\n        legend: {\n          ...this.legendOpt(),\n          show: this.legendShow,\n          data: legendData,\n          textStyle: {\n            fontSize: this.legendFontSize,\n            color: this.legendTextColor\n          },\n          pageTextStyle: {\n            color: this.legendPageTextColor\n          }\n        },\n        series: [\n          {\n            name: '',\n            type: 'pie',\n            hoverAnimation: false,\n            radius: [200, 200],\n            // center: ['50%', '43%'],\n            center: this.center,\n            label: {\n              normal: {\n                position: 'center'\n              }\n            },\n            data: [\n              {\n                value: 0,\n                tooltip: {\n                  show: false\n                },\n                label: {\n                  normal: {\n                    formatter: '',\n                    textStyle: {\n                      color: this.pieAutoPlayNumColor,\n                      fontSize: this.pieAutoPlayNumFontSize,\n                      fontWeight: this.pieAutoPlayNumFontWeight\n                    }\n                  }\n                }\n              },\n              {\n                tooltip: {\n                  show: false\n                },\n                label: {\n                  normal: {\n                    formatter: '',\n                    textStyle: {\n                      color: this.pieAutoPlayTextColor,\n                      fontSize: this.pieAutoPlayTextFontSize,\n                      fontWeight: this.pieAutoPlayTextFontWeight\n                    }\n                  }\n                }\n              }\n            ]\n          },\n          {\n            name: this.pieName,\n            type: 'pie',\n            radius: this.radius,\n            center: this.center,\n            roseType: this.roseType,\n            hoverAnimation: true,\n            avoidLabelOverlap: false,\n            itemStyle: {\n              emphasis: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                // color: function(params) {\n                //   const num = _this.colors.length\n                //   return _this.colors[params.dataIndex % num]\n                // },\n                shadowColor: chartColors.shadowColor\n              }\n            },\n            label: {\n              normal: {\n                show: this.seriesLabelShow,\n                position: this.seriesLabelPosition || seriesLabelPos,\n                formatter: this.showRatio ? this.seriesLabelFormat : '{b}'\n              },\n              emphasis: {\n                show: seriesLabelEmphasis,\n                textStyle: {\n                  fontSize: '14',\n                  fontWeight: 'bold'\n                }\n              }\n            },\n            data: seriesData\n          }\n        ]\n      }\n\n      return pieOpts\n    }\n  }\n}\n",{"version":3,"sources":["pieChart.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"pieChart.vue","sourceRoot":"src/components/echarts/pie","sourcesContent":["<template>\r\n  <ECharts :options=\"options\" :autoresize=\"true\"></ECharts>\r\n</template>\r\n\r\n<script>\r\n  import globalChartMixin from 'mixins/globalChartMixin'\r\n  import ECharts from 'vue-echarts/components/ECharts'\r\n  import 'echarts/lib/chart/pie'\r\n  import 'echarts/lib/component/tooltip'\r\n  import 'echarts/lib/component/legend'\r\n  import 'echarts/lib/component/legendScroll'\r\n  import 'echarts/lib/component/title'\r\n  import storage from \"utils/storage\"\r\n  import { deepClone } from 'utils/util'\r\n  const chartColors = storage.get('tColors')\r\n  export default {\r\n    name: 'pieChart',\r\n    components: { ECharts },\r\n    mixins: [ globalChartMixin ],\r\n    props: {\r\n      chartData: {\r\n        type: Object,\r\n        default: () => {\r\n          return {\r\n            // legendData: ['直接访问', '邮件营销', '联盟广告', '视频广告', '搜索引擎'],\r\n            seriesData: [\r\n            { value: 335, name: '直接访问' },\r\n            { value: 310, name: '邮件营销' },\r\n            { value: 234, name: '联盟广告' },\r\n            { value: 135, name: '视频广告' },\r\n            { value: 1548, name: '搜索引擎' }\r\n            ]\r\n          }\r\n        }\r\n      },\r\n      colors: {\r\n        type: Array,\r\n        default: () => chartColors.pie.colors\r\n      },\r\n      pieName: {\r\n        type: String,\r\n        default: '分布情况'\r\n      },\r\n      seriesLabelShow: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      seriesLabelPosition: {\r\n        type: String,\r\n        default: ''\r\n      },\r\n      seriesLabelFormat: {\r\n        type: String,\r\n        default: '{b}\\n{d}%'\r\n      },\r\n      pieAutoPlay: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      center: {\r\n        type: Array,\r\n        default: () => (['50%', '50%'])\r\n      },\r\n      radius: {\r\n        type: Array,\r\n        default: () => (['40%', '65%'])\r\n      },\r\n      showPercent: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      pieAutoPlayNumColor: {\r\n        type: String,\r\n        default: chartColors.pie.autoPlayNum\r\n      },\r\n      pieAutoPlayNumFontSize: {\r\n        type: String,\r\n        default: '22'\r\n      },\r\n      pieAutoPlayNumFontWeight: {\r\n        type: String,\r\n        default: 'bold'\r\n      },\r\n      pieAutoPlayTextColor: {\r\n        type: String,\r\n        default: chartColors.pie.autoPlayText\r\n      },\r\n      pieAutoPlayTextFontSize: {\r\n        type: String,\r\n        default: '14'\r\n      },\r\n      pieAutoPlayTextFontWeight: {\r\n        type: String,\r\n        default: 'bold'\r\n      },\r\n      showRatio: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      seriesLabelEmphasisShow: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      roseType: {\r\n        type: [Boolean, String],\r\n        default: () => false\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        chartName: '[饼图模板]',\r\n        timeFlag: null\r\n      }\r\n    },\r\n    mounted() {\r\n    },\r\n    watch: {\r\n      chartData: {\r\n        handler(newVal, oldVal) {\r\n          this.refresh()\r\n        },\r\n        deep: true\r\n      },\r\n      colors(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieName(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      seriesLabelShow(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieAutoPlay(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      center(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      radius(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      showPercent(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieAutoPlayNumColor(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieAutoPlayNumFontSize(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieAutoPlayNumFontWeight(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieAutoPlayTextColor(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieAutoPlayTextFontSize(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      pieAutoPlayTextFontWeight(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      showRatio(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      seriesLabelEmphasisShow(newVal, oldVal) {\r\n        this.refresh()\r\n      }\r\n    },\r\n    beforeDestroy() {\r\n      clearInterval(this.timeFlag)\r\n    },\r\n    methods: {\r\n      refreshCallback() {\r\n        if (this.pieAutoPlay) {\r\n          const _data = this.chartData.seriesData ? deepClone(this.chartData.seriesData) : []\r\n          this.startPieAutoPlay(_data)\r\n        }\r\n      },\r\n      allData(data) {\r\n        var allNum = 0\r\n        for (var a = 0; a < data.length; a++) {\r\n          allNum += data[a].value\r\n        }\r\n        return allNum\r\n      },\r\n      startPieAutoPlay(data) {\r\n        let pieIndex = 0\r\n        if(!data || data.length === 0) {\r\n          return\r\n        }\r\n        clearInterval(this.timeFlag)\r\n        this.timeFlag = setInterval(() => {\r\n          if (pieIndex > data.length - 1) {\r\n            pieIndex = 0\r\n          }\r\n          for (let i = 0; i < data.length; i++) {\r\n            this.options.series[1].data[i].selected = false\r\n          }\r\n          if (!data[pieIndex]) return\r\n          this.options.series[1].data[pieIndex].selected = true\r\n          data.splice(pieIndex, 1, data[pieIndex])\r\n          if (this.showPercent) {\r\n            this.options.series[0].data[0].label.normal.formatter = (this.options.series[1].data[pieIndex].value / this.allData(data) * 100).toFixed(1) + '%'\r\n          } else {\r\n            this.options.series[0].data[0].label.normal.formatter = this.options.series[1].data[pieIndex].value.toFixed(0)\r\n          }\r\n          this.options.series[0].data[1].label.normal.formatter = '\\n\\n\\n' + this.options.series[1].data[pieIndex].name\r\n          pieIndex++\r\n        }, 2000)\r\n      },\r\n      getLegendData(data) {\r\n        const legendData = []\r\n        if(data && data.length !== 0) {\r\n          data.forEach(item => {\r\n            legendData.push(item.name)\r\n          })\r\n        }\r\n        return legendData\r\n      },\r\n      setOptions() {\r\n        let seriesData = this.chartData.seriesData \r\n        let legendData = this.getLegendData(seriesData)\r\n        let [ seriesLabelPos, seriesLabelEmphasis ] = [ '', true ]\r\n        if (this.seriesLabelShow) {\r\n          seriesLabelPos = 'outside'\r\n        } else {\r\n          seriesLabelPos = 'center'\r\n        }\r\n        if (this.pieAutoPlay) {\r\n          seriesLabelEmphasis = false\r\n        } else {\r\n          this.seriesLabelEmphasisShow\r\n            ? (seriesLabelEmphasis = true)\r\n            : (seriesLabelEmphasis = false)\r\n        }\r\n        // const _this = this\r\n        // console.log(this.colors, '=====colors====')\r\n        let pieOpts = {\r\n          color: this.colors,\r\n          backgroundColor: 'transparent',\r\n          tooltip: {\r\n            show: this.tooltipShow,\r\n            trigger: 'item',\r\n            formatter: '{a} <br/>{b} : {c} ({d}%)'\r\n          },\r\n          legend: {\r\n            ...this.legendOpt(),\r\n            show: this.legendShow,\r\n            data: legendData,\r\n            textStyle: {\r\n              fontSize: this.legendFontSize,\r\n              color: this.legendTextColor\r\n            },\r\n            pageTextStyle: {\r\n              color: this.legendPageTextColor\r\n            }\r\n          },\r\n          series: [\r\n            {\r\n              name: '',\r\n              type: 'pie',\r\n              hoverAnimation: false,\r\n              radius: [200, 200],\r\n              // center: ['50%', '43%'],\r\n              center: this.center,\r\n              label: {\r\n                normal: {\r\n                  position: 'center'\r\n                }\r\n              },\r\n              data: [\r\n                {\r\n                  value: 0,\r\n                  tooltip: {\r\n                    show: false\r\n                  },\r\n                  label: {\r\n                    normal: {\r\n                      formatter: '',\r\n                      textStyle: {\r\n                        color: this.pieAutoPlayNumColor,\r\n                        fontSize: this.pieAutoPlayNumFontSize,\r\n                        fontWeight: this.pieAutoPlayNumFontWeight\r\n                      }\r\n                    }\r\n                  }\r\n                },\r\n                {\r\n                  tooltip: {\r\n                    show: false\r\n                  },\r\n                  label: {\r\n                    normal: {\r\n                      formatter: '',\r\n                      textStyle: {\r\n                        color: this.pieAutoPlayTextColor,\r\n                        fontSize: this.pieAutoPlayTextFontSize,\r\n                        fontWeight: this.pieAutoPlayTextFontWeight\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              name: this.pieName,\r\n              type: 'pie',\r\n              radius: this.radius,\r\n              center: this.center,\r\n              roseType: this.roseType,\r\n              hoverAnimation: true,\r\n              avoidLabelOverlap: false,\r\n              itemStyle: {\r\n                emphasis: {\r\n                  shadowBlur: 10,\r\n                  shadowOffsetX: 0,\r\n                  // color: function(params) {\r\n                  //   const num = _this.colors.length\r\n                  //   return _this.colors[params.dataIndex % num]\r\n                  // },\r\n                  shadowColor: chartColors.shadowColor\r\n                }\r\n              },\r\n              label: {\r\n                normal: {\r\n                  show: this.seriesLabelShow,\r\n                  position: this.seriesLabelPosition || seriesLabelPos,\r\n                  formatter: this.showRatio ? this.seriesLabelFormat : '{b}'\r\n                },\r\n                emphasis: {\r\n                  show: seriesLabelEmphasis,\r\n                  textStyle: {\r\n                    fontSize: '14',\r\n                    fontWeight: 'bold'\r\n                  }\r\n                }\r\n              },\r\n              data: seriesData\r\n            }\r\n          ]\r\n        }\r\n\r\n        return pieOpts\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped></style>\r\n"]}]}