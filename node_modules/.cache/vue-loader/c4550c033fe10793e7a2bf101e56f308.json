{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\工作项目\\部反诈\\src\\components\\echarts\\line\\lineChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\components\\echarts\\line\\lineChart.vue","mtime":1598758386799},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport globalChartMixin from 'mixins/globalChartMixin'\nimport gridChartMixin from 'mixins/gridChartMixin'\nimport axisChartMixin from 'mixins/axisChartMixin'\nimport colorChartMixin from 'mixins/colorChartMixin'\nimport tooltipChartMixin from 'mixins/tooltipChartMixin'\nimport storage from \"utils/storage\"\nimport { getMaxValue, getMinValue } from 'constants/utils'\nimport ECharts from 'vue-echarts/components/ECharts'\nimport 'echarts/lib/chart/line'\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/legend'\nimport 'echarts/lib/component/legendScroll'\nimport 'echarts/lib/component/title'\nimport 'echarts/lib/component/markLine'\nimport 'echarts/lib/component/markPoint'\nconst chartColors = storage.get('tColors')\n\nexport default {\n  name: 'lineChart',\n  components: { ECharts },\n  mixins: [ globalChartMixin, axisChartMixin, gridChartMixin, colorChartMixin, tooltipChartMixin ],\n  props: {\n    chartData: {\n      type: Object,\n      default: () => {\n        return {\n          legendData: ['告警事件'],\n          seriesData: [\n            [1432, 1568, 1125, 1359, 1654, 1852, 1523, 1369, 1459, 1854, 1635, 1364]\n          ],\n          categoryData: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']\n        }\n      }\n    },\n    colors: {\n      type: Array,\n      default: () => chartColors.line.colors\n    },\n    smooth: {\n      type: Boolean,\n      default: false\n    },\n    markLineAverage: {\n      type: Boolean,\n      default: false\n    },\n    markLineAverageLabel: {\n      type: String,\n      default: '平均值'\n    },\n    markLineColor: {\n      type: String,\n      default: chartColors.line.markLine\n    },\n    showLineArea: {\n      type: Boolean,\n      default: false\n    },\n    areaStartColors: {\n      type: Array,\n      default: () => chartColors.line.gradualStart\n    },\n    areaEndColors: {\n      type: Array,\n      default: () => chartColors.line.gradualEnd\n    },\n    dataZoomShow: {\n      type: Boolean,\n      default: false\n    },\n    dataZoomStart: {\n      type: Number,\n      default: 0\n    },\n    dataZoomEnd: {\n      type: Number,\n      default: 100\n    },\n    handleColor: {\n      type: String,\n      default: chartColors.dataZoomColor.handleColor\n    },\n    backgroundColor: {\n      type: String,\n      default: chartColors.dataZoomColor.backgroundColor\n    },\n    fillerColor: {\n      type: String,\n      default: chartColors.dataZoomColor.fillerColor\n    },\n    dataZoomTextColor: {\n      type: String,\n      default: chartColors.dataZoomColor.textColor\n    }\n  },\n  data() {\n    return {\n      chartName: '[折线图模板]',\n      startColors: this.areaStartColors,\n      endColors: this.areaEndColors,\n      currColors: []\n    }\n  },\n  watch: {\n    chartData: {\n      handler(newVal, oldVal) {\n        this.refresh()\n      },\n      deep: true\n    },\n    colors() {\n      // console.log(`${this.chartName}colors[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh()\n    },\n    smooth(newVal, oldVal) {\n      // console.log(`${this.chartName}smooth[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh()\n    },\n    markLineAverage(newVal, oldVal) {\n      // console.log(`${this.chartName}markLineAverage[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh()\n    },\n    markLineColor(newVal, oldVal) {\n      // console.log(`${this.chartName}markLineColor[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh()\n    },\n    showLineArea(newVal, oldVal) {\n      // console.log(`${this.chartName}showLineArea[新值:${this.newVal};旧值:${this.oldVal}]`)\n      this.refresh()\n    },\n    areaStartColors(newVal, oldVal) {\n      // console.log(`${this.chartName}areaStartColors[新值:${newVal};旧值:${oldVal}]`)\n      this.startColors = newVal\n      this.refresh()\n    },\n    areaEndColors(newVal, oldVal) {\n      // console.log(`${this.chartName}areaEndColors[新值:${newVal};旧值:${oldVal}]`)\n      this.endColors = newVal\n      this.refresh()\n    },\n    dataZoomShow(newVal, oldVal) {\n      this.refresh()\n    },\n    handleColor(newVal, oldVal) {\n      this.refresh()\n    },\n    backgroundColor(newVal, oldVal) {\n      this.refresh()\n    },\n    fillerColor(newVal, oldVal) {\n      this.refresh()\n    },\n    dataZoomTextColor(newVal, oldVal) {\n      this.refresh()\n    }\n  },\n  computed: {},\n  created() {\n    if (this.currColors.length === 0) {\n      this.initAreaColors()\n    }\n  },\n  methods: {\n    initAreaColors() {\n      this.colors.forEach((item, index) => {\n        this.currColors.push({\n          type: 'linear',\n          x: 0,\n          y: 0,\n          x2: 0,\n          y2: 1,\n          colorStops: [\n            {\n              offset: 0,\n              color: this.areaStartColors[index] // 0% 处的颜色\n            },\n            {\n              offset: 1,\n              color: this.areaEndColors[index] // 100% 处的颜色\n            }\n          ]\n        })\n      })\n    },\n    markLineAverageData(item, index) {\n      // 判断是否绘制平均值标线\n      let oMarkLineAverage = {}\n      if (this.markLineAverage) {\n        oMarkLineAverage = {\n          markLine: {\n            precision: 0,\n            lineStyle: {\n              normal: {\n                color: this.markLineColor\n              }\n            },\n            label: {\n              normal: {\n                position: 'middle',\n                formatter: this.markLineAverageLabel + '：{c}'\n              }\n            },\n            data: [{\n              type: 'average',\n              name: '平均值'\n            }]\n          },\n          markPoint: {\n            data: [{\n              type: 'max',\n              name: '最大值'\n            },\n            {\n              type: 'min',\n              name: '最小值'\n            }\n            ]\n          }\n        }\n      }\n      return oMarkLineAverage\n    },\n    setOptions() {\n      let [ legendData, seriesData, categoryData ] = [ this.chartData.legendData, this.chartData.seriesData, this.chartData.categoryData ]\n      const series = []\n      let maxValue = 0, minValue = 0\n\n      // 构造数据\n      if (legendData && legendData.length !== 0) {\n        legendData.forEach((item, index) => {\n          series.push({\n            name: item,\n            type: 'line',\n            smooth: this.smooth,\n            data: seriesData[index],\n            ...this.markLineAverageData(item, index)\n          })\n          if (this.showLineArea) {\n            this.initColors()\n            series[index].areaStyle = {\n              color: this.currColors[index]\n            }\n          }\n          maxValue = getMaxValue(seriesData[index], maxValue)\n          minValue = getMinValue(seriesData[index], minValue)\n        })\n      }\n\n      // 构造折线图的选项\n      let lineOpt = this.returnAxisOptions(legendData, categoryData, series, maxValue, minValue)\n\n      // console.log('lineChart', lineOpt)\n      lineOpt.dataZoom = [\n        {\n          show: this.dataZoomShow,\n          zoomOnMouseWheel: false,\n          moveOnMouseMove: false,\n          realtime: true,\n          handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',\n          handleSize: '20',\n          handleColor: this.handleColor, //h滑动图标的颜色\n          handleStyle: {\n            borderColor: this.handleColor,\n            borderWidth: '1',\n            background: this.handleColor\n          },\n          height: 15, //组件高度\n          backgroundColor: this.backgroundColor,\n          fillerColor: this.fillerColor, //选中范围的填充颜色。\n          borderColor: this.handleColor,\n          textStyle: {\n            color: this.dataZoomTextColor\n          },\n          left: '15%',\n          right: '15%',\n          bottom: 2,\n          start: this.dataZoomStart,\n          end: this.dataZoomEnd,\n          filterMode: 'empty'\n        },\n        {\n          type: 'inside',\n          realtime: true,\n          start: 0,\n          end: 100,\n          filterMode: 'empty',\n          zoomOnMouseWheel: false,\n          moveOnMouseMove: false\n        }\n      ]\n\n      return lineOpt\n    }\n  }\n}\n",{"version":3,"sources":["lineChart.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"lineChart.vue","sourceRoot":"src/components/echarts/line","sourcesContent":["<template>\r\n  <ECharts :options=\"options\" :autoresize=\"true\" @click=\"chartClick\"></ECharts>\r\n</template>\r\n\r\n<script>\r\n  import globalChartMixin from 'mixins/globalChartMixin'\r\n  import gridChartMixin from 'mixins/gridChartMixin'\r\n  import axisChartMixin from 'mixins/axisChartMixin'\r\n  import colorChartMixin from 'mixins/colorChartMixin'\r\n  import tooltipChartMixin from 'mixins/tooltipChartMixin'\r\n  import storage from \"utils/storage\"\r\n  import { getMaxValue, getMinValue } from 'constants/utils'\r\n  import ECharts from 'vue-echarts/components/ECharts'\r\n  import 'echarts/lib/chart/line'\r\n  import 'echarts/lib/component/tooltip'\r\n  import 'echarts/lib/component/legend'\r\n  import 'echarts/lib/component/legendScroll'\r\n  import 'echarts/lib/component/title'\r\n  import 'echarts/lib/component/markLine'\r\n  import 'echarts/lib/component/markPoint'\r\n  const chartColors = storage.get('tColors')\r\n\r\n  export default {\r\n    name: 'lineChart',\r\n    components: { ECharts },\r\n    mixins: [ globalChartMixin, axisChartMixin, gridChartMixin, colorChartMixin, tooltipChartMixin ],\r\n    props: {\r\n      chartData: {\r\n        type: Object,\r\n        default: () => {\r\n          return {\r\n            legendData: ['告警事件'],\r\n            seriesData: [\r\n              [1432, 1568, 1125, 1359, 1654, 1852, 1523, 1369, 1459, 1854, 1635, 1364]\r\n            ],\r\n            categoryData: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']\r\n          }\r\n        }\r\n      },\r\n      colors: {\r\n        type: Array,\r\n        default: () => chartColors.line.colors\r\n      },\r\n      smooth: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      markLineAverage: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      markLineAverageLabel: {\r\n        type: String,\r\n        default: '平均值'\r\n      },\r\n      markLineColor: {\r\n        type: String,\r\n        default: chartColors.line.markLine\r\n      },\r\n      showLineArea: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      areaStartColors: {\r\n        type: Array,\r\n        default: () => chartColors.line.gradualStart\r\n      },\r\n      areaEndColors: {\r\n        type: Array,\r\n        default: () => chartColors.line.gradualEnd\r\n      },\r\n      dataZoomShow: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      dataZoomStart: {\r\n        type: Number,\r\n        default: 0\r\n      },\r\n      dataZoomEnd: {\r\n        type: Number,\r\n        default: 100\r\n      },\r\n      handleColor: {\r\n        type: String,\r\n        default: chartColors.dataZoomColor.handleColor\r\n      },\r\n      backgroundColor: {\r\n        type: String,\r\n        default: chartColors.dataZoomColor.backgroundColor\r\n      },\r\n      fillerColor: {\r\n        type: String,\r\n        default: chartColors.dataZoomColor.fillerColor\r\n      },\r\n      dataZoomTextColor: {\r\n        type: String,\r\n        default: chartColors.dataZoomColor.textColor\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        chartName: '[折线图模板]',\r\n        startColors: this.areaStartColors,\r\n        endColors: this.areaEndColors,\r\n        currColors: []\r\n      }\r\n    },\r\n    watch: {\r\n      chartData: {\r\n        handler(newVal, oldVal) {\r\n          this.refresh()\r\n        },\r\n        deep: true\r\n      },\r\n      colors() {\r\n        // console.log(`${this.chartName}colors[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      smooth(newVal, oldVal) {\r\n        // console.log(`${this.chartName}smooth[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      markLineAverage(newVal, oldVal) {\r\n        // console.log(`${this.chartName}markLineAverage[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      markLineColor(newVal, oldVal) {\r\n        // console.log(`${this.chartName}markLineColor[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      showLineArea(newVal, oldVal) {\r\n        // console.log(`${this.chartName}showLineArea[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      areaStartColors(newVal, oldVal) {\r\n        // console.log(`${this.chartName}areaStartColors[新值:${newVal};旧值:${oldVal}]`)\r\n        this.startColors = newVal\r\n        this.refresh()\r\n      },\r\n      areaEndColors(newVal, oldVal) {\r\n        // console.log(`${this.chartName}areaEndColors[新值:${newVal};旧值:${oldVal}]`)\r\n        this.endColors = newVal\r\n        this.refresh()\r\n      },\r\n      dataZoomShow(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      handleColor(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      backgroundColor(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      fillerColor(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      dataZoomTextColor(newVal, oldVal) {\r\n        this.refresh()\r\n      }\r\n    },\r\n    computed: {},\r\n    created() {\r\n      if (this.currColors.length === 0) {\r\n        this.initAreaColors()\r\n      }\r\n    },\r\n    methods: {\r\n      initAreaColors() {\r\n        this.colors.forEach((item, index) => {\r\n          this.currColors.push({\r\n            type: 'linear',\r\n            x: 0,\r\n            y: 0,\r\n            x2: 0,\r\n            y2: 1,\r\n            colorStops: [\r\n              {\r\n                offset: 0,\r\n                color: this.areaStartColors[index] // 0% 处的颜色\r\n              },\r\n              {\r\n                offset: 1,\r\n                color: this.areaEndColors[index] // 100% 处的颜色\r\n              }\r\n            ]\r\n          })\r\n        })\r\n      },\r\n      markLineAverageData(item, index) {\r\n        // 判断是否绘制平均值标线\r\n        let oMarkLineAverage = {}\r\n        if (this.markLineAverage) {\r\n          oMarkLineAverage = {\r\n            markLine: {\r\n              precision: 0,\r\n              lineStyle: {\r\n                normal: {\r\n                  color: this.markLineColor\r\n                }\r\n              },\r\n              label: {\r\n                normal: {\r\n                  position: 'middle',\r\n                  formatter: this.markLineAverageLabel + '：{c}'\r\n                }\r\n              },\r\n              data: [{\r\n                type: 'average',\r\n                name: '平均值'\r\n              }]\r\n            },\r\n            markPoint: {\r\n              data: [{\r\n                type: 'max',\r\n                name: '最大值'\r\n              },\r\n              {\r\n                type: 'min',\r\n                name: '最小值'\r\n              }\r\n              ]\r\n            }\r\n          }\r\n        }\r\n        return oMarkLineAverage\r\n      },\r\n      setOptions() {\r\n        let [ legendData, seriesData, categoryData ] = [ this.chartData.legendData, this.chartData.seriesData, this.chartData.categoryData ]\r\n        const series = []\r\n        let maxValue = 0, minValue = 0\r\n\r\n        // 构造数据\r\n        if (legendData && legendData.length !== 0) {\r\n          legendData.forEach((item, index) => {\r\n            series.push({\r\n              name: item,\r\n              type: 'line',\r\n              smooth: this.smooth,\r\n              data: seriesData[index],\r\n              ...this.markLineAverageData(item, index)\r\n            })\r\n            if (this.showLineArea) {\r\n              this.initColors()\r\n              series[index].areaStyle = {\r\n                color: this.currColors[index]\r\n              }\r\n            }\r\n            maxValue = getMaxValue(seriesData[index], maxValue)\r\n            minValue = getMinValue(seriesData[index], minValue)\r\n          })\r\n        }\r\n\r\n        // 构造折线图的选项\r\n        let lineOpt = this.returnAxisOptions(legendData, categoryData, series, maxValue, minValue)\r\n\r\n        // console.log('lineChart', lineOpt)\r\n        lineOpt.dataZoom = [\r\n          {\r\n            show: this.dataZoomShow,\r\n            zoomOnMouseWheel: false,\r\n            moveOnMouseMove: false,\r\n            realtime: true,\r\n            handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',\r\n            handleSize: '20',\r\n            handleColor: this.handleColor, //h滑动图标的颜色\r\n            handleStyle: {\r\n              borderColor: this.handleColor,\r\n              borderWidth: '1',\r\n              background: this.handleColor\r\n            },\r\n            height: 15, //组件高度\r\n            backgroundColor: this.backgroundColor,\r\n            fillerColor: this.fillerColor, //选中范围的填充颜色。\r\n            borderColor: this.handleColor,\r\n            textStyle: {\r\n              color: this.dataZoomTextColor\r\n            },\r\n            left: '15%',\r\n            right: '15%',\r\n            bottom: 2,\r\n            start: this.dataZoomStart,\r\n            end: this.dataZoomEnd,\r\n            filterMode: 'empty'\r\n          },\r\n          {\r\n            type: 'inside',\r\n            realtime: true,\r\n            start: 0,\r\n            end: 100,\r\n            filterMode: 'empty',\r\n            zoomOnMouseWheel: false,\r\n            moveOnMouseMove: false\r\n          }\r\n        ]\r\n\r\n        return lineOpt\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}