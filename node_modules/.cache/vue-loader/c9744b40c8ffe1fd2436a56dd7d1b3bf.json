{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\工作项目\\部反诈\\src\\components\\echarts\\map\\visualMapChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\components\\echarts\\map\\visualMapChart.vue","mtime":1598758386853},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\n  import ECharts from 'vue-echarts/components/ECharts'\n  // import globalChartMixin from 'mixins/globalChartMixin'\n  import storage from \"utils/storage\"\n  import { getEnCountry, getCnCountry, getCoord } from 'constants/worldsForMap'\n//eslint-disable-line\n  // import { getMaxValue, getMinValue } from 'constants/utils'\n  // import { visualMapOpt } from 'constants/chartConfig'\n  import visualMapMixin from 'mixins/visualMapMixin'\n  const chartColors = storage.get('tColors')\n\n  export default {\n    name: 'mapLineChart',\n    components: { ECharts },\n    mixins: [\n      // globalChartMixin\n      visualMapMixin\n    ],\n    props: {\n      chartData: {\n        type: Object,\n        default: () => {\n          return {\n            // moveLineData: [\n            //   [{ name: '湖北' }, { name: '北京', value: 95 }],\n            //   [{ name: '湖北' }, { name: '广东', value: 90 }],\n            //   [{ name: '湖北' }, { name: '上海', value: 80 }],\n            //   [{ name: '湖北' }, { name: '西藏', value: 70 }]\n            //   // [{ name: '中国' }, { name: '美国', value: 95 }],\n            //   // [{ name: '中国' }, { name: '英国', value: 90 }],\n            //   // [{ name: '中国' }, { name: '意大利', value: 80 }],\n            //   // [{ name: '中国' }, { name: '澳大利亚', value: 70 }]\n            // ]\n            seriesData: [\n              { name: '北京', value: 1253 },\n              { name: '广东', value: 965 },\n              { name: '上海', value: 732 },\n              { name: '湖北', value: 655 },\n              { name: '湖南', value: 523 },\n              { name: '西藏', value: 501 },\n              { name: '天津', value: 425 },\n              { name: '四川', value: 412 },\n              { name: '浙江', value: 365 }\n            ]\n          }\n        }\n      },\n      // colors: {\n      //   type: Array,\n      //   default: () => chartColors.mapColors\n      // },\n      mapItemAreaColor: {\n        type: String,\n        default: chartColors.visualMap.area\n      },\n      roam: {\n        type: Boolean,\n        default: false\n      },\n      mapItemHoverareaColor: {\n        type: String,\n        default: chartColors.visualMap.hoverArea\n      },\n      mapItemborderColor: {\n        type: String,\n        default: chartColors.visualMap.border\n      },\n      mapLabelColor: {\n        type: String,\n        default: chartColors.visualMap.label\n      },\n      tooltipFormatter: {\n        type: String,\n        default: '告警事件'\n      },\n      mapType: {\n        type: String,\n        default: 'china'\n      },\n      mapZoom: {\n        type: Number,\n        default: 1.1\n      },\n      layoutCenter: {\n        type: Array,\n        default: () => ['52%', '45%']\n      },\n      showTooltip: {\n        type: Boolean,\n        default: true\n      },\n      mapLabelShow: {\n        type: Boolean,\n        default: false\n      },\n      mapLabelEmphasisShow: {\n        type: Boolean,\n        default: true\n      },\n      shadowBlur: {\n        type: Number,\n        default: 40\n      }\n    },\n    data() {\n      return {\n        chartName: '[地图模板]',\n        mapJson: {}\n        // maxValue: 0,\n        // minValue: 0\n      }\n    },\n    watch: {\n      chartData() {\n        console.log(`${this.chartName}chartData[新值:${this.newVal};旧值:${this.oldVal}]`)\n        this.refresh()\n      },\n      mapItemAreaColor() {\n        console.log(`${this.chartName}mapItemAreaColor[新值:${this.newVal};旧值:${this.oldVal}]`)\n        this.refresh()\n      },\n      mapItemHoverareaColor() {\n        console.log(`${this.chartName}mapItemHoverareaColor[新值:${this.newVal};旧值:${this.oldVal}]`)\n        this.refresh()\n      },\n      mapItemborderColor() {\n        console.log(`${this.chartName}mapItemborderColor[新值:${this.newVal};旧值:${this.oldVal}]`)\n        this.refresh()\n      },\n      mapLabelColor() {\n        console.log(`${this.chartName}mapLabelColor[新值:${this.newVal};旧值:${this.oldVal}]`)\n        this.refresh()\n      },\n      mapType() {\n        console.log(`${this.chartName}mapType[新值:${this.newVal};旧值:${this.oldVal}]`)\n        this.refresh()\n      },\n      mapZoom() {\n        console.log(`${this.chartName}mapZoom[新值:${this.newVal};旧值:${this.oldVal}]`)\n        this.refresh()\n      },\n      layoutCenter(newVal, oldVal) {\n        console.log('newVal===', newVal)\n        console.log('oldVal===', oldVal)\n        console.log(`${this.chartName}layoutCenter[新值:${newVal};旧值:${oldVal}]`)\n        this.refresh()\n      },\n      showTooltip() {\n        console.log(`${this.chartName}showTooltip[新值:${this.newVal};旧值:${this.oldVal}]`)\n        this.refresh()\n      },\n      mapLabelShow() {\n        console.log(`${this.chartName}mapLabelShow[新值:${this.newVal};旧值:${this.oldVal}]`)\n        this.refresh()\n      },\n      mapLabelEmphasisShow() {\n        console.log(`${this.chartName}mapLabelEmphasisShow[新值:${this.newVal};旧值:${this.oldVal}]`)\n        this.refresh()\n      }\n    },\n    methods: {\n      // getMaxMinValue(data) {\n      //   if (data && data.length && data.length > 0) {\n      //     const maxArr = data.sort((a, b) => {\n      //       return b.value - a.value\n      //     })\n      //     this.maxValue = maxArr[0].value\n      //     this.minValue = maxArr[data.length - 1].value\n      //   }\n      // },\n      initMapJson() {\n        if (this.mapType === 'china') {\n          this.mapJson = require(`echarts/map/json/${this.mapType}.json`)\n          ECharts.registerMap(this.mapType, this.mapJson)\n        } else if (this.mapType === 'world') {\n          this.mapJson = require(`echarts/map/json/${this.mapType}.json`)\n          ECharts.registerMap(this.mapType, this.mapJson)\n        } else {\n          this.mapJson = require(`echarts/map/json/province/${\n            this.mapType\n            }.json`)\n          ECharts.registerMap(this.mapType, this.mapJson)\n        }\n      },\n      tooltipOpt(params) {\n        this.tooltipFormatter = this.tooltipFormatter || ''\n        let name = params.name\n        if (this.mapType === 'world') {\n          name = getCnCountry(params.name)\n        }\n        let html = ''\n        if (this.tooltipFormatter === '') {\n          html = `${name} ：${params.data ? params.data.value[2] : 0}`\n        } else {\n          if(this.tooltipFormatter === 'ministry') {\n            html = `${name}：${params.data.value[2] === 0 ? '未对接' : params.data.value[2] === 1 ? '对接中' : '已对接'}`\n          }else if(this.tooltipFormatter === 'enterprise') {\n            html = `${name} <br/> 被攻击企业数量：${params.data.value[2] || 0} <br/> 被攻击成功企业数量：${params.data.success || 0}`\n          }else{\n            html = `${name} <br/>${this.tooltipFormatter}：${params.data ? params.data.value[2] : 0}`\n          }\n        }\n        return html\n      },\n      convertMapData(data) {\n        let geoCoordMap = {}\n        let mapFeatures = this.mapJson.features\n        // console.log('mapFeatures===', mapFeatures)\n        if (mapFeatures && mapFeatures.length !== 0) {\n          mapFeatures.forEach(v => {\n            let name = v.properties.name // 地区名称\n            // geoCoordMap[name] = v.properties.cp // 地区经纬度\n            if (name !== '') {\n              if (v.properties.cp) {\n                geoCoordMap[name] = v.properties.cp // 地区经纬度\n              } else {\n                if (data && data.length !== 0) {\n                  // console.log('data=========+++++++', data)\n                  data.forEach((item, i) => {\n                    if (name === item.name) {\n                      geoCoordMap[name] = item.cp\n                    }\n                  })\n                }\n              }\n            }\n          })\n        }\n        const res = []\n        if (data && data.length !== 0) {\n          data.forEach(item => {\n            // console.log('item===', item)\n            let geoCoord = geoCoordMap[item.name]\n            // console.log('geoCoord', geoCoord)\n            if (geoCoord) {\n              const obj = {}\n              for (let key in item) {\n                if (key === 'value') {\n                  obj[key] = geoCoord.concat(item[key])\n                } else {\n                  obj[key] = item[key]\n                }\n              }\n              res.push(obj)\n            }\n          })\n        }\n        // console.log('res==', res)\n        return res\n      },\n      setOptions() {\n        let that = this\n        // console.log('this.seriesData===', this.seriesData)\n        // this.getMaxMinValue(this.chartData.seriesData)\n        // this.getMaxMinValue(this.chartData.seriesData)\n        // const size = this.maxValue - this.minValue\n\n        this.initMapJson()\n\n        if (this.mapType === 'world') {\n          // this.mapLabelShow = false\n          if (this.chartData.seriesData && this.chartData.seriesData.length !== 0) {\n            this.chartData.seriesData.forEach(item => {\n              item.name = getEnCountry(item.name)\n              item['cp'] = getCoord(item.name)\n            })\n          }\n        }\n\n        console.log('this.visualMap():', this.visualMap())\n        let mapOpts = {\n          tooltip: {\n            show: this.showTooltip,\n            trigger: 'item',\n            transitionDuration: 0,\n            formatter: function(params) {\n              // console.log('params', params)\n              // const data = params\n              return that.tooltipOpt(params)\n            }\n          },\n          visualMap: {...this.visualMap()},\n          // visualMap: {\n          //   ...visualMapOpt(\n          //   this.visualMapLeft,\n          //   this.visualMapTop,\n          //   this.visualMapRight,\n          //   this.visualMapBottom,\n          //   this.visualMapOrient,\n          //   this.visualMapAlign\n          // ),\n          //   show: this.visualMapShow,\n          //   min: this.visualMapMin, //this.minValue, //this.min\n          //   max: this.visualMapMax, //this.maxValue, //this.max,\n          //   inRange: {\n          //     color: ['rgba(219,112,147,0.4)', 'rgba(238,25,27,1)']\n          //   },\n          //   // color: ['rgba(219,112,147,0.4)', 'rgba(238,25,27,1)'], //[this.colors[0], this.colors[1]],\n          //   text: ['高', '低'], // 文本，默认为数值文本\n          //   textStyle: {\n          //     color: this.mapLabelColor//this.colors[3]\n          //   },\n          //   calculable: true\n          // },\n          geo: {\n            show: true,\n            map: this.mapType,\n            roam: this.roam,\n            zoom: this.mapZoom,\n            hoverAnimation: true,\n            layoutCenter: this.layoutCenter,\n            layoutSize: '100%',\n            label: {\n              normal: {\n                show: this.mapLabelShow,\n                color: this.mapLabelColor//this.colors[5] //chartColors.whiteColor\n              },\n              emphasis: {\n                show: this.mapLabelEmphasisShow, //true,\n                color: this.mapLabelColor//this.colors[5]\n              }\n            },\n            itemStyle: {\n              normal: {\n                areaColor: this.mapItemAreaColor, //this.colors[0], //chartColors.mapItemAreaColor,\n                borderColor: this.mapItemborderColor, //this.colors[2], //chartColors.mapItemborderColor,\n                // borderWidth: 1\n                shadowColor: this.mapItemborderColor,\n                shadowBlur: this.shadowBlur//40\n              },\n              emphasis: {\n                areaColor: this.mapItemHoverareaColor //this.colors[1] //chartColors.mapItemHoverareaColor\n              }\n            }\n          },\n          series: [\n            {\n              name: this.tooltipFormatter,\n              type: 'map',\n              mapType: this.mapType,\n              geoIndex: 0,\n              data: this.convertMapData(this.chartData.seriesData)\n            }\n          ]\n        }\n        // console.log('mapOpts==', mapOpts)\n        setTimeout(() => {\n          this.options = mapOpts\n        }, 20)\n        return mapOpts\n      }\n    }\n  }\n",{"version":3,"sources":["visualMapChart.vue"],"names":[],"mappingsfile":"visualMapChart.vue","sourceRoot":"src/components/echarts/map","sourcesContent":["<template>\r\n  <ECharts :options=\"options\" :autoresize=\"true\"></ECharts>\r\n</template>\r\n\r\n<script>\r\n  import ECharts from 'vue-echarts/components/ECharts'\r\n  // import globalChartMixin from 'mixins/globalChartMixin'\r\n  import storage from \"utils/storage\"\r\n  import { getEnCountry, getCnCountry, getCoord } from 'constants/worldsForMap'\r\n//eslint-disable-line\r\n  // import { getMaxValue, getMinValue } from 'constants/utils'\r\n  // import { visualMapOpt } from 'constants/chartConfig'\r\n  import visualMapMixin from 'mixins/visualMapMixin'\r\n  const chartColors = storage.get('tColors')\r\n\r\n  export default {\r\n    name: 'mapLineChart',\r\n    components: { ECharts },\r\n    mixins: [\r\n      // globalChartMixin\r\n      visualMapMixin\r\n    ],\r\n    props: {\r\n      chartData: {\r\n        type: Object,\r\n        default: () => {\r\n          return {\r\n            // moveLineData: [\r\n            //   [{ name: '湖北' }, { name: '北京', value: 95 }],\r\n            //   [{ name: '湖北' }, { name: '广东', value: 90 }],\r\n            //   [{ name: '湖北' }, { name: '上海', value: 80 }],\r\n            //   [{ name: '湖北' }, { name: '西藏', value: 70 }]\r\n            //   // [{ name: '中国' }, { name: '美国', value: 95 }],\r\n            //   // [{ name: '中国' }, { name: '英国', value: 90 }],\r\n            //   // [{ name: '中国' }, { name: '意大利', value: 80 }],\r\n            //   // [{ name: '中国' }, { name: '澳大利亚', value: 70 }]\r\n            // ]\r\n            seriesData: [\r\n              { name: '北京', value: 1253 },\r\n              { name: '广东', value: 965 },\r\n              { name: '上海', value: 732 },\r\n              { name: '湖北', value: 655 },\r\n              { name: '湖南', value: 523 },\r\n              { name: '西藏', value: 501 },\r\n              { name: '天津', value: 425 },\r\n              { name: '四川', value: 412 },\r\n              { name: '浙江', value: 365 }\r\n            ]\r\n          }\r\n        }\r\n      },\r\n      // colors: {\r\n      //   type: Array,\r\n      //   default: () => chartColors.mapColors\r\n      // },\r\n      mapItemAreaColor: {\r\n        type: String,\r\n        default: chartColors.visualMap.area\r\n      },\r\n      roam: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      mapItemHoverareaColor: {\r\n        type: String,\r\n        default: chartColors.visualMap.hoverArea\r\n      },\r\n      mapItemborderColor: {\r\n        type: String,\r\n        default: chartColors.visualMap.border\r\n      },\r\n      mapLabelColor: {\r\n        type: String,\r\n        default: chartColors.visualMap.label\r\n      },\r\n      tooltipFormatter: {\r\n        type: String,\r\n        default: '告警事件'\r\n      },\r\n      mapType: {\r\n        type: String,\r\n        default: 'china'\r\n      },\r\n      mapZoom: {\r\n        type: Number,\r\n        default: 1.1\r\n      },\r\n      layoutCenter: {\r\n        type: Array,\r\n        default: () => ['52%', '45%']\r\n      },\r\n      showTooltip: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      mapLabelShow: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      mapLabelEmphasisShow: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      shadowBlur: {\r\n        type: Number,\r\n        default: 40\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        chartName: '[地图模板]',\r\n        mapJson: {}\r\n        // maxValue: 0,\r\n        // minValue: 0\r\n      }\r\n    },\r\n    watch: {\r\n      chartData() {\r\n        console.log(`${this.chartName}chartData[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapItemAreaColor() {\r\n        console.log(`${this.chartName}mapItemAreaColor[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapItemHoverareaColor() {\r\n        console.log(`${this.chartName}mapItemHoverareaColor[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapItemborderColor() {\r\n        console.log(`${this.chartName}mapItemborderColor[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapLabelColor() {\r\n        console.log(`${this.chartName}mapLabelColor[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapType() {\r\n        console.log(`${this.chartName}mapType[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapZoom() {\r\n        console.log(`${this.chartName}mapZoom[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      layoutCenter(newVal, oldVal) {\r\n        console.log('newVal===', newVal)\r\n        console.log('oldVal===', oldVal)\r\n        console.log(`${this.chartName}layoutCenter[新值:${newVal};旧值:${oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      showTooltip() {\r\n        console.log(`${this.chartName}showTooltip[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapLabelShow() {\r\n        console.log(`${this.chartName}mapLabelShow[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      },\r\n      mapLabelEmphasisShow() {\r\n        console.log(`${this.chartName}mapLabelEmphasisShow[新值:${this.newVal};旧值:${this.oldVal}]`)\r\n        this.refresh()\r\n      }\r\n    },\r\n    methods: {\r\n      // getMaxMinValue(data) {\r\n      //   if (data && data.length && data.length > 0) {\r\n      //     const maxArr = data.sort((a, b) => {\r\n      //       return b.value - a.value\r\n      //     })\r\n      //     this.maxValue = maxArr[0].value\r\n      //     this.minValue = maxArr[data.length - 1].value\r\n      //   }\r\n      // },\r\n      initMapJson() {\r\n        if (this.mapType === 'china') {\r\n          this.mapJson = require(`echarts/map/json/${this.mapType}.json`)\r\n          ECharts.registerMap(this.mapType, this.mapJson)\r\n        } else if (this.mapType === 'world') {\r\n          this.mapJson = require(`echarts/map/json/${this.mapType}.json`)\r\n          ECharts.registerMap(this.mapType, this.mapJson)\r\n        } else {\r\n          this.mapJson = require(`echarts/map/json/province/${\r\n            this.mapType\r\n            }.json`)\r\n          ECharts.registerMap(this.mapType, this.mapJson)\r\n        }\r\n      },\r\n      tooltipOpt(params) {\r\n        this.tooltipFormatter = this.tooltipFormatter || ''\r\n        let name = params.name\r\n        if (this.mapType === 'world') {\r\n          name = getCnCountry(params.name)\r\n        }\r\n        let html = ''\r\n        if (this.tooltipFormatter === '') {\r\n          html = `${name} ：${params.data ? params.data.value[2] : 0}`\r\n        } else {\r\n          if(this.tooltipFormatter === 'ministry') {\r\n            html = `${name}：${params.data.value[2] === 0 ? '未对接' : params.data.value[2] === 1 ? '对接中' : '已对接'}`\r\n          }else if(this.tooltipFormatter === 'enterprise') {\r\n            html = `${name} <br/> 被攻击企业数量：${params.data.value[2] || 0} <br/> 被攻击成功企业数量：${params.data.success || 0}`\r\n          }else{\r\n            html = `${name} <br/>${this.tooltipFormatter}：${params.data ? params.data.value[2] : 0}`\r\n          }\r\n        }\r\n        return html\r\n      },\r\n      convertMapData(data) {\r\n        let geoCoordMap = {}\r\n        let mapFeatures = this.mapJson.features\r\n        // console.log('mapFeatures===', mapFeatures)\r\n        if (mapFeatures && mapFeatures.length !== 0) {\r\n          mapFeatures.forEach(v => {\r\n            let name = v.properties.name // 地区名称\r\n            // geoCoordMap[name] = v.properties.cp // 地区经纬度\r\n            if (name !== '') {\r\n              if (v.properties.cp) {\r\n                geoCoordMap[name] = v.properties.cp // 地区经纬度\r\n              } else {\r\n                if (data && data.length !== 0) {\r\n                  // console.log('data=========+++++++', data)\r\n                  data.forEach((item, i) => {\r\n                    if (name === item.name) {\r\n                      geoCoordMap[name] = item.cp\r\n                    }\r\n                  })\r\n                }\r\n              }\r\n            }\r\n          })\r\n        }\r\n        const res = []\r\n        if (data && data.length !== 0) {\r\n          data.forEach(item => {\r\n            // console.log('item===', item)\r\n            let geoCoord = geoCoordMap[item.name]\r\n            // console.log('geoCoord', geoCoord)\r\n            if (geoCoord) {\r\n              const obj = {}\r\n              for (let key in item) {\r\n                if (key === 'value') {\r\n                  obj[key] = geoCoord.concat(item[key])\r\n                } else {\r\n                  obj[key] = item[key]\r\n                }\r\n              }\r\n              res.push(obj)\r\n            }\r\n          })\r\n        }\r\n        // console.log('res==', res)\r\n        return res\r\n      },\r\n      setOptions() {\r\n        let that = this\r\n        // console.log('this.seriesData===', this.seriesData)\r\n        // this.getMaxMinValue(this.chartData.seriesData)\r\n        // this.getMaxMinValue(this.chartData.seriesData)\r\n        // const size = this.maxValue - this.minValue\r\n\r\n        this.initMapJson()\r\n\r\n        if (this.mapType === 'world') {\r\n          // this.mapLabelShow = false\r\n          if (this.chartData.seriesData && this.chartData.seriesData.length !== 0) {\r\n            this.chartData.seriesData.forEach(item => {\r\n              item.name = getEnCountry(item.name)\r\n              item['cp'] = getCoord(item.name)\r\n            })\r\n          }\r\n        }\r\n\r\n        console.log('this.visualMap():', this.visualMap())\r\n        let mapOpts = {\r\n          tooltip: {\r\n            show: this.showTooltip,\r\n            trigger: 'item',\r\n            transitionDuration: 0,\r\n            formatter: function(params) {\r\n              // console.log('params', params)\r\n              // const data = params\r\n              return that.tooltipOpt(params)\r\n            }\r\n          },\r\n          visualMap: {...this.visualMap()},\r\n          // visualMap: {\r\n          //   ...visualMapOpt(\r\n          //   this.visualMapLeft,\r\n          //   this.visualMapTop,\r\n          //   this.visualMapRight,\r\n          //   this.visualMapBottom,\r\n          //   this.visualMapOrient,\r\n          //   this.visualMapAlign\r\n          // ),\r\n          //   show: this.visualMapShow,\r\n          //   min: this.visualMapMin, //this.minValue, //this.min\r\n          //   max: this.visualMapMax, //this.maxValue, //this.max,\r\n          //   inRange: {\r\n          //     color: ['rgba(219,112,147,0.4)', 'rgba(238,25,27,1)']\r\n          //   },\r\n          //   // color: ['rgba(219,112,147,0.4)', 'rgba(238,25,27,1)'], //[this.colors[0], this.colors[1]],\r\n          //   text: ['高', '低'], // 文本，默认为数值文本\r\n          //   textStyle: {\r\n          //     color: this.mapLabelColor//this.colors[3]\r\n          //   },\r\n          //   calculable: true\r\n          // },\r\n          geo: {\r\n            show: true,\r\n            map: this.mapType,\r\n            roam: this.roam,\r\n            zoom: this.mapZoom,\r\n            hoverAnimation: true,\r\n            layoutCenter: this.layoutCenter,\r\n            layoutSize: '100%',\r\n            label: {\r\n              normal: {\r\n                show: this.mapLabelShow,\r\n                color: this.mapLabelColor//this.colors[5] //chartColors.whiteColor\r\n              },\r\n              emphasis: {\r\n                show: this.mapLabelEmphasisShow, //true,\r\n                color: this.mapLabelColor//this.colors[5]\r\n              }\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                areaColor: this.mapItemAreaColor, //this.colors[0], //chartColors.mapItemAreaColor,\r\n                borderColor: this.mapItemborderColor, //this.colors[2], //chartColors.mapItemborderColor,\r\n                // borderWidth: 1\r\n                shadowColor: this.mapItemborderColor,\r\n                shadowBlur: this.shadowBlur//40\r\n              },\r\n              emphasis: {\r\n                areaColor: this.mapItemHoverareaColor //this.colors[1] //chartColors.mapItemHoverareaColor\r\n              }\r\n            }\r\n          },\r\n          series: [\r\n            {\r\n              name: this.tooltipFormatter,\r\n              type: 'map',\r\n              mapType: this.mapType,\r\n              geoIndex: 0,\r\n              data: this.convertMapData(this.chartData.seriesData)\r\n            }\r\n          ]\r\n        }\r\n        // console.log('mapOpts==', mapOpts)\r\n        setTimeout(() => {\r\n          this.options = mapOpts\r\n        }, 20)\r\n        return mapOpts\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}