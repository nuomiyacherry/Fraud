{"remainingRequest":"D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\工作项目\\部反诈\\src\\components\\echarts\\pictorialBar\\pictorialBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\工作项目\\部反诈\\src\\components\\echarts\\pictorialBar\\pictorialBar.vue","mtime":1598758386824},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\工作项目\\部反诈\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\r\nimport storage from \"utils/storage\"\r\nimport { getMaxValue, getMinValue, getRangeData } from 'constants/utils'\r\nimport { getNationalPng, getCountryImg } from \"@/constants/country\"\r\nimport globalChartMixin from 'mixins/globalChartMixin'\r\nimport gridChartMixin from 'mixins/gridChartMixin'\r\nimport colorChartMixin from 'mixins/colorChartMixin'\r\nimport axisChartMixin from 'mixins/axisChartMixin'\r\nimport tooltipChartMixin from 'mixins/tooltipChartMixin'\r\nimport ECharts from 'vue-echarts/components/ECharts'\r\nimport 'echarts/lib/chart/pictorialBar'\r\nimport 'echarts/lib/chart/bar'\r\nimport 'echarts/lib/component/tooltip'\r\nimport 'echarts/lib/component/legend'\r\nimport 'echarts/lib/component/legendScroll'\r\nimport 'echarts/lib/component/title'\r\nimport echarts from 'echarts'\r\nconst chartColors = storage.get('tColors')\r\nexport default {\r\n  name: 'pictorialBar',\r\n  components: {\r\n    ECharts\r\n  },\r\n  mixins: [ globalChartMixin, axisChartMixin, gridChartMixin, colorChartMixin, tooltipChartMixin ],\r\n  props: {\r\n    chartData: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          seriesName: '图例',\r\n          seriesData: [51236, 45234, 48243, 23244, 52439, 24328],\r\n          categoryData: ['1月', '2月', '3月', '4月', '5月', '6月']\r\n        }\r\n      }\r\n    },\r\n    toolTipType: {\r\n      type: String,\r\n      default: 'default'\r\n    },\r\n    colors: {\r\n      type: Array,\r\n      default: () => chartColors.pictorialBar.colors\r\n    },\r\n    size: {\r\n      type: Array,\r\n      default: () => [6, 10]\r\n    },\r\n    bgColors: {\r\n      type: String,\r\n      default: chartColors.pictorialBar.batteryBg\r\n    },\r\n    hasNational: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    range: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    labelShow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    isClick: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    isPercent: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      ranges: []\r\n    }\r\n  },\r\n  watch: {\r\n    chartData: {\r\n      handler(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      deep: true\r\n    },\r\n    colors(newVal, oldVal) {\r\n      this.refresh()\r\n    },\r\n    size(newVal, oldVal) {\r\n      this.refresh()\r\n    },\r\n    hasNational(newVal, oldVal) {\r\n      this.refresh()\r\n    },\r\n    range(newVal, oldVal) {\r\n      this.ranges = newVal\r\n      this.refresh()\r\n    },\r\n    labelShow(newVal, oldVal) {\r\n      this.refresh()\r\n    }\r\n  },\r\n  methods: {\r\n    barClick(params) {\r\n      if(this.isClick) {\r\n        this.$emit('barClick', params)\r\n      }\r\n    },\r\n    setOptions() {\r\n      const _this = this\r\n      if (!this.chartData.seriesData) return  {}\r\n      if(this.chartData.seriesData.length === 0) return {}\r\n      if(this.chartData.categoryData.length === 0) return {}\r\n      if(!this.chartData.categoryData) return {}\r\n      let [ legendData, seriesData, categoryData ] = [ this.chartData.legendData, this.chartData.seriesData, this.chartData.categoryData ]\r\n      let [ maxValue, symbolSize ] = [ 0, 0, [] ]\r\n      let series = []\r\n      if(this.xAxisValue) {\r\n        symbolSize = this.size\r\n      } else {\r\n        symbolSize = [this.size[1], this.size[0]]\r\n      }\r\n      let originalData = seriesData\r\n      let max = getMaxValue(seriesData, 0)\r\n      let min = getMinValue(seriesData)\r\n      let tempArr = [...seriesData]\r\n      tempArr.sort((a, b) => a - b)\r\n      if (tempArr.length > 0) {\r\n        min = tempArr[0]\r\n      }\r\n      // this.range.length !== 0 ?  this.ranges = this.range : this.ranges = [min, max]\r\n      if(this.range.length !== 0 && seriesData.length !== 1) {\r\n        this.ranges = this.range\r\n        seriesData = getRangeData(seriesData, [min, max], this.ranges)\r\n      }\r\n      maxValue = getMaxValue(seriesData, maxValue)\r\n      const data = []\r\n      const data2 = []\r\n      seriesData.forEach((item, index) => {\r\n        data.push({\r\n          value: item,\r\n          itemStyle: {\r\n            normal: {\r\n              color: this.colors[index]\r\n            }\r\n          }\r\n        })\r\n        data2.push({\r\n          value: item\r\n        })\r\n      })\r\n      series.push({\r\n        name: this.chartData.seriesName,\r\n        type: 'pictorialBar',\r\n        symbol: 'rect',\r\n        symbolRepeat: 'fixed',\r\n        symbolMargin: '20%',\r\n        symbolClip: true,\r\n        symbolSize: symbolSize,\r\n        symbolBoundingData: maxValue,\r\n        data: data,\r\n        label: {\r\n          show: this.labelShow,\r\n          position: 'right',\r\n          formatter: function(params) {\r\n            if(_this.isPercent) {\r\n              return params.value + '%'\r\n            }\r\n            return params.value\r\n          }\r\n        },\r\n        z: 9999999,\r\n        animationEasing: 'elasticOut',\r\n        animationDelay: function(dataIndex, params) {\r\n            return params.index * 30\r\n        }\r\n      }, {\r\n        // full data\r\n        type: 'pictorialBar',\r\n        itemStyle: {\r\n          normal: {\r\n            color: this.bgColors\r\n          }\r\n        },\r\n        animationDuration: 0,\r\n        symbolRepeat: 'fixed',\r\n        symbolMargin: '20%',\r\n        symbol: 'rect',\r\n        symbolSize: symbolSize,\r\n        symbolBoundingData: maxValue,\r\n        data: data2,\r\n        z: 9999,\r\n        animationEasing: 'elasticOut',\r\n        animationDelay: function(dataIndex, params) {\r\n            return params.index * 30\r\n        }\r\n      }\r\n      )\r\n      let axisOptions = this.axisOpt()\r\n      let tooltipFormatter = (params) => {\r\n        // console.log(params, '===formatter params')\r\n        let obj = params[0]\r\n        let str = ''\r\n        // console.log('originalData:', originalData, this.chartData)\r\n        originalData.forEach((item, i) => {\r\n          if(obj.dataIndex === i) {\r\n            // console.log(i, obj.dataIndex)\r\n            str = obj.name + '<br/>' + obj.seriesName + ': ' + item + (_this.isPercent ? '%' : '')\r\n          }\r\n        })\r\n        return str\r\n      }\r\n      if (this.toolTipType === 'attackSource') {\r\n        tooltipFormatter = (params) => {\r\n          // console.log(params, '===formatter params')\r\n          let obj = params[0]\r\n          let str = ''\r\n          // console.log('originalData:', originalData, this.chartData)\r\n          originalData.forEach((item, i) => {\r\n            if(obj.dataIndex === i) {\r\n              console.log('obj.name:', obj.name)\r\n\r\n              str = obj.name + '(' + obj.seriesName + '：' + item + ')'\r\n              \r\n              let tipItemMap = this.chartData.tip[obj.name]\r\n              let addTipStr = \"\"\r\n              addTipStr += \"<br/>\" + '威胁标签：' + tipItemMap['eventType']\r\n              addTipStr += \"<br/>\" + '攻击省份：' + tipItemMap['attackedProvince']\r\n\r\n              str += addTipStr\r\n            }\r\n          })\r\n          return str\r\n        }\r\n      }\r\n      let barOpt = {\r\n        color: this.colors,\r\n        tooltip: {\r\n          show: this.tooltipShow,\r\n          ...this.tooltipOpt(),\r\n          formatter: tooltipFormatter\r\n        },\r\n        legend: {\r\n          ...this.legendOpt(),\r\n          show: this.legendShow,\r\n          data: legendData,\r\n          textStyle: {\r\n            color: this.legendTextColor\r\n          },\r\n          pageTextStyle: {\r\n            color: this.legendPageTextColor\r\n          }\r\n        },\r\n        grid: {\r\n          ...this.gridOpt(),\r\n          containLabel: true\r\n        },\r\n        ...axisOptions,\r\n        series: series\r\n      }\r\n      if (this.xAxisValue) {\r\n        barOpt.yAxis.data = categoryData\r\n        barOpt.yAxis.axisLabel.interval = 0\r\n        if (this.labelLimit) {\r\n          // barOpt.yAxis.axisLabel.align = 'left'\r\n          // barOpt.yAxis.offset = this.labelLimitWidth\r\n          barOpt.yAxis.axisLabel.formatter = name => {\r\n            return echarts.format.truncateText(name, this.labelLimitWidth)\r\n          }\r\n        }\r\n      } else {\r\n        barOpt.xAxis.data = categoryData\r\n        barOpt.xAxis.axisLabel.interval = 0\r\n        if (this.labelLimit) {\r\n          barOpt.xAxis.axisLabel.formatter = name => {\r\n            return echarts.format.truncateText(name, this.labelLimitWidth)\r\n          }\r\n        }\r\n      }\r\n      // 数值过大，添加相应单位\r\n      if (max > 10000 || min < -10000) {\r\n        //添加单位\r\n        if (this.xAxisValue) {\r\n          this.axisValueOpt(barOpt.xAxis, max, min)\r\n        } else {\r\n          this.axisValueOpt(barOpt.yAxis, max, min)\r\n        }\r\n      }\r\n      if(this.hasNational) {\r\n        barOpt = this.countryLabelFormatter(barOpt)\r\n      }\r\n      return barOpt\r\n      // return barOpt\r\n    },\r\n    countryLabelFormatter(barOpt) {\r\n      const _this = this\r\n      const label = this.xAxisValue ? 'yAxis' : 'xAxis'\r\n      barOpt[label].axisLabel.padding = [0, 0, 0, 12]\r\n      // barOpt[label].axisLabel.align = 'justify'\r\n      barOpt[label].axisLabel.formatter = function(val, index) {\r\n        if(_this.hasNational) {\r\n          let str = val\r\n          let name = getNationalPng(val)\r\n          // if(val.length === 2) {\r\n          //   str = str.slice(0, 1) + '\\t\\t\\t' + str.slice(1)\r\n          // }\r\n          // return '{' + name + '| }' + '  ' + '{value|' + str + '}'\r\n          return '{value|' + str + '}' + '  ' + '{' + name + '| }'\r\n        } else {\r\n          return val\r\n        }\r\n      }\r\n      barOpt[label].axisLabel.rich = {\r\n        value: {\r\n          lineHeight: 30\r\n        },\r\n        ...getCountryImg()\r\n      }\r\n      return barOpt\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["pictorialBar.vue"],"names":[],"mappingsfile":"pictorialBar.vue","sourceRoot":"src/components/echarts/pictorialBar","sourcesContent":["<template>\r\n  <div class=\"pictorialBar full-block\">\r\n    <ECharts :options=\"options\" :autoresize=\"true\" @click=\"barClick\"></ECharts>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport storage from \"utils/storage\"\r\nimport { getMaxValue, getMinValue, getRangeData } from 'constants/utils'\r\nimport { getNationalPng, getCountryImg } from \"@/constants/country\"\r\nimport globalChartMixin from 'mixins/globalChartMixin'\r\nimport gridChartMixin from 'mixins/gridChartMixin'\r\nimport colorChartMixin from 'mixins/colorChartMixin'\r\nimport axisChartMixin from 'mixins/axisChartMixin'\r\nimport tooltipChartMixin from 'mixins/tooltipChartMixin'\r\nimport ECharts from 'vue-echarts/components/ECharts'\r\nimport 'echarts/lib/chart/pictorialBar'\r\nimport 'echarts/lib/chart/bar'\r\nimport 'echarts/lib/component/tooltip'\r\nimport 'echarts/lib/component/legend'\r\nimport 'echarts/lib/component/legendScroll'\r\nimport 'echarts/lib/component/title'\r\nimport echarts from 'echarts'\r\nconst chartColors = storage.get('tColors')\r\nexport default {\r\n  name: 'pictorialBar',\r\n  components: {\r\n    ECharts\r\n  },\r\n  mixins: [ globalChartMixin, axisChartMixin, gridChartMixin, colorChartMixin, tooltipChartMixin ],\r\n  props: {\r\n    chartData: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          seriesName: '图例',\r\n          seriesData: [51236, 45234, 48243, 23244, 52439, 24328],\r\n          categoryData: ['1月', '2月', '3月', '4月', '5月', '6月']\r\n        }\r\n      }\r\n    },\r\n    toolTipType: {\r\n      type: String,\r\n      default: 'default'\r\n    },\r\n    colors: {\r\n      type: Array,\r\n      default: () => chartColors.pictorialBar.colors\r\n    },\r\n    size: {\r\n      type: Array,\r\n      default: () => [6, 10]\r\n    },\r\n    bgColors: {\r\n      type: String,\r\n      default: chartColors.pictorialBar.batteryBg\r\n    },\r\n    hasNational: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    range: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    labelShow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    isClick: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    isPercent: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      ranges: []\r\n    }\r\n  },\r\n  watch: {\r\n    chartData: {\r\n      handler(newVal, oldVal) {\r\n        this.refresh()\r\n      },\r\n      deep: true\r\n    },\r\n    colors(newVal, oldVal) {\r\n      this.refresh()\r\n    },\r\n    size(newVal, oldVal) {\r\n      this.refresh()\r\n    },\r\n    hasNational(newVal, oldVal) {\r\n      this.refresh()\r\n    },\r\n    range(newVal, oldVal) {\r\n      this.ranges = newVal\r\n      this.refresh()\r\n    },\r\n    labelShow(newVal, oldVal) {\r\n      this.refresh()\r\n    }\r\n  },\r\n  methods: {\r\n    barClick(params) {\r\n      if(this.isClick) {\r\n        this.$emit('barClick', params)\r\n      }\r\n    },\r\n    setOptions() {\r\n      const _this = this\r\n      if (!this.chartData.seriesData) return  {}\r\n      if(this.chartData.seriesData.length === 0) return {}\r\n      if(this.chartData.categoryData.length === 0) return {}\r\n      if(!this.chartData.categoryData) return {}\r\n      let [ legendData, seriesData, categoryData ] = [ this.chartData.legendData, this.chartData.seriesData, this.chartData.categoryData ]\r\n      let [ maxValue, symbolSize ] = [ 0, 0, [] ]\r\n      let series = []\r\n      if(this.xAxisValue) {\r\n        symbolSize = this.size\r\n      } else {\r\n        symbolSize = [this.size[1], this.size[0]]\r\n      }\r\n      let originalData = seriesData\r\n      let max = getMaxValue(seriesData, 0)\r\n      let min = getMinValue(seriesData)\r\n      let tempArr = [...seriesData]\r\n      tempArr.sort((a, b) => a - b)\r\n      if (tempArr.length > 0) {\r\n        min = tempArr[0]\r\n      }\r\n      // this.range.length !== 0 ?  this.ranges = this.range : this.ranges = [min, max]\r\n      if(this.range.length !== 0 && seriesData.length !== 1) {\r\n        this.ranges = this.range\r\n        seriesData = getRangeData(seriesData, [min, max], this.ranges)\r\n      }\r\n      maxValue = getMaxValue(seriesData, maxValue)\r\n      const data = []\r\n      const data2 = []\r\n      seriesData.forEach((item, index) => {\r\n        data.push({\r\n          value: item,\r\n          itemStyle: {\r\n            normal: {\r\n              color: this.colors[index]\r\n            }\r\n          }\r\n        })\r\n        data2.push({\r\n          value: item\r\n        })\r\n      })\r\n      series.push({\r\n        name: this.chartData.seriesName,\r\n        type: 'pictorialBar',\r\n        symbol: 'rect',\r\n        symbolRepeat: 'fixed',\r\n        symbolMargin: '20%',\r\n        symbolClip: true,\r\n        symbolSize: symbolSize,\r\n        symbolBoundingData: maxValue,\r\n        data: data,\r\n        label: {\r\n          show: this.labelShow,\r\n          position: 'right',\r\n          formatter: function(params) {\r\n            if(_this.isPercent) {\r\n              return params.value + '%'\r\n            }\r\n            return params.value\r\n          }\r\n        },\r\n        z: 9999999,\r\n        animationEasing: 'elasticOut',\r\n        animationDelay: function(dataIndex, params) {\r\n            return params.index * 30\r\n        }\r\n      }, {\r\n        // full data\r\n        type: 'pictorialBar',\r\n        itemStyle: {\r\n          normal: {\r\n            color: this.bgColors\r\n          }\r\n        },\r\n        animationDuration: 0,\r\n        symbolRepeat: 'fixed',\r\n        symbolMargin: '20%',\r\n        symbol: 'rect',\r\n        symbolSize: symbolSize,\r\n        symbolBoundingData: maxValue,\r\n        data: data2,\r\n        z: 9999,\r\n        animationEasing: 'elasticOut',\r\n        animationDelay: function(dataIndex, params) {\r\n            return params.index * 30\r\n        }\r\n      }\r\n      )\r\n      let axisOptions = this.axisOpt()\r\n      let tooltipFormatter = (params) => {\r\n        // console.log(params, '===formatter params')\r\n        let obj = params[0]\r\n        let str = ''\r\n        // console.log('originalData:', originalData, this.chartData)\r\n        originalData.forEach((item, i) => {\r\n          if(obj.dataIndex === i) {\r\n            // console.log(i, obj.dataIndex)\r\n            str = obj.name + '<br/>' + obj.seriesName + ': ' + item + (_this.isPercent ? '%' : '')\r\n          }\r\n        })\r\n        return str\r\n      }\r\n      if (this.toolTipType === 'attackSource') {\r\n        tooltipFormatter = (params) => {\r\n          // console.log(params, '===formatter params')\r\n          let obj = params[0]\r\n          let str = ''\r\n          // console.log('originalData:', originalData, this.chartData)\r\n          originalData.forEach((item, i) => {\r\n            if(obj.dataIndex === i) {\r\n              console.log('obj.name:', obj.name)\r\n\r\n              str = obj.name + '(' + obj.seriesName + '：' + item + ')'\r\n              \r\n              let tipItemMap = this.chartData.tip[obj.name]\r\n              let addTipStr = \"\"\r\n              addTipStr += \"<br/>\" + '威胁标签：' + tipItemMap['eventType']\r\n              addTipStr += \"<br/>\" + '攻击省份：' + tipItemMap['attackedProvince']\r\n\r\n              str += addTipStr\r\n            }\r\n          })\r\n          return str\r\n        }\r\n      }\r\n      let barOpt = {\r\n        color: this.colors,\r\n        tooltip: {\r\n          show: this.tooltipShow,\r\n          ...this.tooltipOpt(),\r\n          formatter: tooltipFormatter\r\n        },\r\n        legend: {\r\n          ...this.legendOpt(),\r\n          show: this.legendShow,\r\n          data: legendData,\r\n          textStyle: {\r\n            color: this.legendTextColor\r\n          },\r\n          pageTextStyle: {\r\n            color: this.legendPageTextColor\r\n          }\r\n        },\r\n        grid: {\r\n          ...this.gridOpt(),\r\n          containLabel: true\r\n        },\r\n        ...axisOptions,\r\n        series: series\r\n      }\r\n      if (this.xAxisValue) {\r\n        barOpt.yAxis.data = categoryData\r\n        barOpt.yAxis.axisLabel.interval = 0\r\n        if (this.labelLimit) {\r\n          // barOpt.yAxis.axisLabel.align = 'left'\r\n          // barOpt.yAxis.offset = this.labelLimitWidth\r\n          barOpt.yAxis.axisLabel.formatter = name => {\r\n            return echarts.format.truncateText(name, this.labelLimitWidth)\r\n          }\r\n        }\r\n      } else {\r\n        barOpt.xAxis.data = categoryData\r\n        barOpt.xAxis.axisLabel.interval = 0\r\n        if (this.labelLimit) {\r\n          barOpt.xAxis.axisLabel.formatter = name => {\r\n            return echarts.format.truncateText(name, this.labelLimitWidth)\r\n          }\r\n        }\r\n      }\r\n      // 数值过大，添加相应单位\r\n      if (max > 10000 || min < -10000) {\r\n        //添加单位\r\n        if (this.xAxisValue) {\r\n          this.axisValueOpt(barOpt.xAxis, max, min)\r\n        } else {\r\n          this.axisValueOpt(barOpt.yAxis, max, min)\r\n        }\r\n      }\r\n      if(this.hasNational) {\r\n        barOpt = this.countryLabelFormatter(barOpt)\r\n      }\r\n      return barOpt\r\n      // return barOpt\r\n    },\r\n    countryLabelFormatter(barOpt) {\r\n      const _this = this\r\n      const label = this.xAxisValue ? 'yAxis' : 'xAxis'\r\n      barOpt[label].axisLabel.padding = [0, 0, 0, 12]\r\n      // barOpt[label].axisLabel.align = 'justify'\r\n      barOpt[label].axisLabel.formatter = function(val, index) {\r\n        if(_this.hasNational) {\r\n          let str = val\r\n          let name = getNationalPng(val)\r\n          // if(val.length === 2) {\r\n          //   str = str.slice(0, 1) + '\\t\\t\\t' + str.slice(1)\r\n          // }\r\n          // return '{' + name + '| }' + '  ' + '{value|' + str + '}'\r\n          return '{value|' + str + '}' + '  ' + '{' + name + '| }'\r\n        } else {\r\n          return val\r\n        }\r\n      }\r\n      barOpt[label].axisLabel.rich = {\r\n        value: {\r\n          lineHeight: 30\r\n        },\r\n        ...getCountryImg()\r\n      }\r\n      return barOpt\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}